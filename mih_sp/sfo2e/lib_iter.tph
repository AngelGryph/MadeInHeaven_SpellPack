/*
document{iter_resource}
{
Take as input the filename of a file. Return an array of filenames of resources used by that file, constructed recursively. Ignore any filenames for which the action function 'ignore', if set, returns true.</p>
<p>
We don't currently recurse through or collect the following:
<ul>
<li>Wish spell resources
<li>Familiars
<li>Tilesets
<li>The worldmap
<li>Creature animations
</ul>
</p>
<p>If 'spell_use_function' is set, apply it as a patch function to every spell resource referred to in an opcode. (We don't actually iterate through all of these
since they're not actually a resource used by the spell.) The function should take as inputs 'source' (the resref of the resource being patched), 'source_ext' (the ext of the resource being patched),
'resref' (the resref of the resource being removed/protected from, 'ext' (the ext of that resource - in this setup, basically always spl, though we do log item uses from 318 etc).

}
*/

DEFINE_ACTION_FUNCTION iter_resource
	STR_VAR start=""
			ignore=""
			spell_use_function=""
			icon_function=""
	RET_ARRAY array
BEGIN
	OUTER_SPRINT SFO_reserved_function "%spell_use_function%"
	OUTER_SPRINT SFO_reserved_icon_function "%icon_function%"
	LAF math_traverse_graph STR_VAR start relates_to=iter_main parameter="%ignore%" RET_ARRAY array=visited_nodes END

END


/*
document{iter_main}
{
Take as input the filename of a file. Return a lowercased k=>_ array of the filenames of all game resources referenced by it, assuming they exist. Exclude any file
that returns true when fed into the function 'parameter', if the latter is set
}

*/


DEFINE_ACTION_FUNCTION iter_main//internal
	STR_VAR arguments="" parameter=""
	RET_ARRAY array
BEGIN
	ACTION_CLEAR_ARRAY array
	ACTION_CLEAR_ARRAY working_array
	OUTER_SPRINT $array("null") discard
	// analyze file
	ACTION_MATCH "%arguments%" WITH
	"null" BEGIN END
	".*\.\(cre\|eff\|itm\|spl\|sto\|pro\|vvc\)" BEGIN
		LAF iter_struct STR_VAR arguments RET_ARRAY working_array=array END
	END
	".*\.\(wav\|bmp\|wed\|bam\)" BEGIN
	END
	".*\.are" BEGIN
		LAF iter_struct STR_VAR arguments RET_ARRAY working_array=array END
		OUTER_PATCH_SAVE resref "%arguments%" BEGIN
			REPLACE_TEXTUALLY "\..*" ""
		END
		ACTION_TO_LOWER resref
		OUTER_SPRINT $working_array("%resref%sr.bmp") ""
		OUTER_SPRINT $working_array("%resref%lm.bmp") ""
		OUTER_SPRINT $working_array("%resref%ln.bmp") ""
		OUTER_SPRINT $working_array("%resref%ht.bmp") ""
		OUTER_SPRINT $working_array("%resref%.ini") ""
	END
	".*\.bcs" BEGIN
		COPY_EXISTING - "%arguments%" nowhere
			DECOMPILE_BCS_TO_BAF
			LPF iter_script RET_ARRAY working_array=array END
	END
	".*\.dlg" BEGIN
		LAF iter_struct STR_VAR arguments RET_ARRAY array1=array END
		COPY_EXISTING - "%arguments%" nowhere
			DECOMPILE_DLG_TO_D
			LPF iter_script RET_ARRAY array2=array END
		LAF array_join STR_VAR array1 array2 RET_ARRAY working_array=array END	
	END
	".*\.2da" BEGIN
		ACTION_MATCH "%arguments%" WITH
			"clssplab.2da" BEGIN // nothing to iterate through here
			END
			"7eyes.2da" BEGIN // we don't iterate further through 7 eyes but we do log resources uses (which we assume to be in the SPPR/SPWI/SPCL/SPIN format"
				ACTION_IF "%SFO_reserved_function%" STR_CMP "" BEGIN
					COPY_EXISTING - "%arguments%" nowhere
						REPLACE_EVALUATE "SP\(PR\|WI\|IN\|CL\)\([0-9]+\)" BEGIN
							LPF "%SFO_reserved_function%" STR_VAR source=7eyes source_ext=2da resref="SP%MATCH1%%MATCH2%" ext=spl END
						END
						""
				END
			END
			DEFAULT
				COPY_EXISTING - "%arguments%" nowhere
					LPF iter_2da RET_ARRAY working_array=array END
			END
	END
	".*\.ini" BEGIN
		COPY_EXISTING - "%arguments%" nowhere
			LPF iter_ini RET_ARRAY working_array=array END
	END
	".*\.vef" BEGIN
		COPY_EXISTING - "%arguments%" nowhere
			LPF iter_vef RET_ARRAY working_array=array END
	END
	DEFAULT
		WARN "unrecognised extension for file %arguments%"
	END
	// lowercase and handle ignore-func and missing files
	ACTION_PHP_EACH working_array AS file=>discard BEGIN
		ACTION_TO_LOWER file
		ACTION_MATCH "%file%" WITH
		".*\.bam" ".*\.vvc" BEGIN
			OUTER_PATCH_SAVE resref "%file%" BEGIN
				REPLACE_TEXTUALLY "\..*" ""
			END
			ACTION_FOR_EACH type IN bam vvc BEGIN
				OUTER_SPRINT file "%resref%.%type%"
				LAF iter_main_helper STR_VAR file parameter RET value END
				ACTION_IF value BEGIN
					OUTER_SPRINT $array("%file%") ""
				END
			END
		END
		DEFAULT
			LAF iter_main_helper STR_VAR file parameter RET value END
			ACTION_IF value BEGIN
				OUTER_SPRINT $array("%file%") ""
			END
		END
		
	END
	

END

//document{iter_main_helper}{Check a file to see if it should be added to the list of resources generated by iter_main, or if it doesn't exist or is excluded by the ignore-func.}

DEFINE_ACTION_FUNCTION iter_main_helper//internal
	STR_VAR file="" parameter=""
	RET value
BEGIN
	OUTER_SET value=0
	ACTION_IF FILE_EXISTS_IN_GAME "%file%" BEGIN
		ACTION_IF "%parameter%" STR_EQ "" BEGIN
			OUTER_SET value=1
		END ELSE BEGIN
			LAF "%parameter%" STR_VAR arguments="%file%" RET value END
			OUTER_SET value=!value
		END
		ACTION_IF value BEGIN
			OUTER_SPRINT $array("%file%") ""
		END
	END
END
	


/*
document{iter_ini}
{
Assuming the current file is an IWD-style area ini, return an array of the game resources it uses
}
*/

DEFINE_PATCH_FUNCTION iter_ini//internal
	RET_ARRAY array
BEGIN
	CLEAR_ARRAY array
	LPF ini_read STR_VAR case=lower RET_ARRAY ini_array=array section_array END
	PHP_EACH section_array AS section=>discard BEGIN
		PATCH_IF VARIABLE_IS_SET $ini_array("%section%" "cre_file") BEGIN
			SPRINT resref $ini_array("%section%" "cre_file")
			SPRINT $array("%resref%.cre") ""
			PATCH_FOR_EACH slot IN override specifics race class default BEGIN
				PATCH_IF VARIABLE_IS_SET $ini_array("%section%" "script_%slot%") BEGIN
					SPRINT resref $ini_array("%section%" "script_%slot%")
					SPRINT $array("%resref%.bcs") ""
				END
			END
		END
	END

END


/*
document{iter_script}
{
Return an array of all in-game resources referenced in the currently-being-patched, assumed-decompiled, script.
}

*/

DEFINE_PATCH_FUNCTION iter_script//internal
    RET_ARRAY array
BEGIN
    REPLACE_EVALUATE CASE_INSENSITIVE ~\(CreateItem\|GiveItemCreate\)("\([^"]+\)"~ BEGIN
       SPRINT $array("%MATCH2%.itm") ""
    END
	""
    REPLACE_EVALUATE CASE_INSENSITIVE  ~\(CreateCreature\|CreateCreatureObject\|CreateCreatureObjectDoor\|CreateCreatureObjectOffScreen\|CreateCreatureObjectCopy\|CreateCreatureObjectOffset\|CreateCreatureCopyPoint\|CreateCreatureObjectEffect\|CreateCreatureObjectCopyEffect\)("\([^"]+\)"~ BEGIN
       SPRINT $array("%MATCH2%.cre") ""
    END
	""
    REPLACE_EVALUATE CASE_INSENSITIVE  ~CreateCreatureAtLocation(\([^,]+\),\([^,]+\),"\([^"]+\)")~ BEGIN
       SPRINT $array("%MATCH3%.cre") ""
    END
	""
    REPLACE_EVALUATE CASE_INSENSITIVE  ~AddSpecialAbility("\([^"]+\)")~ BEGIN
       SPRINT $array("%MATCH1%.spl") ""
    END
	""
    REPLACE_EVALUATE CASE_INSENSITIVE  ~\([a-z0-9]+RES\)("\([^"]+\)"~ BEGIN
       SPRINT $array("%MATCH2%.spl") ""
    END
	""
    REPLACE_EVALUATE CASE_INSENSITIVE  ~\(ChangeCurrentScript\|SetAIScript\|StartCutScene\)("\([^"]+\)"~ BEGIN
      SPRINT $array("%MATCH2%.bcs") ""
    END
	""
    REPLACE_EVALUATE CASE_INSENSITIVE  ~\(StartDialog\|SetDialog\)("\([^"]+\)"~ BEGIN
		SPRINT $array("%MATCH2%.dlg") ""
    END
	""
    REPLACE_EVALUATE CASE_INSENSITIVE  ~StartStore("\([^"]+\)"~ BEGIN
		SPRINT $array("%MATCH1%.sto") ""
    END
	""
    REPLACE_EVALUATE CASE_INSENSITIVE  ~\(LeaveAreaLUA\|LeaveAreaLUAPanic\|MoveBetweenAreas\|RevealAreaOnMap\|MoveBetweenAreasEffect\|EscapeAreaObjectMove\|LeaveAreaLUAEntry\|LeaveAreaLUAPanicEntry\)("\([^"]+\)"~ BEGIN
      SPRINT $array("%MATCH2%.are") ""
    END
	""
END


/*
document{iter_struct}
{
Take as input the filename of a struct file. Return a k=>_ array of the filenames of all game resources referenced by it.
(We don't check if the resources exist.)
}

*/

DEFINE_ACTION_FUNCTION iter_struct//internal
	STR_VAR arguments=""
	RET_ARRAY array
BEGIN
	// main struct loop
	OUTER_SPRINT $array("null") discard
	ACTION_IF FILE_EXISTS_IN_GAME "%arguments%" BEGIN
		COPY_EXISTING - "%arguments%" nowhere
			// load the struct
			LPF struct_read RET_ARRAY m=struct END
			//main header
			LPF iter_struct_helper STR_VAR struct=m strtype="%m_strtype%" RET_ARRAY array END
			//extended headers
			PHP_EACH "SFO_%m_strtype%_extended_types" AS type=>discard BEGIN
				PATCH_IF "SFO_%m_strtype%_%type%_has_resrefs" BEGIN
					LPF struct_iter STR_VAR struct=m strtype="%m_strtype%" type RET length RET_ARRAY iter_array END
					PATCH_IF length>0 BEGIN
						PHP_EACH iter_array AS index=>lookup BEGIN
							// get the data
							SPRINT data $m("%type%" "%lookup%") 
							INNER_PATCH "%data%" BEGIN
								LPF struct_read STR_VAR strtype="%m_strtype%_%type%" RET_ARRAY s=struct END
								LPF iter_struct_helper STR_VAR struct=s strtype="%m_strtype%_%type%" RET_ARRAY array_here=array END
								PHP_EACH array_here AS k=>v BEGIN
									SPRINT $array("%k%") "%v%"
								END
							END
						END	
					END					
				END			
			END
		BUT_ONLY
		//opcodes, stores, and projectiles
		ACTION_MATCH "%arguments%" WITH
		".*\.\(itm\|spl\)" BEGIN
			COPY_EXISTING - "%arguments%" nowhere
				//store check
				PATCH_MATCH "%arguments%" WITH 
				".*\.itm" BEGIN
					READ_SHORT 0x1c cat
				    PATCH_IF (cat=36 || cat=58) BEGIN  // risk the odd false positive
						SPRINT filename "%SOURCE_RES%.sto"
						TO_LOWER filename
						SPRINT $array("%filename%") ""
					END
				END
				DEFAULT
				END
				//main run
				LPF struct_get_offset_array STR_VAR type=fx RET_ARRAY offset_array=array END
				PHP_EACH offset_array AS ind=>offset BEGIN
					opcode_offset=offset
					parameter2_offset=offset+0x8
					resref_offset=offset+0x14
					LPF iter_opcode INT_VAR opcode_offset parameter2_offset resref_offset RET_ARRAY filename_array END
					PHP_EACH filename_array AS k=>v BEGIN
						SPRINT $array("%k%") ""
					END				
				END
				LPF struct_get_offset_array STR_VAR type=ab RET_ARRAY offset_array=array END
				PHP_EACH offset_array AS ab_ind=>ab_offset BEGIN
					PATCH_MATCH "%arguments%" WITH 
					".*\.spl" BEGIN
						proj_offset=0x26+ab_offset
					END
					DEFAULT
						proj_offset=0x2a+ab_offset
					END
					READ_SHORT proj_offset pro
					PATCH_IF pro>0 BEGIN
						pro -=1
						LOOKUP_IDS_SYMBOL_OF_INT pro_resref projectl pro
						PATCH_IF !IS_AN_INT pro_resref BEGIN
							SPRINT filename "%pro_resref%.pro"
							TO_LOWER filename 
							SPRINT $array("%filename%") ""
						END
					END
					LPF struct_get_offset_array2 INT_VAR offset=ab_offset STR_VAR type=ab_fx RET_ARRAY offset_array2=array END
					PHP_EACH offset_array2 AS ind=>offset BEGIN
						opcode_offset=offset
					parameter2_offset=offset+0x8
						resref_offset=offset+0x14
						LPF iter_opcode INT_VAR opcode_offset parameter2_offset resref_offset RET_ARRAY filename_array END
						PHP_EACH filename_array AS k=>v BEGIN
							SPRINT $array("%k%") ""
						END				
					END
				END
			BUT_ONLY
		END
		".*\.cre" BEGIN
			COPY_EXISTING - "%arguments%" nowhere
				LPF FJ_CRE_VALIDITY END
				LPF struct_get_offset_array STR_VAR type=fx RET_ARRAY offset_array=array END
				PHP_EACH offset_array AS ind=>offset BEGIN
					opcode_offset=offset+0x8
					parameter2_offset=offset+0x18
					resref_offset=offset+0x28
					LPF iter_opcode INT_VAR opcode_offset parameter2_offset resref_offset RET_ARRAY filename_array END
					PHP_EACH filename_array AS k=>v BEGIN
						SPRINT $array("%k%") ""
					END				
				END
		END
		".*\.eff" BEGIN
			COPY_EXISTING - "%arguments%" nowhere
				opcode_offset=0x10
				parameter2_offset=0x20
				resref_offset=0x30
				LPF iter_opcode INT_VAR opcode_offset parameter2_offset resref_offset RET_ARRAY filename_array END
					PHP_EACH filename_array AS k=>v BEGIN
						SPRINT $array("%k%") ""
					END				
				
		END
		".*\.pro" BEGIN
			COPY_EXISTING - "%arguments%" nowhere
				PATCH_IF BUFFER_LENGTH>0x200 BEGIN
					READ_SHORT 0x214 pro_num
					LOOKUP_IDS_SYMBOL_OF_INT pro_resref projectl pro_num
					PATCH_IF !IS_AN_INT pro_resref BEGIN
						SPRINT filename "%pro_resref%.pro"
						TO_LOWER filename
						SPRINT $array("%filename%") ""
					END
					READ_SHORT 0x21a pro_num
					pro_num -=1
					LOOKUP_IDS_SYMBOL_OF_INT pro_resref projectl pro_num
					PATCH_IF !IS_AN_INT pro_resref BEGIN
						SPRINT filename2 "%pro_resref%.pro"
						TO_LOWER filename2
						SPRINT $array("%filename2%") ""
					END
				END
		END
		DEFAULT
		END
	END
END

/*
document{iter_opcode}
{
Read the opcode at opcode_offset and the parameter at parameter2_offset and, if appropriate, return the filename of the resource at resref_offset. Also log any icon uses
Does not iterate through wish, familiars, or the core group of monsters summoned by opcode 127.
}
*/
DEFINE_PATCH_FUNCTION iter_opcode//internal
	INT_VAR opcode_offset=0
			parameter2_offset=0
			resref_offset=0
	STR_VAR strtype=""
	RET_ARRAY filename_array
BEGIN
	CLEAR_ARRAY filename_array
	SPRINT $filename_array("null") discard
	READ_SHORT opcode_offset opcode
	match=0
	PATCH_IF is_bg2 || is_bg1 || enhanced_edition BEGIN
		PATCH_MATCH "%opcode%" WITH
		15 44 BEGIN
			READ_LONG parameter2_offset param2
			PATCH_IF param2=3 BEGIN
				SPRINT $filename_array("clssplab.2da") ""
			END
		END
		67 135 151
		BEGIN
			match=1
			SPRINT ext cre
		END
		68 215
		BEGIN
			match=1
			SPRINT ext bam
		END
		82
		BEGIN
			match=1
			SPRINT ext bcs
		END
		107 
		BEGIN
			match=1
			SPRINT ext bmp
		END
		111 122 143 255
		BEGIN
			match=1
			SPRINT ext itm
		END
		146 147 148 171 232 251 252 258 326 340 341 361
		BEGIN
			match=1
			SPRINT ext spl
			PATCH_IF "%SFO_reserved_function%" STR_CMP "" BEGIN
				READ_ASCII resref_offset resref
				LPF "%SFO_reserved_function%" STR_VAR source="%SOURCE_RES%" source_ext="%SOURCE_EXT%" resref ext=spl END
			END

		END
		335 BEGIN
			match=1
			SPRINT ext spl
			SPRINT $filename_array("7eyes.2da") ""
		END
		336 BEGIN
			READ_ASCII resref_offset resref_base
			INNER_ACTION BEGIN
				COPY_EXISTING_REGEXP - "%resref_base%.*\.vvc" nowhere
					SPRINT filename "%SOURCE_FILE%"
					TO_LOWER filename
					SPRINT $filename_array("%filename%") ""
			END
		END
		174 BEGIN
			match=1
			SPRINT ext wav
		END
		177 183 248 249 272 283 
		BEGIN
			match=1
			SPRINT ext eff
		END
		186 BEGIN
			match=1
			SPRINT ext are
		END
		127 BEGIN
			READ_ASCII resref_offset resref
			PATCH_IF "%resref%" STR_CMP "" BEGIN
				match=1
				SPRINT ext 2da
			END ELSE BEGIN
				READ_LONG parameter2_offset param2
				DEFINE_ASSOCIATIVE_ARRAY 127_2da_arr BEGIN
					0=>monsum01
					1=>monsum02
					2=>monsum03
					3=>anisum01
					4=>anisum02
					5=>monsum01
					6=>monsum02
					7=>monsum03
					8=>anisum01
					9=>anisum02
				END
				PATCH_IF VARIABLE_IS_SET $127_2da_arr("%param2%") BEGIN
					SPRINT temp $127_2da_arr("%param2%")
					SPRINT $filename_array("%temp%.2da") ""
				END
				
			END	
		END
		214 BEGIN
			match=1
			SPRINT ext 2da
		END
		78 BEGIN
			READ_LONG parameter2_offset param2
			PATCH_IF param2=11||param2=12 BEGIN
				READ_ASCII resref_offset resref
				PATCH_IF "%resref%" STRING_COMPARE "" BEGIN
					match=1
					SPRINT ext spl
				END ELSE BEGIN
					SPRINT s_r "%SOURCE_RES%"
					TO_LOWER s_r
					SPRINT $filename_array("%s_r%b.spl") ""
				END
			END
		END
		331 BEGIN
			READ_LONG parameter2_offset param2
		    INNER_ACTION BEGIN
               COPY_EXISTING smtables.2da override
                    READ_2DA_ENTRY (param2 + 1) 1 2 monsum_table
               BUT_ONLY
            END
            SPRINT filename "%monsum_table%.2da"
			TO_LOWER filename
			SPRINT $filename_array("%filename%") ""
            LPF log_this INT_VAR repeat=0 STR_VAR file=smtable_entries.2da input="%param2% %monsum_table%" END
		END
		333 BEGIN
			READ_ASCII resref_offset resref
			PATCH_IF "%resref%" STRING_COMPARE "" BEGIN
				match=1
				SPRINT ext spl
			END ELSE BEGIN
				SPRINT filename "%SOURCE_RES%B.spl"
				TO_LOWER filename
				SPRINT $filename_array("%filename%") ""
			END		
		END
		206 BEGIN
			PATCH_IF "%SFO_reserved_function%" STR_CMP "" BEGIN
				READ_ASCII resref_offset resref
				LPF "%SFO_reserved_function%" STR_VAR source="%SOURCE_RES%" source_ext="%SOURCE_EXT%" resref ext=spl END
			END
		END
		318 321 324 BEGIN
			PATCH_IF "%SFO_reserved_function%" STR_CMP "" BEGIN
				READ_ASCII resref_offset resref
				PATCH_IF FILE_EXISTS_IN_GAME "%resref%.itm" BEGIN
					SPRINT ext itm
				END ELSE BEGIN
					SPRINT ext spl
				END
				LPF "%SFO_reserved_function%" STR_VAR source="%SOURCE_RES%" source_ext="%SOURCE_EXT%" resref ext END
			END
		
		END
		142 169 240 BEGIN
			PATCH_IF "%SFO_reserved_icon_function%" STR_CMP "" BEGIN
				READ_LONG parameter2_offset icon
				LPF "%SFO_reserved_icon_function%" INT_VAR opcode icon STR_VAR source="%SOURCE_RES%" source_ext="%SOURCE_EXT%" END
			END
		END
		DEFAULT
		END
		PATCH_IF match BEGIN
			READ_ASCII resref_offset resref
			PATCH_IF "%resref%" STR_CMP "" BEGIN
				SPRINT filename "%resref%.%ext%"
				TO_LOWER filename
				SPRINT $filename_array("%filename%") ""
			END

		END
	END ELSE BEGIN
		PATCH_FAIL "iter_opcode currently doesn't handle this game type. Edit it in lib_iter to add support"
	END

END


/*
document{iter_struct_helper}
{
Internal part of the iter_struct function
}

*/

DEFINE_PATCH_FUNCTION iter_struct_helper//internal
	STR_VAR struct=""
			strtype=""
	RET_ARRAY array
BEGIN
	SPRINT $array("null") discard
	PHP_EACH "SFO_%strtype%_resrefs" AS label=>ext BEGIN
			SPRINT resref $"%struct%"("%label%")
			SPRINT filename "%resref%.%ext%"
			TO_LOWER filename
			SPRINT $array("%filename%") ""
	END
END



/*
document{iter_2da}
{
Return an array of the game resources contained in the current 2da file, assumed to be of type old-monster-summoning (prototype MONSUM01), new-monster-summoning (prototype MSUMMO1), or spell-selection (prototype SPCL621)

}
*/

DEFINE_PATCH_FUNCTION iter_2da
	RET_ARRAY array
BEGIN
	PATCH_IF INDEX_BUFFER ("AreaHitAnimation")>=0 BEGIN // new monster summoning
		LPF 2da_read RET_ARRAY working_array=array rows columns END
		PHP_EACH rows AS row=>discard BEGIN
			PHP_EACH columns AS col=>discard2 BEGIN
				SPRINT resref $working_array("%row%" "%col%")
				PATCH_MATCH "%col%" WITH 
				resref BEGIN
					SPRINT filename "%resref%.cre"
				END
				DEFAULT
					SPRINT filename "%resref%.bam"
				END			
				TO_LOWER filename
				SPRINT $array("%filename%") ""
			END
		END
	END ELSE
	PATCH_IF INDEX_BUFFER ("Type")>=0 BEGIN // spell selector
		LPF 2da_read RET_ARRAY working_array=array rows END
		PHP_EACH rows AS row=>discard BEGIN
			SPRINT resref $working_array("%row%" "RESREF")
			SPRINT filename "%resref%.spl"
			TO_LOWER filename
			SPRINT $array("%filename%") ""
		END
	END ELSE BEGIN // old-style monster summoning
		LPF 2da_read RET_ARRAY working_array=array rows columns END
		PHP_EACH rows AS row=>discard BEGIN
			SPRINT resref $working_array("%row%" "RESREF")
			SPRINT filename "%resref%.cre"
			TO_LOWER filename
			SPRINT $array("%filename%") ""
		END
	END
END

/*

document{iter_vef}
{Return an array of the game resources contained in the current VEF file.}

*/

DEFINE_PATCH_FUNCTION iter_vef
	RET_ARRAY array 
BEGIN
	SPRINT $array("null") discard
	PATCH_FOR_EACH type IN visual_primary visual_secondary BEGIN
		LPF struct_get_offset_array STR_VAR type RET_ARRAY offset_array=array END
		PHP_EACH offset_array AS ind=>offset BEGIN
			READ_LONG 0xc+offset resref_type
			PATCH_IF resref_type=0 BEGIN
				SPRINT ext wav
			END ELSE BEGIN
				SPRINT ext bam
			END
			READ_ASCII 0x10+offset resref
			TO_LOWER resref
			SPRINT $array("%resref%.%ext%") ""
		END
	END
END