/*
describe-library{Functions in lib_2daq act on in-game 2da files in-place, rather than the read/write paradigm used in lib_2da. They're optimized for speed insofar as I can manage it (the 'q' stands for 'quick').}

*/





/*
document{2daq_inject}
{
Given a 2D struct 'array' and a 2da file resref, (or, in patch context, the current 2da file) insert the elements of the struct into the 2da. (i.e. if the struct contains "array_x_y" and x and y are row and column entries in the 2da, insert the value of array_x_y at (x,y).

If reflect=1, swap rows and columns. If rowname_column is nonzero, look up the row names in that column.
}

*/

DEFINE_PATCH_FUNCTION 2daq_inject
	INT_VAR reflect=0//boolean
			rowname_column=0
			data_read=0//boolean
	STR_VAR array=""//array
BEGIN
	made_edits=0
	COUNT_2DA_COLS colcount
	PATCH_MATCH "%colcount%" WITH
	2 BEGIN
		col_row=2
		main_row=1
	END
	3 BEGIN
		col_row=1
		main_row=0
	END
	DEFAULT
		col_row=0
		main_row=0
	END
	PATCH_IF !data_read BEGIN
		READ_2DA_ENTRIES_NOW "sfo_2daq_data" colcount 
		READ_2DA_ENTRIES_NOW "sfo_2daq_data_cols" ( colcount - 1)
	END
	// go through the columns
	FOR (col=1;col<colcount;++col) BEGIN
		READ_2DA_ENTRY_FORMER "sfo_2daq_data_cols" col_row (col - 1) col_header
		// then the rows
		FOR (row=main_row;row<sfo_2daq_data;++row) BEGIN
			READ_2DA_ENTRY_FORMER sfo_2daq_data row rowname_column row_header
			data_here=0
			PATCH_IF reflect BEGIN
				PATCH_IF VARIABLE_IS_SET $"%array%"("%col_header%" "%row_header%") BEGIN
					SPRINT data $"%array%"("%col_header%" "%row_header%")
					data_here=1
				END 
			END ELSE BEGIN
				PATCH_IF VARIABLE_IS_SET $"%array%"("%row_header%" "%col_header%") && !(col=rowname_column) BEGIN
					SPRINT data $"%array%"("%row_header%" "%col_header%")
					data_here=1	
				END
			END
			PATCH_IF data_here BEGIN
				READ_2DA_ENTRY_FORMER sfo_2daq_data row col data_old
				PATCH_IF IS_AN_INT data && IS_AN_INT data_old BEGIN
					proceed=!(data=data_old)
				END ELSE BEGIN
					proceed=("%data%" STR_CMP "%data_old%")
				END
				PATCH_IF proceed BEGIN
					SET_2DA_ENTRY_LATER sfo_2daq_data_out row col " %data%" // the space is to prevent WEIDU gratuitously changing from hex to decimal
					made_edits=1
				END	
			END
		END
	END
	// flush values
	PATCH_IF made_edits BEGIN
		SET_2DA_ENTRIES_NOW sfo_2daq_data_out colcount
		PRETTY_PRINT_2DA
		REPLACE_TEXTUALLY "2DA[ %TAB%]+V1.0" "2DA V1.0"
	END
END

DEFINE_ACTION_FUNCTION 2daq_inject
	INT_VAR reflect=0//boolean
			rowname_column=0
			data_read=0//boolean
	STR_VAR array=""//array
			resref=""
BEGIN
	COPY_EXISTING "%resref%.2da" override
		LPF 2daq_inject INT_VAR data_read reflect rowname_column STR_VAR array END
	BUT_ONLY
END

/*
document{2daq_has_column}
{
Return 1 iff the current 2da file has 'column' as a column id. 
}

*/

DEFINE_PATCH_FUNCTION 2daq_has_column
	INT_VAR data_read=0//boolean
	STR_VAR column=""
	RET value
BEGIN
	value=0
	PATCH_IF INDEX_BUFFER (CASE_INSENSITIVE "%column%")>=0 BEGIN
		COUNT_2DA_COLS colcount
		PATCH_MATCH "%colcount%" WITH
		2 BEGIN
			col_row=2
			main_row=1
		END
		3 BEGIN
			col_row=1
			main_row=0
		END
		DEFAULT
			col_row=0
			main_row=0
		END
		PATCH_IF !data_read BEGIN
			READ_2DA_ENTRIES_NOW sfo_2daq_data_cols (colcount - 1)
		END
		FOR (col_number=1;col_number<colcount;++col_number) BEGIN
			READ_2DA_ENTRY_FORMER "sfo_2daq_data_cols" col_row (col_number - 1) col_header
			PATCH_IF "%col_header%" STR_EQ "%column%" BEGIN
				value=1
				col_number=colcount
			END
		END
	END
END


/*
document{2daq_has_row}
{
Return 1 iff the current 2da file has 'row' as a row id. (Check rowname_column).
}

*/

DEFINE_PATCH_FUNCTION 2daq_has_row
	INT_VAR rowname_column=0
			data_read=0//boolean
	STR_VAR row=""
	RET value
BEGIN
	value=0
	PATCH_IF INDEX_BUFFER (CASE_INSENSITIVE "%row%")>=0 BEGIN
		COUNT_2DA_COLS colcount
		PATCH_MATCH "%colcount%" WITH
		2 BEGIN
			col_row=2
			main_row=1
		END
		3 BEGIN
			col_row=1
			main_row=0
		END
		DEFAULT
			col_row=0
			main_row=0
		END
		PATCH_IF !data_read BEGIN
			READ_2DA_ENTRIES_NOW sfo_2daq_data colcount
		END
		FOR (row_number=main_row;row_number<sfo_2daq_data;++row_number) BEGIN
			READ_2DA_ENTRY_FORMER sfo_2daq_data row_number rowname_column entry
			PATCH_IF "%entry%" STR_EQ "%row%" BEGIN
				value=1
				row_number=sfo_2daq_data
			END
		END
	END
END


/*
document{2daq_extract}
{
Given a column header and/or a row header, and a 2da file resref, (or, in patch context, the current 2da file), extract the column or row as k=>v array using the row or column headers, as appropriate, as keys.

If both row and column are set, instead return the element (if any) at (row,column) as 'value', as well as its row as 'rownum'.
}

*/

DEFINE_PATCH_FUNCTION 2daq_extract
	INT_VAR rowname_column=0
			data_read=0
	STR_VAR row=""
			column=""
			case=mixed//[mixed|upper|lower]
	RET value
		rownum
	RET_ARRAY array
BEGIN
	CLEAR_ARRAY array
	PATCH_IF "%row%%column%" STR_EQ "" BEGIN
		PATCH_FAIL "2daq_extract failure: no row or column selected"
	END
	rownum="-1"
	SPRINT value ""
	COUNT_2DA_COLS colcount
	PATCH_MATCH "%colcount%" WITH
	2 BEGIN
		col_row=2
		main_row=1
	END
	3 BEGIN
		col_row=1
		main_row=0
	END
	DEFAULT
		col_row=0
		main_row=0
	END
	PATCH_IF !data_read BEGIN
		READ_2DA_ENTRIES_NOW "sfo_2daq_data" colcount 
		READ_2DA_ENTRIES_NOW "sfo_2daq_data_cols" ( colcount - 1)
	END
	// check if it's empty
	COUNT_2DA_ROWS 1 empty_check
	is_empty=(empty_check=3)
	is_blank=(empty_check=2)
	PATCH_IF is_empty BEGIN
		SPRINT $array("null") discard
	END ELSE BEGIN
		PATCH_IF "%column%" STR_CMP "" BEGIN
			FOR (col_number=1;col_number<colcount;++col_number) BEGIN
				READ_2DA_ENTRY_FORMER "sfo_2daq_data_cols" col_row (col_number - 1) col_header
				PATCH_IF "%col_header%" STR_EQ "%column%" BEGIN
				// then the rows
					FOR (row_number=main_row;row_number<sfo_2daq_data;++row_number) BEGIN
						READ_2DA_ENTRY_FORMER sfo_2daq_data row_number rowname_column row_header
						PATCH_IF "%row_header%" STR_EQ "%row%" || "%row%" STR_EQ ""BEGIN
							READ_2DA_ENTRY_FORMER sfo_2daq_data row_number col_number value
							PATCH_MATCH "%case%" WITH
							upper BEGIN
								TO_UPPER value
								TO_UPPER row_header
							END
							lower BEGIN
								TO_LOWER value
								TO_LOWER row_header
							END
							DEFAULT
							END
							SPRINT $array("%row_header%") "%value%"
							PATCH_IF "%row_header%" STR_EQ "%row%" BEGIN // if we're just getting 'row'/'col', terminate
								row_number=sfo_2daq_data
							END
						END 
					END
					col=colcount
				END		
			END	
		END ELSE BEGIN
			FOR (row_number=main_row;row_number<sfo_2daq_data;++row_number) BEGIN
				READ_2DA_ENTRY_FORMER sfo_2daq_data row_number rowname_column row_header
				PATCH_IF "%row_header%" STR_EQ "%row%" BEGIN
					FOR (col_number=1;col_number<colcount;++col_number) BEGIN
						READ_2DA_ENTRY_FORMER "sfo_2daq_data_cols" col_row (col_number - 1) col_header
						READ_2DA_ENTRY_FORMER sfo_2daq_data row_number col_number value
						PATCH_MATCH "%case%" WITH
						upper BEGIN
							TO_UPPER value
							TO_UPPER col_header
						END
						lower BEGIN
							TO_LOWER value
							TO_LOWER col_header
						END
						DEFAULT
						END

						SPRINT $array("%col_header%") "%value%"
						rownum=row_number
					END
					row_number=sfo_2daq_data
				END
			END
		END
	END
END

DEFINE_ACTION_FUNCTION 2daq_extract
	INT_VAR rowname_column=0
			data_read=0//boolean
	STR_VAR resref=""
			row=""
			column=""
			case=""
	RET value
	RET_ARRAY array
BEGIN
	COPY_EXISTING - "%resref%.2da" nowhere
		LPF 2daq_extract INT_VAR data_read rowname_column STR_VAR row column case RET value RET_ARRAY array END
	
END

/*
document{2daq_insert_column}
{
Adds a new column, with header 'column', as the last column, or the second-to-last column if insert_loc is 'before_last'. All entries are filled with the 2da default value. }
*/


DEFINE_PATCH_FUNCTION 2daq_insert_column
	STR_VAR column=""
			insert_loc="last"//[last|before_last]
BEGIN
	READ_2DA_ENTRY 1 0 1 default
	PATCH_MATCH "%insert_loc%" WITH
	last BEGIN
		count=0
		REPLACE_EVALUATE "^\([^%WNL%%LNL%%MNL%]+\)" BEGIN
			PATCH_IF count<2 BEGIN
				SPRINT out "%MATCH1%"
			END ELSE
			PATCH_IF count=2 BEGIN
				SPRINT out "%MATCH1%%TAB%%column%"
			END ELSE BEGIN
				SPRINT out "%MATCH1%%TAB%%default%"
			END
			++count
		END
		"%out%"	
	END
	before_last BEGIN
		count=0
		REPLACE_EVALUATE "^\(.+\)[ %TAB%]+\([^ %TAB%%WNL%%MNL%%LNL%]+\)" BEGIN
			PATCH_IF count<1 BEGIN
				SPRINT out "%MATCH1%%TAB%%MATCH2%"
			END ELSE
			PATCH_IF count=1 BEGIN
				SPRINT out "%MATCH1%%TAB%%column%%TAB%%MATCH2%"
			END ELSE BEGIN
				SPRINT out "%MATCH1%%TAB%%default%%TAB%%MATCH2%"
			END
			++count
		END
		"%out%"		
	END
	DEFAULT
		PATCH_FAIL "Unrecognised insert_loc %insert_loc% in 2daq_insert_column"
	END
	PRETTY_PRINT_2DA
	

END

/*
document{2daq_insert_row}
{
Adds a new row, with header 'row', as the last row. All entries are filled with the 2da default value. If rowname_column>0, we put the header in this column, and assume column 0 should be numbered sequentially from 0.
}
*/

DEFINE_PATCH_FUNCTION 2daq_insert_row
	INT_VAR rowname_column=0
	STR_VAR row=""
BEGIN	
	COUNT_2DA_COLS colcount
	READ_2DA_ENTRY 1 0 1 default
	SPRINT data ""
	FOR (n=0;n<colcount;++n) BEGIN
		PATCH_IF n=rowname_column BEGIN
			SPRINT data "%data%%row%%TAB%"
		END ELSE 
		PATCH_IF n=0 BEGIN
			COUNT_2DA_ROWS colcount rowcount
			SPRINT data "%data%%rowcount%%TAB%"
		END ELSE BEGIN
			SPRINT data "%data%%default%%TAB%"
		END
	END
	insert_point=BUFFER_LENGTH
	INSERT_BYTES insert_point STRING_LENGTH "%WNL%%data%"
	WRITE_ASCII insert_point "%WNL%%data%"
	PRETTY_PRINT_2DA
END



/*
document{2daq_copy_column}
{
Copies a column in the current 2da file to the right-hand side of the table, with new column name 'column_new'. Returns 1 if copy is successful. Stoically silent if it isn't.

}


*/



DEFINE_PATCH_FUNCTION 2daq_copy_column
	INT_VAR data_read=0//boolean
	STR_VAR column=""
			column_new="%column%"
	RET value
BEGIN
	value=0
	COUNT_2DA_COLS colcount
	PATCH_MATCH "%colcount%" WITH
	2 BEGIN
		col_row=2
		main_row=1
	END
	3 BEGIN
		col_row=1
		main_row=0
	END
	DEFAULT
		col_row=0
		main_row=0
	END
	PATCH_IF !data_read BEGIN
		READ_2DA_ENTRIES_NOW "sfo_2daq_data" colcount 
		READ_2DA_ENTRIES_NOW "sfo_2daq_data_cols" ( colcount - 1)
	END
	FOR (col_number=1;col_number<colcount;++col_number) BEGIN
		READ_2DA_ENTRY_FORMER sfo_2daq_data_cols col_row (col_number - 1) col_header
		PATCH_IF "%col_header%" STR_EQ "%column%" BEGIN
			value=1
			FOR (row_number=main_row;row_number<sfo_2daq_data;++row_number) BEGIN
				READ_2DA_ENTRY_FORMER sfo_2daq_data row_number col_number entry
				READ_2DA_ENTRY_FORMER sfo_2daq_data row_number (colcount - 1) end_entry
				SET_2DA_ENTRY_LATER sfo_2daq_data_out row_number (colcount - 1) "%end_entry%SFO_DIVIDER%entry%"
			END
			READ_2DA_ENTRY_FORMER sfo_2daq_data_cols col_row (colcount - 2) end_col
			SET_2DA_ENTRY_LATER sfo_2daq_data_cols_out col_row (colcount - 2) "%end_col%SFO_DIVIDER%column_new%"
			SET_2DA_ENTRIES_NOW sfo_2daq_data_cols_out (colcount - 1)
			col_number=colcount
		END
	END
	PATCH_IF value BEGIN
		SET_2DA_ENTRIES_NOW sfo_2daq_data_out colcount
		REPLACE_TEXTUALLY "SFO_DIVIDER" "%TAB%"
		PRETTY_PRINT_2DA
	END
	

END

/*
document{2daq_copy_row}
{
Copies a row in the current 2da file to the bottom of the table, with new row name 'row_new'. Returns 1 if copy is successful. Stoically silent if it isn't.

If 'rowname_column' is set, the row id is looked up in that column, and column 0 is assumed to be numbered sequentially.
(This is the convention for kitlist.2da.)

}


*/


DEFINE_PATCH_FUNCTION 2daq_copy_row
	INT_VAR rowname_column=0
			data_read=0//boolean
	STR_VAR row=""
			row_new="%row%"
	RET value
BEGIN
	value=0
	PATCH_IF rowname_column=0 BEGIN
		REPLACE_EVALUATE CASE_INSENSITIVE "^\(%row%[ %TAB%].*\)" BEGIN
			INNER_PATCH_SAVE new_row "%MATCH1%" BEGIN
				REPLACE_TEXTUALLY CASE_INSENSITIVE "^%row%" "%row_new%"
			END
			value=1
		END
		"%MATCH1%"
		PATCH_IF value BEGIN
			insert_point=BUFFER_LENGTH
			INSERT_BYTES insert_point STRING_LENGTH "%new_row%"
			WRITE_ASCII insert_point "%new_row%"
			PRETTY_PRINT_2DA
		END
	END ELSE BEGIN
		COUNT_2DA_COLS colcount
		PATCH_MATCH "%colcount%" WITH
		2 BEGIN
			col_row=2
			main_row=1
		END
		3 BEGIN
			col_row=1
			main_row=0
		END
		DEFAULT
			col_row=0
			main_row=0
		END
		PATCH_IF !data_read BEGIN
			READ_2DA_ENTRIES_NOW "sfo_2daq_data" colcount 
		END
		FOR (row_number=main_row;row_number<sfo_2daq_data;++row_number) BEGIN
			READ_2DA_ENTRY_FORMER sfo_2daq_data row_number rowname_column this_row
			PATCH_IF "%this_row%" STR_EQ "%row%" BEGIN
				SPRINT row_with_case "%this_row%"
				SET_2DA_ENTRY row_number rowname_column colcount "SFO_FOR_COPYING"
				value=1
				row_number=sfo_2daq_data
			END
		END
		PATCH_IF value BEGIN
			REPLACE_EVALUATE "^\([0-9]+\)\(.*SFO_FOR_COPYING.*\)" BEGIN
				SPRINT new_row "SFO_NEW_NUMBER%MATCH2%"
				INNER_PATCH_SAVE new_row "%new_row%" BEGIN
					REPLACE_TEXTUALLY SFO_FOR_COPYING SFO_NEW_ROWNAME
				END
			END
			"%MATCH1%%MATCH2%"
			insert_point=BUFFER_LENGTH
			INSERT_BYTES insert_point STRING_LENGTH "%new_row%"
			WRITE_ASCII insert_point "%new_row%"
			REPLACE_TEXTUALLY SFO_NEW_NUMBER "%sfo_2daq_data%"
			REPLACE_TEXTUALLY "SFO_FOR_COPYING" "%row_with_case%"
			REPLACE_TEXTUALLY "SFO_NEW_ROWNAME" "%row_new%"
			PRETTY_PRINT_2DA
		END
	END
END
