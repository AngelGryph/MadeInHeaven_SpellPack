/* 
describe-library{
A collection of functions to edit blocks of a BCS file. Common structure: we go through the in-game BCS 'script'.bcs block by block. We specify up to 5 regexps (match and match1-match5), and check each against the decompiled block. On a match, we then do something (what, depends on the function). If the Boolean 'only_once' is set, we stop after the first match. If 'recompile' is set to 0, we don't recompile the script afterwards (this is mostly for debugging).</p>

<p>Alternately or additionally, a patch function 'match_function' can be specified, which should return one Boolean, 'value'. match_function is run on each decompiled block, and that block is only matched if the function returns 1. You can use the anonymous-function construct.</p>

<p>This library formally depends on other libraries through the anonymous-function construct and through using SFO path/location/locbase syntax. However, if you eschew both, the library works as a self-contained library. (It should be kept that way.)
}
*/


/*
document{script_insert_block}
{
'insert' should be either a complete path to a BAF file, or the filename of a BAF file with location given in sfo fashion by 'location'/'locbase'/'path'. That file is inserted after (or, if insert_above=1, before) any matched block.
}
*/

DEFINE_ACTION_FUNCTION script_insert_block
INT_VAR insert_above=0//boolean
        only_once=0//boolean
        recompile=1//boolean
STR_VAR script=""
        match_function=""//function
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        insert=""
		location=""
		locbase=""
		path=""
BEGIN
	LAF INSERT_SCRIPT_BLOCK
		INT_VAR insert_above
				only_once
				recompile
		STR_VAR script
				match_function
				match
				match1
				match2
				match3
				match4
				match5
				insert
				location
				locbase
				path	
	END
END
DEFINE_ACTION_FUNCTION INSERT_SCRIPT_BLOCK//internal
INT_VAR insert_above=0//boolean
        only_once=0//boolean
        recompile=1//boolean
STR_VAR script=""
        match_function=""//function
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        insert=""
		location=""
		locbase=""
		path=""
BEGIN
	ACTION_IF "%location%%locbase%%path%" STR_CMP "" BEGIN
		LAF sfo_path STR_VAR file="%insert%" location locbase path RET insert=file_path END
	END
   // sanity check
   COPY - "%insert%" override EVALUATE_BUFFER
       READ_ASCII 0x0 internal_insert_data (BUFFER_LENGTH)
       PATCH_TRY COMPILE_BAF_TO_BCS WITH DEFAULT
          PATCH_PRINT ~"%insert%" is not a legal BAF file, INSERT_SCRIPT_BLOCK will fail~
          PATCH_RERAISE
       END
   BUT_ONLY
   OUTER_SPRINT internal_insert_data "%internal_insert_data%"^"%WNL%"
   LAF internal_script_block_master 
     INT_VAR only_once insert_above replace=0 recompile
     STR_VAR internal_insert_data script match_function
           match match1 match2 match3 match4 match5
           type=insert 
   END
END

/*
document{script_replace_block}
{
'insert' should be either a complete path to a BAF file, or the filename of a BAF file with location given in sfo fashion by 'location'/'locbase'/'path'. That file is substituted in to replace any matched block.
}
*/

DEFINE_ACTION_FUNCTION script_replace_block
INT_VAR only_once=0//boolean
        recompile=1//boolean
STR_VAR script=""
        match_function=""//function
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        insert=""
		location=""
		locbase=""
		path=""
BEGIN
	LAF REPLACE_SCRIPT_BLOCK
		INT_VAR only_once
				recompile
		STR_VAR script
				match_function
				match
				match1
				match2
				match3
				match4
				match5
				insert
				location
				locbase
				path
	END	

END

DEFINE_ACTION_FUNCTION REPLACE_SCRIPT_BLOCK//internal
INT_VAR only_once=0//boolean
        recompile=1//boolean
STR_VAR script=""
        match_function=""//function
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        insert=""
		location=""
		locbase=""
		path=""
BEGIN
	ACTION_IF "%location%%locbase%%path%" STR_CMP "" BEGIN
		LAF sfo_path STR_VAR file="%insert%" location locbase path RET insert=file_path END
	END
   // sanity check
   COPY - "%insert%" override EVALUATE_BUFFER
       READ_ASCII 0x0 internal_insert_data (BUFFER_LENGTH)
       PATCH_TRY COMPILE_BAF_TO_BCS WITH DEFAULT
          PATCH_PRINT ~"%insert%" is not a legal BAF file, INSERT_SCRIPT_BLOCK will fail~
          PATCH_RERAISE
       END
   BUT_ONLY
   OUTER_SPRINT internal_insert_data "%internal_insert_data%"^"%WNL%"
   LAF internal_script_block_master 
     INT_VAR only_once replace=1 recompile
     STR_VAR internal_insert_data script match_function
           match match1 match2 match3 match4 match5
           type=insert 
   END
END

/*
document{script_delete_block}
{
Any matched block is deleted.
}
*/

DEFINE_ACTION_FUNCTION script_delete_block//internal
INT_VAR only_once=0//boolean
		recompile=1//boolean
STR_VAR script=""
        match_function=""//function
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
BEGIN
   LAF internal_script_block_master INT_VAR only_once recompile STR_VAR script match_function match match1 match2 match3 match4 match5 type=delete END
END

DEFINE_ACTION_FUNCTION DELETE_SCRIPT_BLOCK//ointernal
INT_VAR only_once=0//boolean
		recompile=1//boolean
STR_VAR script=""
        match_function=""//function
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
BEGIN
   LAF internal_script_block_master INT_VAR only_once recompile STR_VAR script match_function match match1 match2 match3 match4 match5 type=delete END
END

/*
document{script_clone_block}
{
Any matched block is copied directly below (or, if insert_above=1, directly above) the matched block. Up to 6 regexps ('swap_out', and 'swap_out1'-'swap_out5') are specified. Each is matched against the (decompiled) copied block via REPLACE_TEXTUALLY, and on a match, is swapped for (respectively) 'swap_in' or 'swap_in1'-'swap_in5'. The same happens to the original block, using 'original_swap_out'/'original_swap_out[1-5]' and 'original_swap_in'/'original_swap_in[1-5]'.
}
*/

DEFINE_ACTION_FUNCTION script_clone_block
INT_VAR insert_above=0//boolean
        only_once=0//boolean
        recompile=1//boolean
STR_VAR script=""
        patch=""//function
		function=""//function
        patch_original=""//function
		function_original=""//function
        match_function=""//function
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        swap_out=""
        swap_out1=""
        swap_out2=""
        swap_out3=""
        swap_out4=""
        swap_out5=""
        swap_in=""
        swap_in1=""
        swap_in2=""
        swap_in3=""
        swap_in4=""
        swap_in5=""
        original_swap_out=""
        original_swap_out1=""
        original_swap_out2=""
        original_swap_out3=""
        original_swap_out4=""
        original_swap_out5=""
        original_swap_in=""
        original_swap_in1=""
        original_swap_in2=""
        original_swap_in3=""
        original_swap_in4=""
        original_swap_in5=""
BEGIN
   LAF internal_script_block_master
     INT_VAR only_once insert_above
     STR_VAR script match_function patch="%patch%%function%" patch_original="%patch_original%%function_original%"
           match match1 match2 match3 match4 match5 
           swap_out swap_out1 swap_out2 swap_out3 swap_out4 swap_out5
           swap_in swap_in1 swap_in2 swap_in3 swap_in4 swap_in5
           original_swap_out original_swap_out1 original_swap_out2 original_swap_out3 original_swap_out4 original_swap_out5
           original_swap_in original_swap_in1 original_swap_in2 original_swap_in3 original_swap_in4 original_swap_in5
           type=clone
   END
END

DEFINE_ACTION_FUNCTION CLONE_SCRIPT_BLOCK
INT_VAR insert_above=0//boolean
        only_once=0//boolean
        recompile=1//boolean
STR_VAR script=""
        patch=""//function
		function=""//function
        patch_original=""//function
		function_original=""//function
        match_function=""//function
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        swap_out=""
        swap_out1=""
        swap_out2=""
        swap_out3=""
        swap_out4=""
        swap_out5=""
        swap_in=""
        swap_in1=""
        swap_in2=""
        swap_in3=""
        swap_in4=""
        swap_in5=""
        original_swap_out=""
        original_swap_out1=""
        original_swap_out2=""
        original_swap_out3=""
        original_swap_out4=""
        original_swap_out5=""
        original_swap_in=""
        original_swap_in1=""
        original_swap_in2=""
        original_swap_in3=""
        original_swap_in4=""
        original_swap_in5=""
BEGIN
   LAF internal_script_block_master
     INT_VAR only_once insert_above
     STR_VAR script match_function patch="%patch%%function%" patch_original="%patch_original%%function_original%"
           match match1 match2 match3 match4 match5 
           swap_out swap_out1 swap_out2 swap_out3 swap_out4 swap_out5
           swap_in swap_in1 swap_in2 swap_in3 swap_in4 swap_in5
           original_swap_out original_swap_out1 original_swap_out2 original_swap_out3 original_swap_out4 original_swap_out5
           original_swap_in original_swap_in1 original_swap_in2 original_swap_in3 original_swap_in4 original_swap_in5
           type=clone
   END
END

/*
document{script_alter_block}
{
Up to 6 regexps ('swap_out', and 'swap_out1'-'swap_out5') are specified. Each is matched against any matched block via REPLACE_TEXTUALLY, and on a match, is swapped for (respectively) 'swap_in' or 'swap_in1'-'swap_in5'. 
}
*/

DEFINE_ACTION_FUNCTION script_alter_block
INT_VAR only_once=0//boolean
        recompile=1//boolean
STR_VAR script=""
        patch=""//function
		function=""//function
        match_function=""//function
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        swap_out=""
        swap_out1=""
        swap_out2=""
        swap_out3=""
        swap_out4=""
        swap_out5=""
        swap_in=""
        swap_in1=""
        swap_in2=""
        swap_in3=""
        swap_in4=""
        swap_in5=""
BEGIN
   LAF internal_script_block_master
     INT_VAR only_once recompile
     STR_VAR script match_function patch="%patch%%function%"
           match match1 match2 match3 match4 match5 
           swap_out swap_out1 swap_out2 swap_out3 swap_out4 swap_out5
           swap_in swap_in1 swap_in2 swap_in3 swap_in4 swap_in5
           type=alter
   END
END

DEFINE_ACTION_FUNCTION ALTER_SCRIPT_BLOCK
INT_VAR only_once=0//boolean
        recompile=1//boolean
STR_VAR script=""
        patch=""//function
		function=""//function
        match_function=""//function
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        swap_out=""
        swap_out1=""
        swap_out2=""
        swap_out3=""
        swap_out4=""
        swap_out5=""
        swap_in=""
        swap_in1=""
        swap_in2=""
        swap_in3=""
        swap_in4=""
        swap_in5=""
BEGIN
   LAF internal_script_block_master
     INT_VAR only_once recompile
     STR_VAR script match_function patch="%patch%%function%"
           match match1 match2 match3 match4 match5 
           swap_out swap_out1 swap_out2 swap_out3 swap_out4 swap_out5
           swap_in swap_in1 swap_in2 swap_in3 swap_in4 swap_in5
           type=alter
   END
END

/*
document{internal_script_block_master}
{
This is actually the innards of the various functions in this library, all of which are hooks into it.
}
*/

DEFINE_ACTION_FUNCTION internal_script_block_master//internal
INT_VAR insert_above=0//boolean
        only_once=0//boolean
        recompile=1//boolean
        replace=0//boolean
STR_VAR script=""
        patch=""
        patch_original=""
        match_function=""
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        internal_insert_data=""
        swap_out=""
        swap_out1=""
        swap_out2=""
        swap_out3=""
        swap_out4=""
        swap_out5=""
        swap_in=""
        swap_in1=""
        swap_in2=""
        swap_in3=""
        swap_in4=""
        swap_in5=""
        original_swap_out=""
        original_swap_out1=""
        original_swap_out2=""
        original_swap_out3=""
        original_swap_out4=""
        original_swap_out5=""
        original_swap_in=""
        original_swap_in1=""
        original_swap_in2=""
        original_swap_in3=""
        original_swap_in4=""
        original_swap_in5=""
		type=""
BEGIN
COPY_EXISTING "%script%.bcs" "override"
     SET found_match=0
     SPRINT new_script ""
     SET start=INDEX_BUFFER("CR")
	 // anonymous function checks (manual so we don't rely on lib_anon) plus fun-arg check
	 SPRINT match_arguments ""
	 PATCH_IF INDEX ("[ <>=\+/*{}]" "%match_function%")>=0 BEGIN
		LPF anon_define STR_VAR function="%match_function%" RET match_function=function SFO_anon_func_count END
	 END ELSE BEGIN	 
	    INNER_PATCH_SAVE match_function "%match_function%" BEGIN
			REPLACE_EVALUATE "\(.*\)(\([^)]*\))$" BEGIN
				SPRINT match_arguments "%MATCH2%"
			END
			"%MATCH1%"
		END
     END
	 SPRINT patch_arguments ""
	 PATCH_IF INDEX ("[ <>=\+/*{}]" "%patch%")>=0 BEGIN
		LPF anon_define STR_VAR function="%patch%" RET patch=function SFO_anon_func_count END
	 END ELSE BEGIN	 
	    INNER_PATCH_SAVE patch "%patch%" BEGIN
			REPLACE_EVALUATE "\(.*\)(\([^)]*\))$" BEGIN
				SPRINT patch_arguments "%MATCH2%"
			END
			"%MATCH1%"
		END
     END
	 SPRINT orig_arguments ""
	 PATCH_IF INDEX ("[ <>=\+/*{}]" "%patch_original%")>=0 BEGIN
		LPF anon_define STR_VAR function="%patch_original%" RET patch_original=function SFO_anon_func_count END
	 END ELSE BEGIN	 
	    INNER_PATCH_SAVE patch_original "%patch_original%" BEGIN
			REPLACE_EVALUATE "\(.*\)(\([^)]*\))$" BEGIN
				SPRINT orig_arguments "%MATCH2%"
			END
			"%MATCH1%"
		END
     END
     WHILE start>0 BEGIN
          SET end=INDEX_BUFFER ("RS%LNL%CR%LNL%")
          SET length=(end - start) + 6
          READ_ASCII start data (length)
          DELETE_BYTES start length
          INNER_PATCH_SAVE data "SC%LNL%%data%SC%LNL%" BEGIN
             DECOMPILE_BCS_TO_BAF
             SET proceed=0
             PATCH_IF (!found_match || !only_once) BEGIN
              PATCH_IF "%match_function%" STRING_COMPARE "" BEGIN
                READ_ASCII 0x0 data_temp (BUFFER_LENGTH)  // we do this to avoid side-effects
			   INNER_PATCH "%data_temp%" BEGIN
                    PATCH_IF "%match_arguments%" STR_EQ "" BEGIN
					LPF "%match_function%" RET v_func=value END
					END ELSE BEGIN
						LPF "%match_function%" STR_VAR arguments="%match_arguments%" RET v_func=value END
					END
                END
              END ELSE BEGIN
                SET v_func=1
              END
              PATCH_IF
             ( INDEX_BUFFER ("%match%")>=0     AND
               INDEX_BUFFER ("%match1%")>=0    AND
               INDEX_BUFFER ("%match2%")>=0    AND
               INDEX_BUFFER ("%match3%")>=0    AND
               INDEX_BUFFER ("%match4%")>=0    AND
               INDEX_BUFFER ("%match5%")>=0    AND
               v_func=1
              )
              BEGIN
                SET proceed=1
              END
             END
             PATCH_IF proceed BEGIN
                 SET found_match=1
                 PATCH_MATCH "%type%" WITH
                 alter BEGIN
                     PATCH_IF "%patch%" STRING_COMPARE "" BEGIN 
						PATCH_IF "%patch_arguments%" STR_EQ "" BEGIN
							LPF "%patch%" END
						END ELSE BEGIN
							LPF "%patch%" STR_VAR arguments="%patch_arguments%" END
						END						
					 END
                     PATCH_IF "%swap_out%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out%" "%swap_in%" END
                     PATCH_IF "%swap_out1%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out1%" "%swap_in1%" END
                     PATCH_IF "%swap_out2%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out2%" "%swap_in2%" END
                     PATCH_IF "%swap_out3%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out3%" "%swap_in3%" END
                     PATCH_IF "%swap_out4%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out4%" "%swap_in4%" END
                     PATCH_IF "%swap_out5%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out5%" "%swap_in5%" END
                 END
                 clone BEGIN
                    READ_ASCII 0x0 data2 (BUFFER_LENGTH)
                    INNER_PATCH_SAVE data2 "%data2%" BEGIN
                      PATCH_IF "%patch%" STRING_COMPARE "" BEGIN 
						  PATCH_IF "%patch_arguments%" STR_EQ "" BEGIN
							LPF "%patch%" END
						  END ELSE BEGIN
							LPF "%patch%" STR_VAR arguments="%patch_arguments%" END
						  END						
					   END
					   PATCH_IF "%swap_out%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out%" "%swap_in%" END
                       PATCH_IF "%swap_out1%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out1%" "%swap_in1%" END
                       PATCH_IF "%swap_out2%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out2%" "%swap_in2%" END
                       PATCH_IF "%swap_out3%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out3%" "%swap_in3%" END
                       PATCH_IF "%swap_out4%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out4%" "%swap_in4%" END
                       PATCH_IF "%swap_out5%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out5%" "%swap_in5%" END
                    END
                      PATCH_IF "%patch_original%" STRING_COMPARE "" BEGIN 
						  PATCH_IF "%orig_arguments%" STR_EQ "" BEGIN
							LPF "%patch_original%" END
						  END ELSE BEGIN
							LPF "%patch_original%" STR_VAR arguments="%orig_arguments%" END
						  END						
					   END 
                    PATCH_IF "%original_swap_out%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%original_swap_out%" "%original_swap_in%" END
                    PATCH_IF "%original_swap_out1%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%original_swap_out1%" "%original_swap_in1%" END
                    PATCH_IF "%original_swap_out2%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%original_swap_out2%" "%original_swap_in2%" END
                    PATCH_IF "%original_swap_out3%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%original_swap_out3%" "%original_swap_in3%" END
                    PATCH_IF "%original_swap_out4%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%original_swap_out4%" "%original_swap_in4%" END
                    PATCH_IF "%original_swap_out5%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%original_swap_out5%" "%original_swap_in5%" END
                    PATCH_IF insert_above BEGIN
                       SET insert_point=0
                    END ELSE BEGIN
                       SET insert_point=BUFFER_LENGTH
                    END
                    INSERT_BYTES insert_point (STRING_LENGTH "%data2%")
                    WRITE_ASCIIE insert_point "%data2%"
                 END
                 delete BEGIN
                    DELETE_BYTES 0x0 BUFFER_LENGTH
                 END
                 insert BEGIN
                    PATCH_IF replace BEGIN
                       DELETE_BYTES 0x0 BUFFER_LENGTH
                    END
                    PATCH_IF insert_above BEGIN
                       SET insert_point=0
                    END ELSE BEGIN
                       SET insert_point=BUFFER_LENGTH
                    END
                    INSERT_BYTES insert_point (STRING_LENGTH "%internal_insert_data%")
                    WRITE_ASCIIE insert_point "%internal_insert_data%"
                 END
                 DEFAULT
                    PATCH_FAIL "internal error in ALTER_SCRIPT suite"
                 END
             END
          END
          SPRINT new_script "%new_script%%data%"
          SET start=INDEX_BUFFER("CR")
     END
     DELETE_BYTES 0x0 BUFFER_LENGTH
     INNER_PATCH_SAVE new_script "%new_script%" BEGIN
        PATCH_IF recompile BEGIN
			PATCH_TRY
				COMPILE_BAF_TO_BCS
		    WITH DEFAULT
				PATCH_PRINT "alter_script: failure to recompile. Copying script to alter_script_failure.baf in workspace"
				READ_ASCII 0x0 arguments (BUFFER_LENGTH)
				LPF new_file INT_VAR no_log=1 STR_VAR arguments file=alter_script_error.baf path="%workspace%" END
				PATCH_RERAISE
		    END
        END
        SET new_length=BUFFER_LENGTH
     END
     INSERT_BYTES 0x0 new_length
     WRITE_ASCIIE 0x0 "%new_script%"
BUT_ONLY
END

/*
document{script_block_to_array}
{
Given 'block', which should be a single BAF block, return an array 'array' whose keys are successive integers (from 0) and whose values are the successive lines of the block.
Also return 'length', the number of lines in the block.
}
*/

DEFINE_PATCH_FUNCTION script_block_to_array
	STR_VAR block=""
	RET length
	RET_ARRAY array			
BEGIN
	CLEAR_ARRAY array
	done=0
	length=0
	SPRINT block "%block% "
	INNER_PATCH "%block%" BEGIN
		WHILE !done BEGIN
			READ_ASCII 0x0 first_char (1)
			PATCH_MATCH "%first_char%" WITH
			"[!A-Za-z0-9]" BEGIN 
				PATCH_IF INDEX_BUFFER (CASE_SENSITIVE "END[ %WNL%%LNL%%MNL%]")=0 BEGIN
					SPRINT $array("%length%") "END"
					++length
					done=1
				END ELSE
				PATCH_IF INDEX_BUFFER (CASE_SENSITIVE "IF[ %WNL%%LNL%%MNL%]+")=0 BEGIN
					SPRINT $array("%length%") "IF"
					++ length
					DELETE_BYTES 0x0 2
				END ELSE
				PATCH_IF INDEX_BUFFER (CASE_SENSITIVE "THEN[ %WNL%%LNL%%MNL%]+")=0 BEGIN
					SPRINT $array("%length%") "THEN"
					++ length
					DELETE_BYTES 0x0 4
				END ELSE
				PATCH_IF INDEX_BUFFER (CASE_SENSITIVE "RESPONSE #[0-9]+[ %WNL%%LNL%%MNL%]+") = 0 BEGIN
					hash_ind=INDEX_BUFFER ("#")
					end_ind=INDEX_BUFFER ("[^0-9]" hash_ind+1)
					READ_ASCII 0x0 data (end_ind)
					SPRINT $array("%length%") "%data%"
					++ length
					DELETE_BYTES 0x0 end_ind
				END ELSE BEGIN
				LPF find_parenthesis_range STR_VAR left="(" right=")" RET start end END
					PATCH_IF start>=0 BEGIN
						READ_ASCII 0x0 row (end+1)
						DELETE_BYTES 0x0 (end+1)
						SPRINT $array("%length%") "%row%"
						++length
					END ELSE BEGIN
						done=1
						PATCH_WARN "Warning (script_block_to_array): block %block% appears malformed"
					END
				END
			
			END
			DEFAULT
				DELETE_BYTES 0x0 1
			END
		END
	END
END

/*
document{script_array_to_block}
{
Given 'array'', which should be of the form created by script_block_to_array, return the BAF block as 'block'.
}
*/

DEFINE_PATCH_FUNCTION script_array_to_block
	STR_VAR array=""
	RET block
BEGIN
	SPRINT block ""
	PHP_EACH "%array%" AS k=>v BEGIN
		SPRINT block "%block%%v%%WNL%"
	END
END

/*
document{_script_disjunctive_delete}
{
Acting on the current file, which should be a single BAF block, delete any line that contains "arguments", so as to preserve logical structure (i.e. this can safely delete a line that might be inside an OR()).

}
*/

DEFINE_PATCH_FUNCTION script_disjunctive_delete
	STR_VAR arguments=""
BEGIN
	PATCH_IF "%arguments%" STR_EQ "" BEGIN
		PATCH_FAIL "script_disjunctive_delete requires an argument"
	END 
	READ_ASCII 0x0 block (BUFFER_LENGTH)
	LPF script_block_to_array STR_VAR block RET_ARRAY array END
	or_depth=0
	or_depth_max=0
	or_loc="-1"
	PHP_EACH array AS ind=>line BEGIN
		PATCH_MATCH "%line%" WITH
		"OR([0-9]+)" BEGIN
			or_loc=ind
			INNER_PATCH "%line%" BEGIN
				REPLACE_EVALUATE "\([0-9]+\)" BEGIN
					or_depth=MATCH1
					or_depth_max=or_depth
				END
				""
			END
		END
		".*%arguments%.*" BEGIN
			SPRINT $array("%ind%") ""
			PATCH_IF or_depth>0 BEGIN
				or_depth_max -= 1
				SPRINT $array("%or_loc%") "OR(%or_depth_max%)"
				or_depth -=1
			END
		END
		DEFAULT
			PATCH_IF or_depth>0 BEGIN
				or_depth -= 1
			END
		END
	END	
	LPF script_array_to_block STR_VAR array RET block END
	DELETE_BYTES 0x0 BUFFER_LENGTH
	INSERT_BYTES 0x0 STRING_LENGTH "%block%"
	WRITE_ASCII 0x0 "%block%"
END


