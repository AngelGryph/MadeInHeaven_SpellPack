// Shamelessly ripped from Refinements

DEFINE_PATCH_FUNCTION patch_add_hla
  STR_VAR
	2da_row = ~1~
    ability = ~*~
    icon = ~*~
    strref = ~*~
    min_lev = ~1~
    max_level = ~99~
    num_allowed = ~*~
    prerequisite = ~*~
    excluded_by = ~*~
    alignment_restrict = ~*~
BEGIN
  COUNT_2DA_COLS cols // amount of columns
  COUNT_2DA_ROWS cols rows // amount of rows
  READ_2DA_ENTRIES_NOW file cols // read all file into memory  
  first_empty_row = rows // default value to amount of rows in order to skip removal if the table is full
  FOR (i = 0; i < file; ++i) BEGIN // iterate over rows
    SET empty_col_count = 0 // amount of empty columns in the row
    FOR (j = 0; j < cols; ++j) BEGIN // iterate over columns in the row
      READ_2DA_ENTRY_FORMER file i j col_value // read column value
      PATCH_IF "%col_value%" STRING_EQUAL "*" BEGIN // asterisk symbolizes empty column
        empty_col_count += 1
      END
    END
    PATCH_IF "%empty_col_count%" = ("%cols%" - 1) BEGIN // first column in every row is its number, that's why (cols - 1)
      first_empty_row = i // remember the first empty row
      i = file // skip iterating over the rest of the rows
    END
  END  
  INSERT_2DA_ROW ("%first_empty_row%") %cols% ~%2da_row% %ability% %icon% %strref% %min_lev% %max_level% %num_allowed% %prerequisite% %excluded_by% %alignment_restrict%~
  PRETTY_PRINT_2DA
END


DEFINE_PATCH_FUNCTION patch_remove_hla
  STR_VAR
    remove_ability = ~*~
BEGIN
  COUNT_2DA_COLS cols // amount of columns
  COUNT_2DA_ROWS cols rows // amount of rows
  READ_2DA_ENTRIES_NOW file cols // read all file into memory
  SET num_deleted = 0
  FOR (i = 0; i < file; ++i) BEGIN // iterate over rows
    READ_2DA_ENTRY_FORMER file i 1 col_value // read column value
    PATCH_IF "%col_value%" STRING_EQUAL_CASE "%remove_ability%" BEGIN // match .spl to be removed
      REMOVE_2DA_ROW (i - num_deleted) cols // kill the row
      SET num_deleted += 1
    END
  END
END


DEFINE_PATCH_FUNCTION patch_replace_hla
  STR_VAR
    remove_ability = ~*~
	2da_row = ~1~
    ability = ~*~
    icon = ~*~
    strref = ~*~
    min_lev = ~1~
    max_level = ~99~
    num_allowed = ~*~
    prerequisite = ~*~
    excluded_by = ~*~
    alignment_restrict = ~*~
BEGIN
  COUNT_2DA_COLS cols // amount of columns
  COUNT_2DA_ROWS cols rows // amount of rows
  READ_2DA_ENTRIES_NOW file cols // read all file into memory
  SET num_deleted = 0
  FOR (i = 0; i < file; ++i) BEGIN // iterate over rows
    READ_2DA_ENTRY_FORMER file i 1 col_value // read column value
    PATCH_IF "%col_value%" STRING_EQUAL_CASE "%remove_ability%" BEGIN // match .spl to be removed
      REMOVE_2DA_ROW (i - num_deleted) cols // kill the row
      SET num_deleted += 1
    END
  END
  PATCH_IF NOT num_deleted = 0 BEGIN
    FOR (i = 0; i < file; ++i) BEGIN // iterate over rows
      SET empty_col_count = 0 // amount of empty columns in the row
      FOR (j = 0; j < cols; ++j) BEGIN // iterate over columns in the row
        READ_2DA_ENTRY_FORMER file i j col_value // read column value
        PATCH_IF "%col_value%" STRING_EQUAL "*" BEGIN // asterisk symbolizes empty column
          empty_col_count += 1
        END
      END
      PATCH_IF "%empty_col_count%" = ("%cols%" - 1) BEGIN // first column in every row is its number, that's why (cols - 1)
        first_empty_row = i // remember the first empty row
        i = file // skip iterating over the rest of the rows
      END
    END  
    INSERT_2DA_ROW ("%first_empty_row%" - 1) %cols% ~%2da_row% %ability% %icon% %strref% %min_lev% %max_level% %num_allowed% %prerequisite% %excluded_by% %alignment_restrict%~
  END
  PRETTY_PRINT_2DA
END


DEFINE_ACTION_FUNCTION get_hla_table
  STR_VAR
    kit_name = ~~
  RET
    hla_table
BEGIN
  COPY_EXISTING ~luabbr.2da~ ~override~
    READ_2DA_ENTRIES_NOW file 2 // read all file into memory
    FOR (row = 1; row < file; row += 1) BEGIN // iterate over rows
      READ_2DA_ENTRY_FORMER ~file~ row 0 kit
      READ_2DA_ENTRY_FORMER ~file~ row 1 table
      TEXT_SPRINT $d5_hla_tables(~%kit%~) ~%table%~
    END
  BUT_ONLY
  ACTION_PHP_EACH d5_hla_tables AS ind => tab BEGIN
    ACTION_IF ~%ind%~ STRING_EQUAL_CASE ~%kit_name%~ BEGIN
      OUTER_TEXT_SPRINT hla_table ~%tab%~
    END
  END
END


DEFINE_ACTION_FUNCTION action_add_hla
  STR_VAR
    kit_name = ~~
	2da_row = ~1~
    ability = ~*~
    icon = ~*~
    strref = ~*~
    min_lev = ~1~
    max_level = ~99~
    num_allowed = ~*~
    prerequisite = ~*~
    excluded_by = ~*~
    alignment_restrict = ~*~
BEGIN
  COPY_EXISTING ~luabbr.2da~ ~override~
	COUNT_2DA_COLS l_cols // amount of columns
	READ_2DA_ENTRIES_NOW l_rows l_cols // read all file into memory  
	FOR (l_row = 1; l_row < l_rows; ++l_row) BEGIN // iterate over rows
	  READ_2DA_ENTRY_FORMER l_rows l_row 0 ~l_kit~ // read column value
	  PATCH_IF ~%l_kit%~ STRING_EQUAL_CASE ~%kit_name%~ BEGIN
	    SET lu_row = %l_row%
	    READ_2DA_ENTRY_FORMER l_rows lu_row 1 ~l_table~ // read column value
	  END
	END
  BUT_ONLY
  ACTION_IF FILE_EXISTS_IN_GAME ~lu%l_table%.2da~ BEGIN
    COPY_EXISTING ~lu%l_table%.2da~ ~override/lud5_%lu_row%.2da~ 
	    COUNT_2DA_COLS cols // amount of columns
	    COUNT_2DA_ROWS cols rows // amount of rows
	    READ_2DA_ENTRIES_NOW file cols // read all file into memory  
	    first_empty_row = rows // default value to amount of rows in order to skip removal if the table is full
	    FOR (i = 0; i < file; ++i) BEGIN // iterate over rows
	      SET empty_col_count = 0 // amount of empty columns in the row
	      FOR (j = 0; j < cols; ++j) BEGIN // iterate over columns in the row
	        READ_2DA_ENTRY_FORMER file i j col_value // read column value
	        PATCH_IF "%col_value%" STRING_EQUAL "*" BEGIN // asterisk symbolizes empty column
	          empty_col_count += 1
	        END
	      END
	      PATCH_IF "%empty_col_count%" = ("%cols%" - 1) BEGIN // first column in every row is its number, that's why (cols - 1)
	        first_empty_row = i // remember the first empty row
	        i = file // skip iterating over the rest of the rows
	      END
	    END  
	    INSERT_2DA_ROW ("%first_empty_row%") %cols% ~%2da_row% %ability% %icon% %strref% %min_lev% %max_level% %num_allowed% %prerequisite% %excluded_by% %alignment_restrict%~
	    PRETTY_PRINT_2DA
    ACTION_IF NOT (~%l_table%~ STRING_EQUAL_CASE ~d5_%lu_row%~) BEGIN
      COPY_EXISTING ~LUABBR.2DA~ ~override~
        SET_2DA_ENTRY %lu_row% 1 2 ~d5_%lu_row%~
    END
  END
END


DEFINE_ACTION_FUNCTION action_remove_hla
  STR_VAR
    kit_name = ~~
    remove_ability = ~*~
BEGIN
  COPY_EXISTING ~luabbr.2da~ ~override~
	COUNT_2DA_COLS l_cols // amount of columns
	READ_2DA_ENTRIES_NOW l_rows l_cols // read all file into memory  
	FOR (l_row = 1; l_row < l_rows; ++l_row) BEGIN // iterate over rows
	  READ_2DA_ENTRY_FORMER l_rows l_row 0 ~l_kit~ // read column value
	  PATCH_IF ~%l_kit%~ STRING_EQUAL_CASE ~%kit_name%~ BEGIN
	    SET lu_row = %l_row%
	    READ_2DA_ENTRY_FORMER l_rows lu_row 1 ~l_table~ // read column value
	  END
	END
  BUT_ONLY
  ACTION_IF FILE_EXISTS_IN_GAME ~lu%l_table%.2da~ BEGIN
    COPY_EXISTING ~lu%l_table%.2da~ ~override/lud5_%lu_row%.2da~ 
	  COUNT_2DA_COLS cols // amount of columns
	  COUNT_2DA_ROWS cols rows // amount of rows
	  READ_2DA_ENTRIES_NOW file cols // read all file into memory
	  SET num_deleted = 0
	  FOR (i = 0; i < file; ++i) BEGIN // iterate over rows
	    READ_2DA_ENTRY_FORMER file i 1 col_value // read column value
	    PATCH_IF "%col_value%" STRING_EQUAL_CASE "%remove_ability%" BEGIN // match .spl to be removed
	      REMOVE_2DA_ROW (i - num_deleted) cols // kill the row
	      SET num_deleted += 1
	    END
	  END
    ACTION_IF NOT (~%l_table%~ STRING_EQUAL_CASE ~d5_%lu_row%~) BEGIN
      COPY_EXISTING ~LUABBR.2DA~ ~override~
        SET_2DA_ENTRY %lu_row% 1 2 ~d5_%lu_row%~
    END
  END
END

DEFINE_ACTION_FUNCTION action_replace_hla
  STR_VAR
    kit_name = ~~
    remove_ability = ~*~
	2da_row = ~1~
    ability = ~*~
    icon = ~*~
    strref = ~*~
    min_lev = ~1~
    max_level = ~99~
    num_allowed = ~*~
    prerequisite = ~*~
    excluded_by = ~*~
    alignment_restrict = ~*~
BEGIN
  COPY_EXISTING ~luabbr.2da~ ~override~
	COUNT_2DA_COLS l_cols // amount of columns
	READ_2DA_ENTRIES_NOW l_rows l_cols // read all file into memory  
	FOR (l_row = 1; l_row < l_rows; ++l_row) BEGIN // iterate over rows
	  READ_2DA_ENTRY_FORMER l_rows l_row 0 ~l_kit~ // read column value
	  PATCH_IF ~%l_kit%~ STRING_EQUAL_CASE ~%kit_name%~ BEGIN
	    SET lu_row = %l_row%
	    READ_2DA_ENTRY_FORMER l_rows lu_row 1 ~l_table~ // read column value
	  END
	END
  BUT_ONLY
  ACTION_IF FILE_EXISTS_IN_GAME ~lu%l_table%.2da~ BEGIN
    COPY_EXISTING ~lu%l_table%.2da~ ~override/lud5_%lu_row%.2da~ 
	  COUNT_2DA_COLS cols // amount of columns
	  COUNT_2DA_ROWS cols rows // amount of rows
	  READ_2DA_ENTRIES_NOW file cols // read all file into memory
	  SET num_deleted = 0
	  FOR (i = 0; i < file; ++i) BEGIN // iterate over rows
	    READ_2DA_ENTRY_FORMER file i 1 col_value // read column value
	    PATCH_IF "%col_value%" STRING_EQUAL_CASE "%remove_ability%" BEGIN // match .spl to be removed
	      REMOVE_2DA_ROW (i - num_deleted) cols // kill the row
	      SET num_deleted += 1
	    END
	  END
	  PATCH_IF NOT num_deleted = 0 BEGIN
	    FOR (i = 0; i < file; ++i) BEGIN // iterate over rows
	      SET empty_col_count = 0 // amount of empty columns in the row
	      FOR (j = 0; j < cols; ++j) BEGIN // iterate over columns in the row
	        READ_2DA_ENTRY_FORMER file i j col_value // read column value
	        PATCH_IF "%col_value%" STRING_EQUAL "*" BEGIN // asterisk symbolizes empty column
	          empty_col_count += 1
	        END
	      END
	      PATCH_IF "%empty_col_count%" = ("%cols%" - 1) BEGIN // first column in every row is its number, that's why (cols - 1)
	        first_empty_row = i // remember the first empty row
	        i = file // skip iterating over the rest of the rows
	      END
	    END  
	    INSERT_2DA_ROW ("%first_empty_row%" - 1) %cols% ~%2da_row% %ability% %icon% %strref% %min_lev% %max_level% %num_allowed% %prerequisite% %excluded_by% %alignment_restrict%~
	  END
	  PRETTY_PRINT_2DA
    ACTION_IF NOT (~%l_table%~ STRING_EQUAL_CASE ~d5_%lu_row%~) BEGIN
      COPY_EXISTING ~LUABBR.2DA~ ~override~
        SET_2DA_ENTRY %lu_row% 1 2 ~d5_%lu_row%~
    END
  END
END


