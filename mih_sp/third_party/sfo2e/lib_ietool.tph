/*
document{ext}
{Returns the extension of the currently-being-patched file, if we can tell.
(we can tell for 2da, are, chr, cre, dlg, gam, itm, pro, spl, sto, vef, vvc, wed, and wmp)
Also return its version

By default we return lowercase; if you want it in uppercase, set uppercase=1.
}

*/

DEFINE_PATCH_FUNCTION ext 
	INT_VAR uppercase=0//boolean 
	RET ext 
		version
BEGIN

	READ_ASCII 0x0 ext (3)
	READ_ASCII 0x4 version (4)
	INNER_PATCH_SAVE version "%version%" BEGIN
		REPLACE_TEXTUALLY " " ""
	END
	PATCH_MATCH "%ext%" WITH
	2da are chr cre dlg gam itm pro spl sto vef vvc wed
	BEGIN END
	wma BEGIN
		SPRINT ext wmp
	END	
	DEFAULT
		PATCH_WARN "unable to identify file type; defaulting to '' " 
		SPRINT ext ""
		SPRINT version ""
	END
	PATCH_IF uppercase BEGIN
		TO_UPPER ext
		TO_UPPER version
	END ELSE BEGIN
		TO_LOWER ext
		TO_LOWER version
	END

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
document{merge_scripts}
{
If both 'top' and 'bottom' exist, merge them into a new script, and give it a guaranteed-unique name unless a name
is specified. In any case, return the name.
If one doesn't exist, return the name of the other.
}
*/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_DIMORPHIC_FUNCTION merge_scripts
   STR_VAR top=""
           bottom=""
           script=""
   RET script
BEGIN
	ACTION_IF FILE_EXISTS_IN_GAME "%top%.bcs" BEGIN
		ACTION_IF FILE_EXISTS_IN_GAME "%bottom%.bcs" BEGIN
			ACTION_IF "%script%" STR_EQ "" BEGIN
				LAF GET_UNIQUE_FILE_NAME STR_VAR extension=bcs RET script=filename END
			END
			COPY_EXISTING "%bottom%.bcs" "%workspace%/%bottom%.baf"
				DECOMPILE_BCS_TO_BAF
			COPY_EXISTING "%top%.bcs" "override/%script%.bcs"
				DECOMPILE_BCS_TO_BAF
				APPEND_FILE TEXT "%workspace%/%bottom%.baf"
			COMPILE_BAF_TO_BCS
		END ELSE BEGIN
			OUTER_SPRINT script "%top%"
		END
	END ELSE BEGIN
		OUTER_SPRINT script "%bottom%"
	END

END




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
document{insert_script}
{
Given a numbered-from-0 array of scripts 'script_array', and a new  script 'script' (synonym: 'arguments'), insert the new script in position 'loc'. 
Insert position can be 'high', 'low', 'after x' (defaults to 'high' if
x isn't present), or 'before x' (defaults to 'low' if x isn't present).
If there isn't space, merge the two lowest scripts to make space.
}
*/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_DIMORPHIC_FUNCTION insert_script
	STR_VAR script_array=""
			script=""
			arguments=""
			loc=""
	RET_ARRAY script_array
BEGIN
	OUTER_PATCH "" BEGIN
		SPRINT script "%arguments%%script%"
		// write into new array
		PHP_EACH "%script_array%" AS k=>v BEGIN
			SPRINT $script_array("%k%") "%v%"
		END
		LPF array_length STR_VAR array=script_array RET length END
		// check for space
		space=0
		PHP_EACH script_array AS ind=>this_script BEGIN
			PATCH_MATCH "%this_script%" WITH
			"" "none" "null" BEGIN
				space=1
			END
			DEFAULT
			END
		END
		// if necessary, make space
		PATCH_IF !space BEGIN
			i1=length - 2
			i2=length - 1
			SPRINT top $script_array("%i1%")
			SPRINT bottom $script_array("%i2%")
			LPF merge_scripts STR_VAR top bottom RET new_script=script END
			SPRINT $script_array("%i1%") "%new_script%"
			SPRINT $script_array("%i2%") ""
		END
		// carry out insertion
		PATCH_MATCH "%loc%" WITH
		low BEGIN
			SPRINT buffer "%script%"
			FOR (ind=length - 1; ind>=0;ind=ind - 1) BEGIN
				SPRINT this_script $script_array("%ind%")
				PATCH_IF "%buffer%" STR_CMP "" BEGIN
					SPRINT $script_array("%ind%") "%buffer%"
					PATCH_MATCH "%this_script%" WITH
					"" "none" "null" BEGIN
						SPRINT buffer ""
					END
					DEFAULT
						SPRINT buffer "%this_script%"
					END				
				END			
			
			END
		END
		high BEGIN
			SPRINT buffer "%script%"
			PHP_EACH script_array AS ind=>this_script BEGIN
				PATCH_IF "%buffer%" STR_CMP "" BEGIN
					SPRINT $script_array("%ind%") "%buffer%"
					PATCH_MATCH "%this_script%" WITH
					"" "none" "null" BEGIN
						SPRINT buffer ""
					END
					DEFAULT
						SPRINT buffer "%this_script%"
					END				
				END			
			END
		END
		"after .*" BEGIN
			INNER_PATCH "%loc%" BEGIN
				REPLACE_EVALUATE "after \(.*\)" BEGIN
					SPRINT match_script "%MATCH1%"
				END
				""
			END
			// find index of 'match_script'
			match_index="-1"
			PHP_EACH script_array AS ind=>this_script BEGIN
				PATCH_IF "%this_script%" STR_EQ "%match_script%" BEGIN
					match_index=ind
				END
			END
			PATCH_IF match_index<0 BEGIN
				LPF insert_script STR_VAR script_array script loc=high RET_ARRAY script_array END
			END ELSE BEGIN
			// is there room below?
				space_below=0
				FOR (ind=match_index;ind<length;++ind) BEGIN
					SPRINT this_script $script_array("%ind%")
					PATCH_MATCH "%this_script%" WITH
					"" "none" "null" BEGIN
						space_below=1
					END
					DEFAULT
					END
				END
				PATCH_IF space_below BEGIN
					SPRINT buffer "%script%"
					FOR (ind=match_index+1;ind<length;++ind) BEGIN
						PATCH_IF "%buffer%" STR_CMP "" BEGIN
							SPRINT this_script $script_array("%ind%")
							SPRINT $script_array("%ind%") "%buffer%"
							PATCH_MATCH "%this_script%" WITH
							"" "none" "null" BEGIN
								SPRINT buffer ""
							END
							DEFAULT
								SPRINT buffer "%this_script%"
							END
						END
					
					END		
				END ELSE BEGIN
					// if there's no space below, there's space above
					SPRINT buffer "%script%"
					FOR (ind=match_index;ind>=0;ind=ind - 1) BEGIN
						PATCH_IF "%buffer%" STR_CMP "" BEGIN
							SPRINT this_script $script_array("%ind%")
							SPRINT $script_array("%ind%") "%buffer%"
							PATCH_MATCH "%this_script%" WITH
							"" "none" "null" BEGIN
								SPRINT buffer ""
							END
							DEFAULT
								SPRINT buffer "%this_script%"
							END
						END				
					END
				END
		
			END
		
		END
		"before .*" BEGIN
			INNER_PATCH "%loc%" BEGIN
				REPLACE_EVALUATE "before \(.*\)" BEGIN
					SPRINT match_script "%MATCH1%"
				END
				""
			END
			// find index of 'match_script'
			match_index="-1"
			PHP_EACH script_array AS ind=>this_script BEGIN
				PATCH_IF "%this_script%" STR_EQ "%match_script%" BEGIN
					match_index=ind
				END
			END
			PATCH_IF match_index<0 BEGIN
				LPF insert_script STR_VAR script_array script loc=low RET_ARRAY script_array END
			END ELSE BEGIN
			// is there room above?
				space_above=0
				FOR (ind=0;ind<=match_index;++ind) BEGIN
					SPRINT this_script $script_array("%ind%")
					PATCH_MATCH "%this_script%" WITH
					"" "none" "null" BEGIN
						space_above=1
					END
					DEFAULT
					END
				END
				PATCH_IF space_above BEGIN
					SPRINT buffer "%script%"
					FOR (ind=match_index - 1;ind>=0;ind=ind - 1) BEGIN
						PATCH_IF "%buffer%" STR_CMP "" BEGIN
							SPRINT this_script $script_array("%ind%")
							SPRINT $script_array("%ind%") "%buffer%"
							PATCH_MATCH "%this_script%" WITH
							"" "none" "null" BEGIN
								SPRINT buffer ""
							END
							DEFAULT
								SPRINT buffer "%this_script%"
							END
						END
					
					END		
				END ELSE BEGIN
					// if there's no space above, there's space below
					SPRINT buffer "%script%"
					FOR (ind=match_index;ind<length;++ind) BEGIN
						PATCH_IF "%buffer%" STR_CMP "" BEGIN
							SPRINT this_script $script_array("%ind%")
							SPRINT $script_array("%ind%") "%buffer%"
							PATCH_MATCH "%this_script%" WITH
							"" "none" "null" BEGIN
								SPRINT buffer ""
							END
							DEFAULT
								SPRINT buffer "%this_script%"
							END
						END				
					END
				END
		
			END
		
		END
		
		
		
		DEFAULT
			PATCH_WARN "unrecognised location %loc% in insert_script"
		END
	END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
document{install}
{
'arguments' (synonym: 'files'; synonym:'file') is a list of files (including extensions) located at the location given by path/location/locbase. Each is copied over to the override;
if any are BAF/D, they are COMPILE EVALUATE_BUFFERred; if they are SSL, they are compiled to BCS; if they are v1 CREs, we run FJ_CRE_EFF_V2 to force V2 effects. 
If none of 'location', 'locbase', and 'path' are set, set location=resource. 
If overwrite=0, don't overwrite already-present files (does not affect scripts).

If 'ext' (legacy synonym: 'postfix') is set, automatically add that file extension (so LAF install STR_VAR files="script1 script2" ext=baf ... END installs script1.baf and script2.baf).

If the argument is 'all', apply to every file at the path. 
If both 'ext' and 'all' are set, apply to every file at the path with that file extension.
}
*/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION install
	INT_VAR overwrite=1//boolean
			inline=0//boolean
	STR_VAR arguments=""
			files=""
			file=""
			location=""
			locbase=""
			path=""
			postfix=""
			ext=""
BEGIN
	OUTER_SPRINT ext "%ext%%postfix%"
	ACTION_IF "%location%%locbase%%path%" STR_EQ "" BEGIN
		OUTER_SPRINT location resource
	END
	ACTION_IF "%files%%file%" STR_CMP "" BEGIN
		OUTER_SPRINT arguments "%files%%file%"
	END
	ACTION_IF inline BEGIN
		OUTER_SPRINT path ".../stratagems-inline"
	END ELSE BEGIN
		LAF sfo_path STR_VAR path location locbase RET path END
	END
	ACTION_IF "%arguments%" STR_EQ "all" BEGIN
		ACTION_IF "%ext%" STR_EQ "" BEGIN
			ACTION_BASH_FOR "%path%" ".*" BEGIN
				LAF install INT_VAR overwrite STR_VAR arguments="%BASH_FOR_FILE%" path END
			END		
		END ELSE BEGIN
			ACTION_BASH_FOR "%path%" ".*\.%ext%" BEGIN
				LAF install INT_VAR overwrite STR_VAR arguments="%BASH_FOR_FILE%" path END
			END			
		END
	END ELSE BEGIN		
		OUTER_WHILE "%arguments%" STR_CMP "" BEGIN
			LAF return_first_entry STR_VAR list="%arguments%" RET file=entry arguments=list END
			LAF sfo_path STR_VAR file path location locbase RET file_path END
			ACTION_IF "%ext%" STR_CMP "" BEGIN
				OUTER_SPRINT file "%file%.%ext%"
				OUTER_SPRINT file_path "%file_path%.%ext%"
			END
			ACTION_MATCH "%file%" WITH
			".*\.\(baf\|d\)" BEGIN
				COMPILE "%file_path%" EVALUATE_BUFFER
			END
			".*\.ssl" BEGIN
				OUTER_PATCH_SAVE script "%file%" BEGIN
					REPLACE_TEXTUALLY "\.ssl" ""
				END
				LAF ssl_to_bcs INT_VAR inline STR_VAR script location locbase path END
			END
			
			DEFAULT
				ACTION_IF overwrite || !FILE_EXISTS_IN_GAME "%file%" BEGIN
					COPY "%file_path%" override
						PATCH_IF "%SOURCE_EXT%" STR_EQ "cre" && BYTE_AT 0x33=0 BEGIN
							LPF FJ_CRE_EFF_V2 END
						END
				END
			END
		END
	END
END



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
document{resolve_splprot_entry}
{
Given 'stat', 'val' (legacy synonym: 'value'), and either 'relation_number' or 'relation', return an appropriate entry in splprot.2da, adding
it if necessary. (see IESDP opcode documentation for opcode 324).</p>

<p>'Relation' can be:
<ul>
<li>'equals'/'equal' (resolves to 1)
<li>'less'/'less_than' (resolves to 2)
<li>'greater'/'greater_than' (resolves to 3)
<li>'less_than_equal'/'less_than_equals'/'less_equal' (resolves to 0)
<li>'greater_equal'/'greater_equals' (resolves to 4)
<li>'not_equal' (resolves to 5)
</ul>

<p>'description', if set, is added to the bare number of a new entry, following the 2.6 EE style. (Existing entries do not gain descriptions.)
}
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_DIMORPHIC_FUNCTION resolve_splprot_entry 
      INT_VAR 	stat=0
				val=0
				value=0
				relation_number=0
      STR_VAR 	relation=""
				description=""
      RET value
BEGIN
      ACTION_IF !(value=0) BEGIN
		OUTER_SET val=value
	  END
      ACTION_MATCH "%relation%" WITH
         equals equal BEGIN 
            OUTER_SET relation_number=1
         END
         greater greater_than BEGIN
            OUTER_SET relation_number=3
         END
         less less_than BEGIN
            OUTER_SET relation_number=2
         END
         greater_equal greater_equals BEGIN
            OUTER_SET relation_number= 4
         END
         less_than_equal less_equal less_than_equals BEGIN
            OUTER_SET relation_number=0
         END
         not_equal BEGIN
            OUTER_SET relation_number=5
         END
         "" BEGIN END
      DEFAULT
         LAF warning STR_VAR warning="unrecognised relation %relation% in resolve_splprot_entry; defaulting to 0" END
         OUTER_SET relation_number=0
      END
      COPY_EXISTING "splprot.2da" override
            READ_2DA_ENTRIES_NOW splprot_array 4
            SET value="-1"
            FOR (i=0;i<splprot_array;i+=1) BEGIN
                   READ_2DA_ENTRY_FORMER splprot_array i 1 this_stat
                   READ_2DA_ENTRY_FORMER splprot_array i 2 this_val
                   READ_2DA_ENTRY_FORMER splprot_array i 3 this_relation
                   PATCH_IF (IS_AN_INT this_stat && IS_AN_INT this_val && IS_AN_INT this_relation) BEGIN
                     PATCH_IF (stat=this_stat && val=this_val && relation_number=this_relation) BEGIN
                      SET value=i
                      SET i=splprot_array
                     END
                   END
            END
            PATCH_IF value<0 BEGIN
				PATCH_IF "%description%" STR_CMP "" BEGIN
					SPRINT row_label "%splprot_array%_%description%"
				END ELSE BEGIN
					SPRINT row_label "%splprot_array%"
				END
               INSERT_2DA_ROW splprot_array 4 "%row_label%%TAB%%stat%%TAB%%val%%TAB%%relation_number%"
               SET value=splprot_array
			   PRETTY_PRINT_2DA
            END
      BUT_ONLY
END

//////////////////////////////////////////////////////////////
/*
document{resolve_statdesc}
{
Adds a new line to statdesc.2da. You need to specify:
- the strref of a string, 'strref' (or you can specify the string
directly, 'string', and it will be added to dialog.tlk)
- the name ('bam') of the bam file to be used for the line. (It can be an in-game file, or
one to be copied over from your mod directory - SFO will see if it exists, and try to copy
it if it doesn't.)
- the location of the bam file, if it is in your mod directory, specified SFO-style via 'location','locbase','path'.
- the actual name to be used for the bam file, 'bam_name'. If you leave it blank, 'bam' will be used instead (always
do this if you are using an in-game file). If you set it to 'auto', a unique name will be auto-generated.

If you set the INT_VAR 'check_first', SFO will first check that line number to see if it exists. If it does, its line will
be returned and no new line will be added; however, the description will be set if it is currently blank.

}
*/
//////////////////////////////////////////////////////////////

DEFINE_DIMORPHIC_FUNCTION resolve_statdesc
	INT_VAR check_first="-1"
			strref="-1"
	STR_VAR string=""
			bam=""
			bam_name=""
			path=""
			location=""
			locbase=""
	RET stat_num
BEGIN
	COPY_EXISTING "statdesc.2da" override
		LPF 2da_read RET_ARRAY array END
		stat_num="-1"
		new="-1"
		PATCH_IF "%string%" STR_CMP "" BEGIN
			strref=RESOLVE_STR_REF ("%string%")
		END
		PATCH_IF VARIABLE_IS_SET $array("%check_first%" DESCRIPTION) BEGIN
			PATCH_IF $array("%check_first%" DESCRIPTION)=strref BEGIN
				stat_num=check_first
				new=0
			END ELSE
			PATCH_IF $array("%check_first%" DESCRIPTION)="-1" BEGIN
				SET $array("%check_first%" DESCRIPTION)=strref	
				stat_num=check_first
				new=1
			END 
		END
		PATCH_IF stat_num<0 BEGIN
			stat_num=200
			WHILE VARIABLE_IS_SET $array("%stat_num%" DESCRIPTION) BEGIN
				++stat_num
			END
			SET $array("%stat_num%" DESCRIPTION)=strref	
			new=1
		END
		PATCH_IF new BEGIN
			PATCH_MATCH "%bam_name%" WITH
			"" BEGIN
				SPRINT bam_name "%bam%"
			END 
			"auto" BEGIN
				n=1
				WHILE FILE_EXISTS_IN_GAME "dwicon%n%.bam" BEGIN
					++n
				END
				SPRINT bam_name "dwicon%n%"
			END
			DEFAULT
			END
			PATCH_IF "%bam%" STR_CMP "****" && !FILE_EXISTS_IN_GAME "%bam%.bam" BEGIN
				LPF sfo_path STR_VAR file="%bam%" location locbase path RET file_path END
				PATCH_IF FILE_EXISTS "%file_path%.bam" BEGIN
				INNER_ACTION BEGIN
					COPY "%file_path%.bam" "override/%bam_name%.bam"
				END
				END ELSE BEGIN
					LPF warning STR_VAR warning="supposed icon BAM file %bam% does not exist at the specified location (%file_path%.bam)" END 
				END
			END
			SPRINT $array("%stat_num%" BAM_FILE) "%bam_name%"
		END
		LPF 2da_write STR_VAR array default="-1" END
	BUT_ONLY
END
			
////////////////////////////////////////////////////////////////////////////////////////////
/* 
document{add_basic_spell_ability}
{
Add a standard (innate) ability to the currently-being-patched spell, assumed to be a blank
freshly-created v1 spell from WEIDU's CREATE command. (For lightweight spell-creation.)
}
*/
////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION add_basic_spell_ability
BEGIN
	PATCH_IF !(BUFFER_LENGTH=0x72) BEGIN
		PATCH_FAIL "add_basic_spell_ability only works on a blank, freshly-created v1 spell"
	END
	INNER_PATCH_SAVE ab_data "" BEGIN
		INSERT_BYTES 0x0 0x28
		WRITE_SHORT 0x0 1
		WRITE_SHORT 0x2 4
		WRITE_BYTE 0xc 1
		WRITE_SHORT 0x22 1
		WRITE_SHORT 0x24 1
		WRITE_SHORT 0x26 1
	END
	WRITE_SHORT 0x68 1
	WRITE_SHORT 0x6a 0x9a
	INSERT_BYTES 0x72 0x28
	WRITE_ASCII 0x72 "%ab_data%"
END

////////////////////////////////////////////////////////////////////////////////////////////
/* 
document{extend}
{
Extend the script(s) 'script' (legacy synonyms: file, files) with 'top' at the top and/or 'bottom' at the bottom. top and bottom location
is specified in the usual SFO way. If inline=1, 'top' and 'bottom' are assumed inlined at .../stratagems-inline

If ssl=1, assume 'top' and 'bottom' are ssl scripts, and pass 'variables' to the SSL parser.
If tv=1, prepend %tutu_var% to each script.
If allow_missing=1, skip silently any missing script (default is to WARN).
}
*/
////////////////////////////////////////////////////////////////////////////////////////////

// note: be careful with variable names here, as they may be exposed in an inline script compilation

DEFINE_ACTION_FUNCTION extend
	INT_VAR inline=0
			ssl=0
			tv=0
			allow_missing=0
	STR_VAR script=""
			files=""
			file=""
			location=""
			locbase=""
			path=""
			top=""
			bottom=""
			variables=""
BEGIN
	OUTER_SPRINT script "%script%%file%%files%"
	ACTION_IF "%script%" STR_CMP "" BEGIN
		LAF return_first_entry STR_VAR list="%script%" RET SFO_script_here=entry script=list END
		ACTION_IF tv BEGIN
			OUTER_SPRINT SFO_script_here "%tutu_var%%SFO_script_here%"
		END
		ACTION_IF FILE_EXISTS_IN_GAME "%SFO_script_here%.bcs" BEGIN
			ACTION_IF "%top%%bottom%" STR_EQ "" BEGIN
				WARN "You called extend with no top or bottom"
			END
			ACTION_IF ssl BEGIN
				ACTION_IF "%top%" STR_CMP "" BEGIN
					LAF ssl_to_baf INT_VAR inline STR_VAR script="%top%" location locbase path variables END
				END
				ACTION_IF "%bottom%" STR_CMP "" BEGIN
					LAF ssl_to_baf INT_VAR inline STR_VAR script="%bottom%" location locbase path variables END
				END
				LAF extend STR_VAR script="%SFO_script_here%" path="%workspace%/ssl_out" top bottom END	
			END ELSE BEGIN		
				ACTION_IF inline BEGIN
					OUTER_SPRINT path ".../stratagems-inline"
				END ELSE BEGIN
					LAF sfo_path STR_VAR path location locbase RET path END
				END
				ACTION_IF "%top%" STR_CMP "" BEGIN
					EXTEND_TOP "%SFO_script_here%.bcs" "%path%/%top%.baf" EVALUATE_BUFFER
				END
				ACTION_IF "%bottom%" STR_CMP "" BEGIN
					EXTEND_BOTTOM "%SFO_script_here%.bcs" "%path%/%bottom%.baf" EVALUATE_BUFFER
				END		
			END
		END ELSE 
		ACTION_IF !allow_missing BEGIN
			WARN "WARNING (extend): tried to extend script %SFO_script_here%, but it does not exist" 
		END
		// recurse
		LAF extend INT_VAR inline ssl tv allow_missing STR_VAR script location locbase path top bottom END
	END
	
END
	
////////////////////////////////////////////////////////////////////////////////////////////
/* 
document{extend_area_script}
{
Extend the area script of area 'area' with 'top' at the top and/or 'bottom' at the bottom. If the script doesn't exist, we create one, using standard conventions.
'area' can be a list of areas, in which case each one is extended.
}
*/
////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_DIMORPHIC_FUNCTION extend_area_script
	INT_VAR inline=0
			ssl=0
	STR_VAR area=""
			location=""
			locbase=""
			path=""
			top=""
			bottom=""
			variables=""
BEGIN
	ACTION_IF "%area%" STR_CMP "" BEGIN
		LAF return_first_entry STR_VAR list="%area%" RET area_here=entry area=list END
		ACTION_IF "%top%%bottom%" STR_EQ "" BEGIN
			WARN "You called extend_area_script with no top or bottom"
		END
		COPY_EXISTING "%area_here%.are" override
			READ_ASCII 0x94 script
			PATCH_IF "%script%" STR_EQ "" BEGIN
				PATCH_MATCH "%area_here%" WITH 
				"_AR+" BEGIN
					INNER_PATCH_SAVE script "%area_here%" BEGIN
						REPLACE_TEXTUALLY CASE_INSENSITIVE "_AR" "FW"
					END
				END
				DEFAULT
					SPRINT script "%area_here%"
				END
				WRITE_ASCII 0x94 "%script%"
			END
		ACTION_IF !FILE_EXISTS_IN_GAME "%script%.bcs" BEGIN
			COPY ".../stratagems-inline/blank" "override/%script%.bcs" COMPILE_BAF_TO_BCS
		END
		LAF extend INT_VAR inline ssl STR_VAR script location locbase path top bottom variables END
		LAF extend_area_script INT_VAR inline STR_VAR area location locbase path top bottom variables END
	END
END

/*


document{copy_item_to_spell}
{
Take ability 'abil_ind' (default=0) from item 'item'. Build a new spell, 'spell', that casts that ability as its only ability.
}

*/

DEFINE_ACTION_FUNCTION copy_item_to_spell
         INT_VAR abil_ind=0
         STR_VAR item=""
                 spell=""
BEGIN
         // make a new spell
		 CREATE spl "%spell%"
         // add the labelled ability of the item, and the effects, to the spell
         COPY_EXISTING ~%item%.itm~ ~override~
           READ_ASCII ((LONG_AT 0x64) + 0x38 * abil_ind) ability (0x38)
           SET offset=LONG_AT 0x64
           READ_SHORT 0x72 type
           INNER_PATCH_SAVE ability ~%ability%~ BEGIN
             WRITE_BYTE 0x2 4 // innate slots
             WRITE_BYTE 0x1 0
             WRITE_SHORT 0x10 1 // min level
             DELETE_BYTES 0x26 0x4
             DELETE_BYTES 0x28 0xc
             READ_SHORT 0x1e eff_num
             READ_SHORT 0x20 eff_ind
             WRITE_SHORT 0x20 0
             READ_SHORT 0x26 proj
             PATCH_IF proj>1 BEGIN
                WRITE_BYTE 0x0 2
             END ELSE BEGIN
                WRITE_BYTE 0x0 1
             END
           END
           SET eff_length=0x30*eff_num
           READ_ASCII ((LONG_AT 0x6a) + 0x30*eff_ind) effects (eff_length)
           INNER_ACTION BEGIN
                COPY_EXISTING ~%spell%.spl~ ~override~
                     INSERT_BYTES (LONG_AT 0x64) 0x28
                     WRITE_ASCIIE (LONG_AT 0x64) ~%ability%~
                     WRITE_SHORT 0x68 1
                     WRITE_LONG 0x6a ((LONG_AT 0x6a) + 0x28)
                     INSERT_BYTES (LONG_AT 0x6a) ~eff_length~
                     WRITE_ASCIIE (LONG_AT 0x6a) ~%effects%~
                BUT_ONLY
           END
         BUT_ONLY
END

///////////////////////////////////////////////////////////////////////////////
/*

document{add_silent_sectype}
{
Add a sectype with no associated string. The sectype to be added is specified by the STR_VAR 'sectype'
(synonym: 'arguments') and its numerical value is returned as 'sectype_value' (synonym: 'value').

OBSOLETE: use resolve_sectype instead
}
*/
////////////////////////////////////////////////////////////////////////////////

DEFINE_DIMORPHIC_FUNCTION add_silent_sectype
   STR_VAR sectype=""
			arguments=""
   RET sectype_value
		value
BEGIN
	OUTER_SPRINT sectype "%sectype%%arguments%"
   ADD_SECTYPE "%sectype%" ""
   OUTER_SET sectype_value="%sectype%"
   OUTER_SET value=sectype_value
   COPY_EXISTING "msectype.2da" override
       REPLACE_TEXTUALLY "%sectype%\( \|%TAB%\)+[0-9]+\(%WNL%\|%LNL%\|%MNL%\)" "%sectype% -1"
   BUT_ONLY
END

///////////////////////////////////////////////////////////////////////////////
/*

document{resolve_sectype}
{
Given a sectype 'sectype' (synonym: 'arguments') and associated string (STR_VAR 'string') or tlk entry (INT_VAR 'strref'), 
check if the sectype is already present. If it is, set its string to the specified string. If it isn't, add it, 
with that string. Either way, return its value as 'sectype_value' (synonym: 'value').

If both the strref and string are specified, default to the string (and log a warning). If string is "" (the default), use strref=-1 rather 
than an actual blank string.

}
*/
////////////////////////////////////////////////////////////////////////////////

DEFINE_DIMORPHIC_FUNCTION resolve_sectype
	INT_VAR strref="-1"
	STR_VAR sectype=""
			arguments=""
			string=""
	RET sectype_value
		value
BEGIN
	COPY_EXISTING msectype.2da override
		SPRINT sectype "%sectype%%arguments%"
		PATCH_IF "%string%" STR_CMP "" BEGIN
			PATCH_IF strref>=0 BEGIN
				LPF warn STR_VAR warning="resolve_sectype warning: both string and strref were specified" END
			END
			strref=RESOLVE_STR_REF ("%string%")
		END 
		READ_2DA_ENTRIES_NOW msectype_data 2
		sectype_value="-1"
		FOR (row=0;row<msectype_data;++row) BEGIN
			READ_2DA_ENTRY_FORMER msectype_data row 0 sectype_here
			PATCH_IF "%sectype_here%" STR_EQ "%sectype%" BEGIN
				READ_2DA_ENTRY_FORMER msectype_data row 1 strref_here
				PATCH_IF !(strref=strref_here) BEGIN
					SET_2DA_ENTRY row 1 2 "%strref%"
				END
				sectype_value=row - 1
				row=msectype_data
			END
		END
	BUT_ONLY
	ACTION_IF sectype_value<0 BEGIN
		APPEND "msectype.2da" "%sectype% %strref%"
		OUTER_SET sectype_value=msectype_data - 1
	END
	OUTER_SET value=sectype_value
END

///////////////////////////////////////////////////////////////////////////////
/*

document{resolve_dv}
{
Given a creature's file resref, returns the scriptname (death variable) of the creature. If it has none, assign it one.
By default, the assigned scriptname is its resref; you can override this by setting 'default'.
}
*/
////////////////////////////////////////////////////////////////////////////////

DEFINE_DIMORPHIC_FUNCTION resolve_dv
	STR_VAR creature=""
			default=""
	RET dv
BEGIN
	ACTION_IF "%default%" STR_EQ "" BEGIN
		OUTER_SPRINT default "%creature%"
		ACTION_TO_LOWER default
	END
	ACTION_IF FILE_EXISTS_IN_GAME "%creature%.cre" BEGIN
		COPY_EXISTING 
			"%creature%.cre" override
				READ_ASCII DEATHVAR dv (0x20) NULL
				TO_LOWER dv
				PATCH_MATCH "%dv%" WITH
				"none" "null" "" BEGIN
					SPRINT dv "%default%"
					WRITE_ASCII DEATHVAR "%dv%"
				END

				DEFAULT
				END
	END ELSE BEGIN
		WARN "resolve_scriptname: no creature %creature%"
		OUTER_SPRINT dv ""
	END	
END



///////////////////////////////////////////////////////////////////////////////
/*

document{add_to_lua_lang}
{
Given a k=>v array 'array' with entries like MY_TEXT_STRING=>1234, go through each 
entry, and for each, get the string with tra ref 1234 in the current tra file and
set TEXT_STRING equal to it in the current EE language file (e.g., en_us.lua).</p>

<p>Exits with a warning if not on EE.

}
*/
////////////////////////////////////////////////////////////////////////////////


DEFINE_DIMORPHIC_FUNCTION add_to_lua_lang
	STR_VAR array=""//array
BEGIN

	ACTION_IF enhanced_edition BEGIN
		OUTER_SPRINT to_add ""
		COPY_EXISTING "L_%EE_LANGUAGE%.lua" override
		   PHP_EACH "%array%" AS key=>value BEGIN
			  SPRINT string (AT value)
			  PATCH_IF INDEX_BUFFER ("%key%")>=0 BEGIN
				REPLACE_TEXTUALLY ~%key% *=.*~ ~%key% = "%string%",~
			  END ELSE BEGIN
				SPRINT to_add ~%to_add%%TAB%%key% = "%string%",%WNL%~
			  END
		   END
		   PATCH_IF  "%to_add%" STR_CMP "" BEGIN
			REPLACE_TEXTUALLY "}"  "%to_add%%WNL%}"
		END
    BUT_ONLY
	END ELSE BEGIN
		WARN "add_to_lua_lang function only works on EE installs"
	END
	
	
END

///////////////////////////////////////////////////////////////////////////////
/*

document{all_to_utf8}
{
Given the (full) path to your tra files (default: %MOD_FOLDER%/lang), convert
all the files in all languages to (lowercased) UTF-8, leaving no detritus (no
fl#utf files). If permanent=1, will persist through uninstall.
}
*/
////////////////////////////////////////////////////////////////////////////////


DEFINE_ACTION_FUNCTION all_to_utf8
	INT_VAR permanent=0//boolean
	STR_VAR tra_path="%MOD_FOLDER%/lang"
BEGIN
	// get all languages
	GET_DIRECTORY_ARRAY lang_dir_array "%tra_path%" "[a-z0-9_]+"
	ACTION_PHP_EACH lang_dir_array AS int=>dir BEGIN
		OUTER_PATCH "%dir%" BEGIN
			REPLACE_EVALUATE "\([0-9a-z-_]+\)$" BEGIN
				PATCH_IF !("%MATCH1%" STR_EQ "iconv") BEGIN
					SPRINT $lang_array("%MATCH1%") ""
				END
			END
			""
		END
	END
	// process them
	ACTION_PHP_EACH lang_array AS language=>discard BEGIN
		//do the conversion
		LAF HANDLE_CHARSETS 
			INT_VAR from_utf8=0 infer_charsets=1 
			STR_VAR default_language="" language tra_path out_path="weidu_external/workspace"
		END
		// copy the files back (enforcing lowercase)
		ACTION_BASH_FOR "%tra_path%/%language%" ".*\.tra$" BEGIN
			OUTER_SPRINT name "%BASH_FOR_FILE%"
			ACTION_TO_LOWER name
			ACTION_IF permanent BEGIN
				COPY + "weidu_external/workspace/%language%/%BASH_FOR_FILE%" "%tra_path%/%language%/%name%"			
			END ELSE BEGIN
				COPY "weidu_external/workspace/%language%/%BASH_FOR_FILE%" "%tra_path%/%language%/%name%"
			END
		END		
	END
END

///////////////////////////////////////////////////////////////////////////////
/*

document{handle_unusable}
{
Take as input a string, assumed to be an item description. If on EE, remove the 'not usable by:' bit.
}
*/
////////////////////////////////////////////////////////////////////////////////

DEFINE_DIMORPHIC_FUNCTION handle_unusable
	STR_VAR arguments=""
	RET value
BEGIN
	ACTION_IF enhanced_edition BEGIN
		OUTER_SET strref=is_iwd?34753:is_bg2?74251:31522
		ACTION_GET_STRREF strref unusable_string
		OUTER_PATCH_SAVE value "%arguments%" BEGIN
			index=INDEX_BUFFER ("%unusable_string%")
			DELETE_BYTES index (BUFFER_LENGTH - index)
		END
	END ELSE BEGIN
		OUTER_SPRINT value "%arguments%"
	END
END
