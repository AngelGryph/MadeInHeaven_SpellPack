DEFINE_ACTION_FUNCTION ui_bonus_spells_setup
BEGIN
	LAF ui_detect_class_kit END
	ACTION_IF !FILE_EXISTS_IN_GAME "m_dw_bsf.lua" BEGIN
		// install functions
		COPY ".../stratagems-inline/m_dw_bsf.lua" override
		// install data template
		COPY ".../stratagems-inline/m_dw_bsd.lua" override
		// edit menu
		COPY_EXISTING "ui.menu" override
			LPF UI_alter_object STR_VAR object=CHARGEN_CHOOSE_SPELLS object_type=menu patch=bonus_spells_edit END
		BUT_ONLY
		// wipe autopick
		COPY_EXISTING
			"splautop.2da" override
			"splautos.2da" override
				REPLACE_TEXTUALLY "PICK[0-9].*" ""
			IF_EXISTS

	END
END

/*
document{assign_bonus_spells}
{
Given kit 'kit, and a space-separated list of spells 'spells' and/or a k=>_ array of spells 'spell_array', grant those spells as bonus
learned spells at the appropriate level, making appropriate LUA and CLAB changes to do so.</p>

<p>Spells can be given as bare resrefs, or as spell.ids entries, or as dw_ext_spell.ids entries, or as abbreviated entries (i.e., with the 'WIZARD_' or 'CLERIC_' 
preamble stripped (if ambiguous, we assume WIZARD). Spells of the wrong type (i.e. cleric spells for wizards, or vice versa) are autoconverted to the appropriate type using the lib_splconv
library.</p>

<p>Multiclass kits can be handled, but only if they're in SFO format and only on a full sfo install (we use lib_kit functionality). The parent class can normally be inferred; if
you are adding bonus spells to a cleric/mage, you need to specify 'class' explicitly as cleric or mage.</p>

<p>The function will attempt to update the kit description (you can tell it not to by setting update_description=0). It needs to be given a tra file and a tra path; the defaults
point to lua/lang and to sfo-lua's default tra file. (Look at that file for format if you want to do your own.) The same tra file is also passed to the splconv function to make
any cleric->wizard and wizard->cleric conversion descriptions.

If you set skip_clab to 1, the new spells are added to the LUA and the kit description, but not to the CLAB. (This is useful if you're cloning an existing kit.)
}
*/

// As originally written this function added the spells directly through GA_ if there was only one per level and the kit is single-classed. But it turns out that deletes already-memorized spells.
// Leaving the code in here just in case I find a workaround.

DEFINE_ACTION_FUNCTION assign_bonus_spells
	INT_VAR update_description=1//boolean
			skip_clab=0//boolean
	STR_VAR class=""
			kit=""
			spells=""
			spell_array=""
			tra="sfo_lua"
			tra_path="DEFAULT"
BEGIN
	ACTION_IF !VARIABLE_IS_SET lua_loc BEGIN
		OUTER_SPRINT lua_loc lua
	END
	ACTION_IF "%tra_path%" STR_EQ "DEFAULT" BEGIN
		OUTER_SPRINT tra_path "%MOD_FOLDER%/%lua_loc%/lang"
	END
	LAF ui_bonus_spells_setup END
	ACTION_IF "%kit%" STR_EQ "" BEGIN
		FAIL "assign_bonus_spells needs 'kit' as argument"
	END
	// find parent class and kit id
	COPY_EXISTING - "kitlist.2da" nowhere
		COUNT_2DA_COLS colcount
		READ_2DA_ENTRIES_NOW kitlist_data colcount
		kit_id="-1"
		FOR (row=0;row<kitlist_data;++row) BEGIN
			READ_2DA_ENTRY_FORMER kitlist_data row 1 name
			PATCH_IF "%name%" STR_EQ "%kit%" BEGIN
				kit_id=row
				READ_2DA_ENTRY_FORMER kitlist_data row 5 clab
				READ_2DA_ENTRY_FORMER kitlist_data row 4 desc_strref
				READ_2DA_ENTRY_FORMER kitlist_data row 8 class_id
				LOOKUP_IDS_SYMBOL_OF_INT kit_class class class_id
				row=kitlist_data
			END
		END
		PATCH_IF INDEX ("_" "%kit_class%")>=0 BEGIN //multiclass
			PATCH_IF "%class%" STR_EQ "" BEGIN
				PATCH_MATCH "%kit_class%" WITH
				CLERIC_MAGE BEGIN
					PATCH_FAIL "assign_bonus_spells: you are trying to assign bonus spells (%spells%) to %kit%, a cleric/mage kit, but you haven't specified class explicitly."
				END
				".*CLERIC.*" BEGIN
					SPRINT class cleric
				END
				".*DRUID.*" BEGIN
					SPRINT class druid
				END
				".*MAGE.*" BEGIN
					SPRINT class mage
				END
				DEFAULT
					PATCH_FAIL "assign_bonus_spells: you are trying to assign bonus spells to %kit%, which has parent class %kit_class%, but that class doesn't permit bonus spells."
				END
			END
			gate_by_kit=1
			PATCH_MATCH "%class%" WITH
			cleric BEGIN
				SPRINT clab CLABPR01
			END
			mage BEGIN
				SPRINT clab CLABMA01
			END
			druid BEGIN
				SPRINT clab CLABDR01
			END
			DEFAULT
				PATCH_FAIL "assign_bonus_spells: class is %class%, which is not a legal bonus-spell class for a multiclassed kit"
			END
		END ELSE BEGIN
			SPRINT class "%kit_class%"
			TO_LOWER class
		    gate_by_kit=0 
		END
		PATCH_IF kit_id<0 BEGIN
			PATCH_FAIL "assign_bonus_spells: kit %kit% is not a recognized kit"
		END
	BUT_ONLY	
	// find the spell type
	ACTION_MATCH "%class%" WITH
	SHAMAN DRUID CLERIC PALADIN RANGER BEGIN
		OUTER_SPRINT new_type priest
		OUTER_SPRINT cleric_label ",cleric=true"
	END
	MAGE SORCERER BARD BEGIN
		OUTER_SPRINT new_type wizard
		OUTER_SPRINT cleric_label ""
	END
	DEFAULT
		FAIL "class %class% cannot receive bonus spells"
	END
	
	// get an array of spell_resref=>level
	ACTION_CLEAR_ARRAY working_array
	OUTER_FOR (level=1;level<=9;++level) BEGIN
		OUTER_SET $level_count("%level%")=0
	END
	ACTION_PHP_EACH "%spell_array%" AS spell=>discard BEGIN
		LAF bonus_spell_data_helper STR_VAR spell RET resref level RET_ARRAY splconv_array END
		OUTER_SET $working_array("%resref%")=level
		OUTER_SET $level_count("%level%")+=1
	END
	OUTER_PATCH "%spells% " BEGIN
		REPLACE_EVALUATE "\([^ ]+\) +" BEGIN
			LPF bonus_spell_data_helper STR_VAR spell="%MATCH1%" RET resref level RET_ARRAY splconv_array END
			SET $working_array("%resref%")=level
			SET $level_count("%level%")+=1
		END
		""
	END
	// log them in the lua data; list names for the kit description
	OUTER_SPRINT data ""
	OUTER_SPRINT data2 ""
	OUTER_SPRINT bonus_desc ""
	COPY_EXISTING - "m_dw_bsd.lua" nowhere
		PHP_EACH working_array AS resref=>level BEGIN
			SPRINT data2 ~%data2%%TAB%["%resref%"]=true,%WNL%~
			INNER_ACTION BEGIN
				COPY_EXISTING - "%resref%.spl" nowhere
					READ_LONG 0x8 name
					READ_LONG 0x34 level
					level_tra=110+level
					PATCH_WITH_TRA "%tra_path%/english/%tra%.tra" "%tra_path%/%LANGUAGE%/%tra%.tra" BEGIN
						SPRINT level_string (AT level_tra)
						READ_STRREF 0x8 name_string
						SPRINT name_string "%name_string% (%level_string%)"
						PATCH_IF "%bonus_desc%" STR_EQ "" BEGIN
							SPRINT bonus_desc "%name_string%"
						END ELSE BEGIN
							SPRINT bonus_desc "%bonus_desc%, %name_string%"
						END
						READ_LONG 0x50 desc
						READ_ASCII 0x3a icon
						GET_OFFSET_ARRAY ab_arr SPL_V10_HEADERS
						PATCH_IF VARIABLE_IS_SET $ab_arr(0) BEGIN
							READ_ASCII (ab_arr_0 + 4) groundicon
						END ELSE BEGIN
							SPRINT groundicon "SPWI101C"
						END
					END
			END
			PATCH_IF INDEX_BUFFER ("dwBonusSpellData\['%resref%'\]")<0 BEGIN
				SPRINT data "%data%dwBonusSpellData['%resref%']={level=%level%, name=%name%, desc=%desc%, icon='%icon%', groundicon='%groundicon%'%cleric_label%}%WNL%"
			END		
		END
	ACTION_IF RESOURCE_CONTAINS "m_dw_bsd.lua" "dwBonusSpellAllocationKit\[%kit_id%\]={" BEGIN
		APPEND "m_dw_bsd.lua" "%data%%WNL%" KEEP_CRLF
		COPY_EXISTING "m_dw_bsd.lua" override
			REPLACE_TEXTUALLY "dwBonusSpellAllocationKit\[%kit_id%\]={%WNL%" "dwBonusSpellAllocationKit[%kit_id%]={%WNL%%data2%" 
	END ELSE BEGIN
		APPEND "m_dw_bsd.lua" "%data%%WNL%dwBonusSpellAllocationKit[%kit_id%]={%WNL%%data2%}" KEEP_CRLF
	END	
	// put the granting spells in the CLAB
	LAM data_spells_by_level
	OUTER_SPRINT string ""
	ACTION_PHP_EACH working_array AS resref=>level BEGIN
		LAF resolve_bonus_granting_spell STR_VAR resref RET grant_resref END
		// insurance
		ACTION_TO_LOWER class
		OUTER_SET caster_level="sfo_spell_level_sl_to_cl_%class%_%level%"
		ACTION_IF "%string%" STR_EQ "" BEGIN
			OUTER_SPRINT string "%grant_resref% %caster_level%"
		END ELSE BEGIN
			OUTER_SPRINT string "%string%,%grant_resref% %caster_level%"
		END
	END
	ACTION_IF !skip_clab BEGIN
		ACTION_IF gate_by_kit BEGIN
			LAF kit_edit INT_VAR clab_only=1 STR_VAR kit edits="k.kit_apply_powers{%string%|class=%class%}" END
		END ELSE BEGIN
			LAF kit_edit INT_VAR clab_only=1 STR_VAR kit edits="k.kit_apply_powers{%string%}" END		
		END
	END	
	// update the kit description
	ACTION_IF update_description BEGIN
		WITH_TRA "%tra_path%/english/%tra%.tra" "%tra_path%/%LANGUAGE%/%tra%.tra" BEGIN

			ACTION_GET_STRREF desc_strref desc
			ACTION_MATCH "%class%" WITH
			CLERIC DRUID PALADIN RANGER BEGIN
				OUTER_SPRINT preamble @130	
			END
			SHAMAN SORCERER BEGIN
				OUTER_SPRINT preamble @131
			END
			MAGE BARD BEGIN
				OUTER_SPRINT preamble @132
			END
			DEFAULT
				FAIL "assign_bonus_spells: this shouldn't happen"
			END
			OUTER_SPRINT new_line "%preamble% %bonus_desc%."
			OUTER_PATCH_SAVE desc "%desc%" BEGIN
				PATCH_IF INDEX ("BONUS_SPELL_PLACEHOLDER" "%desc%") >=0 BEGIN
					REPLACE_TEXTUALLY "BONUS_SPELL_PLACEHOLDER" "%new_line%"
				END ELSE 
				PATCH_IF INDEX ("MAGE_SPELL_PLACEHOLDER" "%desc%") >=0 BEGIN
					REPLACE_TEXTUALLY "MAGE_SPELL_PLACEHOLDER" "%new_line%"				
				END ELSE BEGIN
					SPRINT adv_line @120
					REPLACE_TEXTUALLY 
						"^\(%adv_line%.*[%WNL%%LNL%%MNL%]\)\([^A-Za-z0-9]+\)\([A-Za-z0-9].*\)"
						"%adv_line%%WNL%\2%new_line%%WNL%\2\3"			
				END
			END
			STRING_SET_EVALUATE desc_strref "%desc%"
		END
	END

END

DEFINE_DIMORPHIC_FUNCTION bonus_spell_data_helper//internal
	STR_VAR spell=""
	RET resref level
	RET_ARRAY splconv_array
BEGIN
	LAF splconv STR_VAR spell new_type tra tra_path RET resref=new_resref RET_ARRAY splconv_array END
	OUTER_SET level="-1"
	OUTER_PATCH "%resref%" BEGIN
		REPLACE_EVALUATE "\(SPWI\|SPPR\|DWWP\|DWPW\)\([1-9]\)" BEGIN
			level="%MATCH2%"
		END
		""
	END
	ACTION_IF level<0 BEGIN
		COPY_EXISTING - "%resref%.spl" nowhere
			READ_LONG 0x34 level
	END
	ACTION_IF !FILE_EXISTS_IN_GAME "%resref%.spl" BEGIN
		LAF warning STR_VAR warning="bonus_spell_data_helper: spell %resref% does not exist" END
	END
END

DEFINE_DIMORPHIC_FUNCTION resolve_bonus_granting_spell INT_VAR level=0 STR_VAR resref="" RET grant_resref BEGIN
	ACTION_DEFINE_ASSOCIATIVE_ARRAY bonus_letter BEGIN
		SPWI=>w
		SPPR=>p
		SPIN=>i
		DWWP=>q
		DWPW=>x
		DWWI=>y
		DWPI=>r
	END
	OUTER_PATCH "%resref%" BEGIN
		SPRINT grant_resref "null"
		REPLACE_EVALUATE "\(SPWI\|SPPR\|SPIN\|DWWP\|DWPW\|DWWI\|DWPI\)\([0-9][0-9a-z][0-9a-z]\)" BEGIN
			SPRINT prefix "%MATCH1%"
			TO_UPPER prefix
			SPRINT letter $bonus_letter("%prefix%") 
			SPRINT grant_resref "dwg%letter%%MATCH2%"
		END
		""
	END
	ACTION_IF "%grant_resref%" STR_EQ "null" BEGIN
		OUTER_FOR (n=1;n<1000;++n) BEGIN
			ACTION_IF n<10 BEGIN
				OUTER_SPRINT grant_resref "DWGS00%n%"
			END ELSE
			ACTION_IF n<100 BEGIN
				OUTER_SPRINT grant_resref "DWGS0%n%"		
			END ELSE BEGIN
				OUTER_SPRINT grant_resref "DWGS%n%"
			END
			OUTER_SET proceed=1
			ACTION_IF FILE_EXISTS_IN_GAME "%grant_resref%.spl" BEGIN
				OUTER_SET proceed=0
			END
			ACTION_IF proceed BEGIN
				OUTER_SET n=1000
			END
		END
		// sanity check
		ACTION_IF "%grant_resref%" STR_EQ "null" BEGIN
			FAIL "assign_bonus_spells: cannot assign more than 999(!) non-standard bonus spells"
		END
	END
	ACTION_IF !FILE_EXISTS_IN_GAME "%grant_resref%.spl" BEGIN
		// make the spell
		CREATE spl "%grant_resref%"
			LPF spl_basic_ability_localcopy END
			LPF ADD_SPELL_EFFECT INT_VAR opcode=171 target=2 timing=1 STR_VAR resource="%resref%" END
	END
	




END

/*

document{bonus_spells_from_list}
{
Loads the file in 'path' (which should be a 2-column table - the first column is conventionally a level, but need not be).
Go through the entries in the second column. Each is a |-separated list of spell ids entries (possibly including extended-namespace
ids). Assign the first entry in each column that actually exists as an installed spell as a bonus spell to the kit 'kit'. 

}


*/

DEFINE_ACTION_FUNCTION bonus_spells_from_list 
	INT_VAR skip_clab=0//boolean
			update_description=1
	STR_VAR kit=""
			path=""
			class=""
BEGIN

	COPY - "%path%" nowhere
		READ_2DA_ENTRIES_NOW ext_spell_array 2
		FOR (row=0;row<ext_spell_array;++row) BEGIN
			READ_2DA_ENTRY_FORMER ext_spell_array row 0 level
			READ_2DA_ENTRY_FORMER ext_spell_array row 1 list
			SPRINT $bonus_array("%level%") "%list%"
		END
	BUT_ONLY
	OUTER_SPRINT spells ""
	ACTION_PHP_EACH bonus_array AS level=>list BEGIN
		OUTER_SET found_spell=0
		OUTER_WHILE (!found_spell && "%list%" STR_CMP "") BEGIN
			LAF return_first_entry STR_VAR list separator="|" RET entry list END
			ACTION_IF VARIABLE_IS_SET "WIZARD_%entry%" BEGIN
				OUTER_SPRINT resref EVAL "%WIZARD_%entry%%"
				ACTION_IF FILE_EXISTS_IN_GAME "%resref%.spl" BEGIN
					OUTER_SET found_spell=1
					OUTER_SPRINT spells "%spells% %resref%"
				END
			END
		END
	END
	LAF assign_bonus_spells INT_VAR skip_clab update_description STR_VAR class kit spells END



END


DEFINE_PATCH_FUNCTION bonus_spells_edit//internal
BEGIN
	REPLACE_TEXTUALLY "\([ %TAB%]*\)table\.sort(chargen\.choose_spell, sortBySpellName)" "\1dwMarkBonusSpellsKnown()%WNL%\1table.sort(chargen.choose_spell, sortBySpellName)"
END

<<<<<<<<.../stratagems-inline/m_dw_bsd.lua

dwBonusSpellData={}
dwBonusSpellAllocationKit={}

>>>>>>>>

<<<<<<<<.../stratagems-inline/m_dw_bsf.lua

function dwMarkBonusSpellsKnown()
	class,kit=dwFindClassKit()
	bonus_list=dwBonusSpellAllocationKit[kit]
	if not (bonus_list) then 
		return 
	end
	-- get any new spells into the table
	for resref,_ in pairs (bonus_list) do
		data=dwBonusSpellData[resref]
		if ((data.level==chargen.currentSpellLevelChoice) and not spellBook[chargen.currentSpellLevelChoice][resref] and not ((class==14 or class==17) and data.cleric)) then
			table.insert(chargen.choose_spell,{enabled=false,key=resref})
			spellBook[chargen.currentSpellLevelChoice][resref]={name=data.name,desc=data.desc,icon=data.icon,groundicon=data.groundicon,autopick=false,hidden=false,resref=resref}
		end	
	end
	-- mark all as known
	for k,v in pairs (chargen.choose_spell) do
		if (bonus_list[v.key]) then
			chargen.choose_spell[k].known=true
			spellBook[chargen.currentSpellLevelChoice][v.key].known=true
		end
	end
end
>>>>>>>>






/// local copies of functions

DEFINE_PATCH_FUNCTION spl_basic_ability_localcopy//internal
BEGIN
	PATCH_IF !(BUFFER_LENGTH=0x72) BEGIN
		PATCH_FAIL "spl_basic_ability only works on a blank, freshly-created v1 spell"
	END
	INNER_PATCH_SAVE ab_data "" BEGIN
		INSERT_BYTES 0x0 0x28
		WRITE_SHORT 0x0 1
		WRITE_SHORT 0x2 4
		WRITE_BYTE 0xc 1
		WRITE_SHORT 0x22 1
		WRITE_SHORT 0x24 1
		WRITE_SHORT 0x26 1
	END
	WRITE_SHORT 0x68 1
	WRITE_SHORT 0x6a 0x9a
	INSERT_BYTES 0x72 0x28
	WRITE_ASCII 0x72 "%ab_data%"
END
