////////////////////////////////////////////////////////////////
/// shared setup
////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION set_up_externalized_proficiencies BEGIN

	// have we done it already?
	
	ACTION_IF !FILE_EXISTS_IN_GAME "m_dw_epf.lua" BEGIN
	
		// install class/kit detection
		
		LAF ui_detect_class_kit END
	
		// copy over functions
	
		LAF check_ini INT_VAR silent=1 STR_VAR ini=discard_stat RET discard_stat=value END
		OUTER_SET discard_stat=(discard_stat=0)?125:discard_stat
		COPY ".../stratagems-inline/m_dw_epf.lua" override EVALUATE_BUFFER
		
		// set up main data page
	
		COPY ".../stratagems-inline/m_dw_epd.lua" override
	
		// patch UI
		
		COPY_EXISTING "ui.menu" override
			LPF UI_alter_object STR_VAR object=CHARGEN_PROFICIENCIES object_type=menu patch=externalize_prof_patch END
			LPF UI_alter_object STR_VAR object=LEVELUP_PROFICIENCIES object_type=menu patch=externalize_prof_patch END
		BUT_ONLY
		
	END

END

////////////////////////////////////////////////////////////////
/// externalize the max number of profs
////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION externalize_profsmax BEGIN

	LAF set_up_externalized_proficiencies END

	// locate the real prof.2da
	ACTION_IF !FILE_EXISTS "%data_loc_shared%/profs.2da" BEGIN
		COPY_EXISTING "profs.2da" override
		OUTER_SPRINT profs_path "override/profs.2da"
	END ELSE BEGIN
		OUTER_SPRINT profs_path "%data_loc_shared%/profs.2da"
	END
	
	
	// get proficiency data

	COPY "%profs_path%" "%workspace%"
		COUNT_2DA_COLS colcount
		COUNT_2DA_ROWS colcount rowcount
		FOR (row=0;row<rowcount;++row) BEGIN
			READ_2DA_ENTRY row 0 colcount class
			READ_2DA_ENTRY row 1 colcount profnum
			PATCH_IF IS_AN_INT profnum BEGIN
				class_id=IDS_OF_SYMBOL (class "%class%")
				SET $profs("%class_id%")=profnum
			END
		END
	BUT_ONLY
	
	// install the data
	
	COPY_EXISTING "m_dw_epd.lua" "override"
		REPLACE_TEXTUALLY "dwProfMaxByClass={[^}]*}" ""
	BUT_ONLY
	
	APPEND "m_dw_epd.lua" "dwProfMaxByClass={"
	ACTION_PHP_EACH profs AS id=>num BEGIN
		APPEND "m_dw_epd.lua" "%TAB%[%id%]=%num%," KEEP_CRLF
	END
	APPEND "m_dw_epd.lua" "}%WNL%"

	// back up and blank the existing profsmax file
	
	COPY_EXISTING profsmax.2da "%data_loc_shared%"
	COPY_EXISTING profsmax.2da override
		COUNT_2DA_COLS colcount
		COUNT_2DA_ROWS colcount rowcount
		FOR (row=0;row<rowcount;++row) BEGIN
			FOR (col=0;col<colcount;++col) BEGIN
				READ_2DA_ENTRY row col colcount data
				PATCH_IF IS_AN_INT data BEGIN
					SET_2DA_ENTRY row col colcount 99
				END
			END
		END 
	BUT_ONLY

END

////////////////////////////////////////////////////////////////
/// externalize the main weapprof table
////////////////////////////////////////////////////////////////


DEFINE_ACTION_FUNCTION externalize_weapprof BEGIN

	LAF set_up_externalized_proficiencies END

	// build a discard stat
	
	LAF check_label STR_VAR label=dw-set-up-discard-stat RET value END
	ACTION_IF !value BEGIN
		LAF make_label STR_VAR label=dw-set-up-discard-stat END
		LAF check_ini INT_VAR silent=1 STR_VAR ini=discard_stat RET stat=value END
		OUTER_SET stat=(stat=0)?125:stat
		LAF set_signalling_stat INT_VAR stat END
	END

	// locate the real weapprof.2da
	
	ACTION_IF !FILE_EXISTS "%data_loc_shared%/weapprof.2da" BEGIN
		COPY_EXISTING weapprof.2da "%data_loc_shared%"
	END ELSE BEGIN
		COPY "%data_loc_shared%/weapprof.2da" override
	END

	// read in the core classes
	
	COPY_EXISTING "clastext.2da" override
		COUNT_2DA_COLS colcount
		READ_2DA_ENTRIES_NOW clastext_data colcount
		FOR (row=0;row<clastext_data;++row) BEGIN
			READ_2DA_ENTRY_FORMER clastext_data row 2 val
			READ_2DA_ENTRY_FORMER clastext_data row 0 class_label
			PATCH_IF "%val%" STRING_EQUAL 16384 && INDEX ("^FALLEN" "%class_label%") <0 BEGIN
				READ_2DA_ENTRY_FORMER clastext_data row 1 class_number	
				SET $class_map("%class_label%")=class_number
				SPRINT $class_map_inv("%class_number%") "%class_label%"
			END
		END
	BUT_ONLY

	// read in the kits (and their parents)
	
	COPY_EXISTING "kitlist.2da" override
		COUNT_2DA_COLS colcount
		READ_2DA_ENTRIES_NOW kitlist_data colcount
		FOR (row=0;row<kitlist_data;++row) BEGIN
			READ_2DA_ENTRY_FORMER kitlist_data row 0 kit_number
			READ_2DA_ENTRY_FORMER kitlist_data row 1 kit_label
			READ_2DA_ENTRY_FORMER kitlist_data row 8 class_number
			PATCH_IF IS_AN_INT class_number BEGIN
				TO_UPPER kit_label
				SET $kit_map("%kit_label%")=kit_number
				SET $kit_parent("%kit_label%")=class_number
			END
		END
	BUT_ONLY


	// externalise all the data
	
	OUTER_SPRINT class_data ""
	OUTER_SPRINT kit_data ""
	OUTER_SPRINT kit_restrict_data ""
	COPY_EXISTING weapprof.2da override
		COUNT_2DA_COLS colcount
		FOR (col=1;col<colcount;++col) BEGIN
			READ_2DA_ENTRY 0 (col - 1) (colcount - 1) header
			TO_UPPER header
			SET $header_col("%header%")=col
		END
		READ_2DA_ENTRIES_NOW weapprof_data colcount
		PHP_EACH class_map AS label=>number BEGIN
			PATCH_IF VARIABLE_IS_SET $header_col("%label%") BEGIN
				SET col=$header_col("%label%")
				SPRINT class_data "%class_data%%TAB%[%number%]={"
				FOR (row=0;row<weapprof_data;++row) BEGIN
					READ_2DA_ENTRY_FORMER weapprof_data row col val
					READ_2DA_ENTRY_FORMER weapprof_data row 1 prof_id
					SET $class_values("%label%" "%prof_id%")=val
					PATCH_IF prof_id>=89 && prof_id<=115 BEGIN
						SPRINT class_data "%class_data%[%prof_id%]=%val%, "
						SET_2DA_ENTRY row col colcount 5
					END
				END
				SPRINT class_data "%class_data%},%WNL%"
			END
		END
		PHP_EACH kit_map AS label=>number BEGIN
			SET kit_parent_number=$kit_parent("%label%")
			SPRINT kit_parent $class_map_inv("%kit_parent_number%")
			PATCH_IF "%kit_parent%" STRING_EQUAL_CASE SORCERER BEGIN
				SPRINT kit_parent MAGE
			END
			PATCH_IF VARIABLE_IS_SET $header_col("%label%") BEGIN
				SET col=$header_col("%label%")
				SPRINT kit_data "%kit_data%%TAB%[%number%]={"
				SPRINT kit_restrict_data "%kit_restrict_data%%TAB%[%number%]={"
				FOR (row=0;row<weapprof_data;++row) BEGIN
					READ_2DA_ENTRY_FORMER weapprof_data row col val
					READ_2DA_ENTRY_FORMER weapprof_data row 1 prof_id
					SET val_class=$class_values("%kit_parent%" "%prof_id%")
					PATCH_IF prof_id>=89 && prof_id<=115 BEGIN
						SPRINT kit_data "%kit_data%[%prof_id%]=%val%, "
						SET_2DA_ENTRY_LATER weapprof_data_new row col 5
						PATCH_IF val<val_class BEGIN
							SPRINT kit_restrict_data "%kit_restrict_data%[%prof_id%]=%val%, "
						END
					END
				END
				SPRINT kit_data "%kit_data%},%WNL%"
				SPRINT kit_restrict_data "%kit_restrict_data%},%WNL%"
			END
		END
		SET_2DA_ENTRIES_NOW weapprof_data_new colcount
		PRETTY_PRINT_2DA
	BUT_ONLY
	OUTER_SPRINT kit_dc_map ""
	ACTION_PHP_EACH kit_map AS kit_label=>kit_number BEGIN
		OUTER_SET parent_number=$kit_parent("%kit_label%")
		ACTION_MATCH "%parent_number%" WITH
			1 2 3 4 11 12 // classes that can be part of a multiclass combo
		BEGIN
		//	OUTER_SPRINT kit_dc_map "%kit_dc_map%%TAB%[%kit_number%]={[%parent_number%]=%kit_number%},%WNL%"
		END
		DEFAULT END
	END

<<<<<<<< .../stratagems-inline/m_dw_krd.lua
dwClassProf={
%class_data%
}

dwKitProf={
%kit_data%
}

dwKitRestrict={
%kit_restrict_data%
}


>>>>>>>>

	COPY ".../stratagems-inline/m_dw_krd.lua" "override" EVALUATE_BUFFER

END



///////////////////////////////////////////////////////////////////////////////////////////
// set the single-class kits that override multiclass kit proficiencies for dc purposes
/////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION set_dual_class_kit_components_for_proficiencies STR_VAR kit="" components="" BEGIN

	COPY_EXISTING "kitlist.2da" override
		COUNT_2DA_COLS colcount
		READ_2DA_ENTRIES_NOW kitlist_data colcount
		FOR (row=0;row<kitlist_data;++row) BEGIN
			READ_2DA_ENTRY_FORMER kitlist_data row 0 kit_number
			READ_2DA_ENTRY_FORMER kitlist_data row 1 kit_label
			READ_2DA_ENTRY_FORMER kitlist_data row 8 class_number
			PATCH_IF IS_AN_INT class_number BEGIN
				TO_UPPER kit_label
				SET $kit_map("%kit_label%")=kit_number
				SET $kit_parent("%kit_label%")=class_number
			END
		END
	BUT_ONLY
	OUTER_SET kit_number=$kit_map("%kit%")
	OUTER_SPRINT line "dwDCKitMap[%kit_number%]={"
	OUTER_WHILE "%components%" STRING_COMPARE_CASE "" BEGIN
		LAF return_first_entry STR_VAR list="%components%" RET entry components=list END
		ACTION_TO_UPPER entry
		ACTION_MATCH "%entry%" WITH
		ARCHER BEGIN
			OUTER_SPRINT entry FERALAN
		END
		ASSASSIN BEGIN
			OUTER_SPRINT entry ASSASIN
		END
		AVENGER BEGIN
			OUTER_SPRINT entry BEAST_FRIEND
		END
		DEFAULT
		END
		
		OUTER_SET kit_number=$kit_map("%entry%")
		OUTER_SET class_number=$kit_parent("%entry%")
		OUTER_SPRINT line "%line%[%class_number%]=%kit_number%, "
	END
	OUTER_SPRINT line "%line%}%WNL%"
	APPEND "m_dw_epd.lua" "%line%" KEEP_CRLF

END


///////////////////////////////////////////////////////////////////////////////////////////
// hide a proficiency
/////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION hide_proficiency INT_VAR id=0 BEGIN
	LAF set_up_externalized_proficiencies END
	APPEND "m_dw_epd.lua" "dwHideProficiencies[%id%]=true%WNL%"
END

///////////////////////////////////////////////////////////////////////////////////////////
// define a stat for signalling
/////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION set_signalling_stat INT_VAR stat=0 BEGIN

	LAF hide_proficiency INT_VAR id=stat END
	COPY_EXISTING weapprof.2da override
		LPF set_signalling_stat_helper INT_VAR stat END
	BUT_ONLY
	ACTION_IF FILE_EXISTS "%data_loc_shared%/weapprof.2da" BEGIN
		COPY "%data_loc_shared%/weapprof.2da" "%data_loc_shared%" 
			LPF set_signalling_stat_helper INT_VAR stat END
		BUT_ONLY
	END

END

DEFINE_PATCH_FUNCTION set_signalling_stat_helper INT_VAR stat=0 BEGIN
		COUNT_2DA_COLS colcount
		COUNT_2DA_ROWS colcount rowcount
		FOR (row=0;row<rowcount;row+=1) BEGIN
			READ_2DA_ENTRY row 1 colcount prof_number
			PATCH_IF prof_number=stat BEGIN
				SET_2DA_ENTRY row 2 colcount RESOLVE_STR_REF("Signalling stat - should not be visible")
				SET_2DA_ENTRY row 3 colcount "-1"		
				FOR (col=4;col<colcount;col+=1) BEGIN
					SET_2DA_ENTRY row col colcount 99
				END
			END
		END
		PRETTY_PRINT_2DA
END

///////////////////////////////////////////////////////////////////////////////////////////
// menu patch
/////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION externalize_prof_patch BEGIN

	REPLACE_TEXTUALLY EXACT_MATCH "chargen.proficiency" "dwProficiencyTable"
	REPLACE_TEXTUALLY EXACT_MATCH "dwProficiencyTable[rowNumber].value" "chargen.proficiency[dwProficiencyLookup[rowNumber]].value"
	REPLACE_TEXTUALLY ~onOpen\([^"]*\)"~ ~onOpen\1"%WNL%%TAB%dwProficiencyTable,dwProficiencyLookup,dwSpendableTotal=dwBuildProficiencyTable(chargen.proficiency)%WNL%~
	REPLACE_TEXTUALLY ~\(OnOpen[^"]*"[^"]+\)"~ ~\1%WNL%%TAB%dwClearExcessProficiencies(dwSpendableTotal)%WNL%%TAB%dwProficienciesTotal=chargen.extraProficiencySlots%WNL%"~ // note that this is at the *end* of the OnOpen block, i.e. after any signal transmission
END

///////////////////////////////////////////////////////////////////////////////////////////
// route to the path, if we're not sure if we're externalized or not
/////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_ACTION_FUNCTION get_weapprof_path RET weapprof_path BEGIN

	ACTION_IF FILE_EXISTS "%data_loc_shared%/weapprof.2da" BEGIN
		OUTER_SPRINT weapprof_path "%data_loc_shared%/weapprof.2da"
	END ELSE BEGIN
		COPY_EXISTING "weapprof.2da" "override"
		OUTER_SPRINT weapprof_path "override/weapprof.2da"
	END

END

///////////////////////////////////////////////////////////////////////////////////////////
// lua functions and data
/////////////////////////////////////////////////////////////////////////////////////////////

<<<<<<<< .../stratagems-inline/m_dw_epd.lua
dwHideProficiencies={}
dwDCKitMap={}

>>>>>>>>

<<<<<<<< .../stratagems-inline/m_dw_epf.lua

function plusButtonClickable(row) -- overwrite the baseline one in util
	local prof=chargen.proficiency[dwProficiencyLookup[row]]
	local clickable =  (prof.value < prof.max)
	clickable = clickable and chargen.extraProficiencySlots > 0 and dwStartingProfAllowed(prof) and dwNumProficiencySlots(prof.id)>prof.value
	return clickable
end

function minusButtonClickable(row) -- overwrite the baseline one in util
	local prof=chargen.proficiency[dwProficiencyLookup[row]]
	return (prof.value > prof.min)
end

function dwStartingProfAllowed(prof) 
  
	if not dwProfMaxByClass then
		return true
	end
  
	if dwIsLevelling then
		return true
	end
  
	class,_=dwFindClassKit()
	level_1_max=dwProfMaxByClass[class]

	if currentChargenSubrace then
		race=dwRaces[currentChargenRace]
		subrace=subraceList(race.id)[currentChargenSubrace]
		level_1_max = level_1_max + subrace.extraprof
	end
	
  
	if dwProficienciesTotal<=level_1_max then
		permittedNumber=2
	elseif dwProficienciesTotal==level_1_max + 1 then 
		permittedNumber=3
	elseif dwProficienciesTotal==level_1_max + 2 then
		permittedNumber=4
	else
		permittedNumber=5
	end

	currentNumber=prof.value
	if permittedNumber>currentNumber then
		return true
	else
		return false
	end

end


function dwNumProficiencySlots(index)

	
	if not dwClassProf then
		return 99
	end
	class,kit=dwFindClassKit()
	is_dualclass,class1,class2,oc_kit=dwFindDualClassData()
	-- non dual-class is simplest
	if not is_dualclass then
		if (kit>0) then
			return dwKitProf[kit][index]
		else
			return dwClassProf[class][index]
		end
	end
	-- now we're dualclass
	-- if it's actually unusable by your multiclass, return 0
	if dwClassProf[class]==0 then
		return 0
	end
	-- otherwise, get the maximum from your two kits
	if dwDCKitMap[kit] then
		kit1=dwDCKitMap[kit][class1]
		kit2=dwDCKitMap[kit][class2]
	end
	if kit1 then 
		val1=dwKitProf[kit1][index]
	else
		val1=dwClassProf[class1][index]
	end
	if kit2 and not dwDisableOCProficiencies then
		val2=dwKitProf[kit2][index]	
	else
		if class2>0 and not dwDisableOCProficiencies then
			val2=dwClassProf[class2][index]
		else
			val2=0
		end
	end
	if val1>val2 then val=val1 else val=val2 end
	-- now look for restrictions
	if oc_kit>0 then
		if dwEnableOCKitRestrictions and dwKitRestrict[oc_kit] then
			max=dwKitRestrict[oc_kit][index]
			if max then
				if val>max then val=max end
			end
		end
	end
	if kit1 then
		if dwKitRestrict[kit1] then
			max =dwKitRestrict[kit1][index]
			if max then
				if val>max then val=max end
			end
		end
	end
	if kit2 then
		if dwKitRestrict[kit2] then
			max =dwKitRestrict[kit2][index]
			if max then
				if val>max then val=max end
			end
		end
	end	
	return val


end

function dwBuildProficiencyTable(proftable)

	newtable={}
	lookup={}
	count=0
	new_key=0
	for k,v in pairs(proftable) do
		if not dwHideProficiencies[v.id] then
			allowed=dwNumProficiencySlots(v.id)
			if allowed>0 then
				new_key=new_key+1
				table.insert(newtable,v)
				lookup[new_key]=k
				count=count+allowed-v.value
			end
		end
	end
	return newtable,lookup,count

end

function dwClearExcessProficiencies(count)
	spend=chargen.extraProficiencySlots
	while count<spend do
		spend=spend - 1
		createCharScreen:OnProficiencyPlusMinusButtonClick(%discard_stat%, true)
	end

end

>>>>>>>>

