DEFINE_ACTION_FUNCTION spell_system_extension_setup
BEGIN

	LAF ui_detect_class_kit END
	ACTION_IF !FILE_EXISTS_IN_GAME "m_dw_sxf.lua" BEGIN
		LAF process_extended_spells END
		LAF install_extended_spell_functions END
	END

END



/*
document{process_extended_spells}
{
Get the extended-namespace spells into lua and into auto-grant spells.
}

*/

DEFINE_ACTION_FUNCTION process_extended_spells BEGIN

	//setup
	
	LAF load_vanilla_high_spells RET_ARRAY vanilla_high_spells END
	
	//priest spells
	
	ACTION_CLEAR_ARRAY priest_data
	ACTION_FOR_EACH class IN CLERIC DRUID BEGIN
		ACTION_FOR_EACH align IN L_G L_N L_E N_G N_N N_E C_G C_N C_E ALL BEGIN
			ACTION_CLEAR_ARRAY "clab_data_%class%_%align%"
		END
	END
	OUTER_FOR (level=1;level<=7;++level) BEGIN
		OUTER_SPRINT $priest_data("%level%") "dwExtraPriestSpells[%level%]={%WNL%"
		ACTION_FOR_EACH s2 IN 5 6 7 8 9 A B C D E F BEGIN
			ACTION_FOR_EACH s3 IN 0 1 2 3 4 5 6 7 8 9 A B C D E F BEGIN
				OUTER_SPRINT resref "SPPR%level%%s2%%s3%"
				ACTION_IF FILE_EXISTS_IN_GAME "%resref%.spl" && !VARIABLE_IS_SET $vanilla_high_spells("%resref%") BEGIN
					// get the data
					COPY_EXISTING - "%resref%.spl" nowhere
						LPF make_extended_spell_line STR_VAR resref RET line no_align_restrictions RET_ARRAY class_bar align_bar END
					BUT_ONLY
					// record the clab data
					ACTION_FOR_EACH class IN CLERIC DRUID BEGIN
						ACTION_IF !$class_bar("%class%") BEGIN
							ACTION_IF no_align_restrictions BEGIN
								OUTER_SPRINT $"clab_data_%class%_ALL"("%resref%") ""
							END ELSE BEGIN
								ACTION_PHP_EACH align_bar AS align=>value BEGIN
									ACTION_IF !value BEGIN
										OUTER_SPRINT $"clab_data_%class%_%align%"("%resref%") ""
									END
								END
							END
						
						END					
					END
					// create the lua entry
					OUTER_SPRINT row "%TAB%%resref%=%line%,%WNL%"
					OUTER_SPRINT temp $priest_data("%level%") 
					OUTER_SPRINT $priest_data("%level%") "%temp%%row%"
				END
			END
		END
		OUTER_SPRINT temp $priest_data("%level%")
		OUTER_SPRINT $priest_data("%level%") "%temp%}%WNL%%WNL%"
	END

	//mage spells
	
	ACTION_CLEAR_ARRAY mage_data
	OUTER_FOR (level=1;level<=9;++level) BEGIN
		OUTER_SPRINT $mage_data("%level%") "dwExtraMageSpells[%level%]={%WNL%"
		ACTION_FOR_EACH s2 IN 5 6 7 8 9 A B C D E F BEGIN
			ACTION_FOR_EACH s3 IN 0 1 2 3 4 5 6 7 8 9 A B C D E F BEGIN
				OUTER_SPRINT resref "SPWI%level%%s2%%s3%"
				ACTION_IF FILE_EXISTS_IN_GAME "%resref%.spl" && !VARIABLE_IS_SET $vanilla_high_spells("%resref%") BEGIN
					// get the data
					COPY_EXISTING - "%resref%.spl" nowhere
						LPF make_extended_spell_line STR_VAR resref RET line END
					BUT_ONLY
					// create the lua entry
					OUTER_SPRINT row "%TAB%%resref%=%line%,%WNL%"
					OUTER_SPRINT temp $mage_data("%level%") 
					OUTER_SPRINT $mage_data("%level%") "%temp%%row%"
				END
			END
		END
		OUTER_SPRINT temp $mage_data("%level%")
		OUTER_SPRINT $mage_data("%level%") "%temp%}%WNL%%WNL%"
	END
	
	//output
	
	OUTER_SPRINT all_data ""
	ACTION_PHP_EACH priest_data AS level=>data BEGIN
		OUTER_SPRINT all_data "%all_data%%data%"
	END
	ACTION_PHP_EACH mage_data AS level=>data BEGIN
		OUTER_SPRINT all_data "%all_data%%data%"
	END

	COPY ".../stratagems-inline/m_dw_sxd.lua" override EVALUATE_BUFFER

	// make the priest clab spells
	/*
	name structure: dwg[c|d][align]	
	*/
	ACTION_CLEAR_ARRAY align_code_map
	ACTION_DEFINE_ASSOCIATIVE_ARRAY align_code_map BEGIN
		ALL=>0
		L_G=>0x11
		L_N=>0x12
		L_E=>0x13
		N_G=>0x21
		N_N=>0x22
		N_E=>0x23
		C_G=>0x31
		C_N=>0x32
		C_E=>0x33
	END
	ACTION_FOR_EACH class IN CLERIC DRUID BEGIN
		ACTION_IF "%class%" STR_EQ "CLERIC" BEGIN
			OUTER_SPRINT parent_resref_base "DWGC"
		END ELSE BEGIN
			OUTER_SPRINT parent_resref_base "DWGD"
		END
		// build the applicators
		ACTION_PHP_EACH align_code_map AS align=>align_num BEGIN
			OUTER_SPRINT parent_resref "%parent_resref_base%%align%"
			CREATE SPL "%parent_resref%"
				LPF spl_basic_ability_localcopy END
				PHP_EACH "clab_data_%class%_%align%" AS resource=>discard BEGIN
					LPF ADD_SPELL_EFFECT INT_VAR opcode=171 target=2 STR_VAR resource END
				END
		END
		// plug the alignment-based applicators into the ALL one
		COPY_EXISTING "%parent_resref_base%ALL.SPL" override
			PHP_EACH align_code_map AS align=>align_num BEGIN
				PATCH_IF "%align%" STR_CMP "ALL" BEGIN
					LPF ADD_SPELL_EFFECT INT_VAR opcode=326 target=2 timing=1 parameter1=align_num parameter2=108 STR_VAR resource="%parent_resref_base%%align%" END
				END
			END
		BUT_ONLY
		
	END
	
	// add the applicators to clabs and kits
	
	ACTION_FOR_EACH clab IN CLABDR01 CLABRN01 BEGIN
		LAF add_to_clab_level_1 STR_VAR clab spell=DWGDALL END
	END
	ACTION_FOR_EACH clab IN CLABPR01 CLABPA01 BEGIN
		LAF add_to_clab_level_1 STR_VAR clab spell=DWGCALL END
	END
	COPY_EXISTING - kitlist.2da nowhere
		COUNT_2DA_COLS colcount
		READ_2DA_ENTRIES_NOW kitlist_data colcount
		FOR (row=0;row<kitlist_data;++row) BEGIN
			READ_2DA_ENTRY_FORMER kitlist_data row 8 class
			PATCH_IF IS_AN_INT class BEGIN
				PATCH_IF class=IDS_OF_SYMBOL (class CLERIC) || class=IDS_OF_SYMBOL (class PALADIN) BEGIN
					READ_2DA_ENTRY_FORMER kitlist_data row 5 clab
					LPF add_to_clab_level_1 STR_VAR clab spell=DWGCALL END
				END ELSE
				PATCH_IF class=IDS_OF_SYMBOL (class DRUID) || class=IDS_OF_SYMBOL (class RANGER) BEGIN
					READ_2DA_ENTRY_FORMER kitlist_data row 5 clab
					LPF add_to_clab_level_1 STR_VAR clab spell=DWGDALL END
				END 

			END
		END
	BUT_ONLY
	
END

<<<<<<<<.../stratagems-inline/m_dw_sxd.lua
dwExtraPriestSpells={}
dwExtraMageSpells={}
%all_data%
>>>>>>>>


DEFINE_PATCH_FUNCTION make_extended_spell_line
	INT_VAR add_to_clab=0
	STR_VAR resref=""
	RET line no_align_restrictions lua_array
	RET_ARRAY class_bar kit_bar align_bar
BEGIN
	READ_LONG 0x8 name
	READ_LONG 0x50 desc
	READ_ASCII 0x3a icon
	READ_BYTE 0x25 primary
	PATCH_IF primary>=1 && primary<=8 BEGIN
		spec=primary+21
		SPRINT spec_line "spec=%spec%, "
	END ELSE BEGIN
		SPRINT spec_line ""
	END
	GET_OFFSET_ARRAY ab_arr SPL_V10_HEADERS
	PATCH_IF VARIABLE_IS_SET $ab_arr(0) BEGIN
		READ_ASCII (ab_arr_0 + 4) groundicon
	END ELSE BEGIN
		SPRINT groundicon "SPWI101C"
	END
	CLEAR_ARRAY align_bar
	CLEAR_ARRAY class_bar
	CLEAR_ARRAY kit_bar
	no_align_restrictions=0
	READ_SHORT 0x1c type_num
	PATCH_MATCH type_num WITH
	1 BEGIN // wizard
		SPRINT type wizard
		SPRINT lua_array dwExtraMageSpells
		READ_BYTE 0x1e kit_byte_1
		READ_BYTE 0x1f kit_byte_2
		SET $kit_bar(22)=kit_byte_1 BAND 0b01000000 // abjurer
		SET $kit_bar(23)=kit_byte_1 BAND 0b10000000 // conjurer
		SET $kit_bar(24)=kit_byte_2 BAND 0b00000001 // diviner
		SET $kit_bar(25)=kit_byte_2 BAND 0b00000010 // enchanter
		SET $kit_bar(26)=kit_byte_2 BAND 0b00000100 // illusionist
		SET $kit_bar(27)=kit_byte_2 BAND 0b00001000 // invoker
		SET $kit_bar(28)=kit_byte_2 BAND 0b00010000 // necromancer
		SET $kit_bar(29)=kit_byte_2 BAND 0b00100000 // transmuter

	END
	2 BEGIN
		SPRINT type cleric
		SPRINT lua_array dwExtraPriestSpells
		READ_BYTE 0x1e align_byte
		no_align_restrictions=((align_byte BAND 0b00111111)=0)
		PATCH_IF !no_align_restrictions BEGIN
			no_chaotic=align_byte BAND 0b00000001
			no_lawful=align_byte BAND 0b00010000
			no_good=align_byte BAND 0b00000100
			no_evil=align_byte BAND 0b00000010
			no_geneutral=align_byte BAND 0b00001000
			no_lcneutral=align_byte BAND 0b00100000
			SET $align_bar(L_G)=no_lawful || no_good
			SET $align_bar(N_G)=no_lcneutral || no_good
			SET $align_bar(C_G)=no_chaotic || no_good
			SET $align_bar(L_N)=no_lawful || no_geneutral
			SET $align_bar(N_N)=no_lcneutral || no_geneutral
			SET $align_bar(C_N)=no_chaotic || no_geneutral
			SET $align_bar(L_E)=no_lawful || no_evil
			SET $align_bar(N_E)=no_lcneutral || no_evil
			SET $align_bar(C_E)=no_chaotic || no_evil
		END ELSE BEGIN
			SET $align_bar("null")=0
		END
		READ_BYTE 0x21 class_byte
		SET $class_bar(DRUID)=class_byte BAND 0b10000000
		SET $class_bar(CLERIC)=class_byte BAND 0b01000000
		SET $class_bar(PALADIN)=$class_bar(CLERIC)
		SET $class_bar(RANGER)=$class_bar(DRUID)
		SET $class_bar(SHAMAN)=$class_bar(DRUID)
		SET $class_bar(FIGHTER_CLERIC)=$class_bar(CLERIC)
		SET $class_bar(CLERIC_MAGE)=$class_bar(CLERIC)
		SET $class_bar(CLERIC_THIEF)=$class_bar(CLERIC)
		SET $class_bar(FIGHTER_MAGE_CLERIC)=$class_bar(CLERIC)
		SET $class_bar(FIGHTER_DRUID)=$class_bar(DRUID)
		PATCH_IF add_to_clab BEGIN
			INNER_ACTION BEGIN
				ACTION_FOR_EACH class IN CLERIC DRUID BEGIN
					ACTION_IF !$class_bar("%class%") BEGIN
						ACTION_IF "%class%" STR_EQ "DRUID" BEGIN
							OUTER_SPRINT base DWGD
						END ELSE BEGIN
							OUTER_SPRINT base DWGC
						END
						ACTION_IF no_align_restrictions BEGIN
							COPY_EXISTING "%base%ALL.SPL" override
								LPF ADD_SPELL_EFFECT INT_VAR opcode=171 target=2 timing=9 STR_VAR resource="%resref%" END
						END	ELSE BEGIN
							ACTION_PHP_EACH align_bar AS align=>value BEGIN
								ACTION_IF !value BEGIN
									COPY_EXISTING "%base%%align%.spl" override
									LPF ADD_SPELL_EFFECT INT_VAR opcode=171 target=2 timing=9 STR_VAR resource="%resref%" END
								END
							END
						END
					END
				END
			END		
		END
	END
	DEFAULT
		PATCH_FAIL "shouldn't happen"
	END
	SPRINT align_table ""
	PATCH_IF !no_align_restrictions BEGIN
		PATCH_PHP_EACH align_bar AS alignment=>value BEGIN
			PATCH_IF value BEGIN
				SPRINT align_table "%align_table%%alignment%=true,"
			END
		END
	END
	SPRINT class_table ""
	PHP_EACH class_bar AS class=>value BEGIN
		PATCH_IF value BEGIN
			SET class_num=IDS_OF_SYMBOL (class "%class%")
			SPRINT class_table "%class_table%[%class_num%]=true,"
		END
	END
	SPRINT kit_table ""
	PHP_EACH kit_bar AS kit_num=>value BEGIN
		PATCH_IF value BEGIN
			SPRINT kit_table "%kit_table%[%kit_num%]=true,"
		END
	END
	SPRINT line "{icon='%icon%', groundicon='%groundicon%', name=%name%, desc=%desc%, restrict_alignment={%align_table%}, restrict_class={%class_table%}, restrict_kit={%kit_table%}, %spec_line%}"
END


/*
document{add_to_clab_level_1}
{
Lightweight adder that just adds the spell to a CLAB file
}

*/

DEFINE_DIMORPHIC_FUNCTION add_to_clab_level_1
	STR_VAR clab=""
			spell=""
BEGIN
	COPY_EXISTING "%clab%.2da" override
		COUNT_2DA_COLS colcount
		COUNT_2DA_ROWS colcount rowcount
		n=rowcount+1
		SPRINT line "ABILITY%n%%TAB%AP_%spell%"
		FOR (col=2;col<colcount;++col) BEGIN
			SPRINT line "%line%%TAB%****"
		END
	BUT_ONLY
	APPEND "%clab%.2da" "%line%"
END


/*
document{extended_add_spell}
{

}

*/

DEFINE_ACTION_FUNCTION extended_add_spell
	INT_VAR force_extended=1
			replace=0
	STR_VAR id=""
			file=""
			path=""
			location=""
			locbase=""
	RET resref
BEGIN
	ACTION_IF INDEX ("\.spl" "%file%")<0 BEGIN
		OUTER_SPRINT file "%file%.spl"
	END
	ACTION_IF !VARIABLE_IS_SET data_loc_shared BEGIN
		OUTER_SPRINT data_loc_shared "weidu_external/data/dw_shared"
	END
	ACTION_IF !FILE_EXISTS_IN_GAME "m_dw_sxf.lua" BEGIN
		LAF spell_system_extension_setup END
	END
	// sanity
	ACTION_IF "%id%" STR_EQ "" BEGIN
		FAIL "extended_add_spell requires an id (e.g. WIZARD_FIREBALL)"
	END	
	ACTION_TO_UPPER id
	// load in the extended-spell list if it exists
	ACTION_IF FILE_EXISTS "%data_loc_shared%/dw_ext_spell.ids" BEGIN
		COPY - "%data_loc_shared%/dw_ext_spell.ids" nowhere
			CLEAR_ARRAY ext_spell_data
			READ_2DA_ENTRIES_NOW ext_spell_data 2
			FOR (row=0;row<ext_spell_data;++row) BEGIN
				READ_2DA_ENTRY_FORMER ext_spell_data row 1 id_here
				READ_2DA_ENTRY_FORMER ext_spell_data row 0 res_here
				SPRINT $ext_spell_data("%id_here%") "%res_here%"
			END
	END ELSE BEGIN
		COPY ".../stratagems-inline/blank" "%data_loc_shared%/dw_ext_spell.ids"
	END
	OUTER_SET proceed=1
	// is it in spell.ids?
	ACTION_IF IDS_OF_SYMBOL (spell "%id%")>=0 BEGIN
		OUTER_SET proceed=0
		ACTION_IF replace BEGIN
			LAF RES_NUM_OF_SPELL_NAME STR_VAR spell_name="%id%" RET spell_res spell_num END
			COPY_EXISTING "spell.ids" override
				REPLACE_TEXTUALLY "%spell_num%\([ %TAB%]+\)%id%" "%spell_num%\1%spell_res%_OLD"
			CLEAR_IDS_MAP		
			LAF extended_add_spell INT_VAR force_extended replace STR_VAR id file path RET resref END
		END ELSE BEGIN
			PRINT "Not adding %path%/%file% as spell %id% since id already exists (returning resref of existing id)"
			LAF RES_NUM_OF_SPELL_NAME STR_VAR spell_name="%id%" RET resref=spell_res END
		END
	END ELSE BEGIN
		// is it in dw_ext_spell.ids?
		OUTER_SET contained=0
		ACTION_PHP_EACH ext_spell_data AS id_here=>discard BEGIN
			ACTION_IF "%id_here%" STR_EQ "%id%" BEGIN
				OUTER_SET contained=1
			END
		END
		ACTION_IF contained BEGIN
			OUTER_SET proceed=0
			ACTION_IF replace BEGIN
				COPY "%data_loc_shared%/dw_ext_spell.ids" "%data_loc_shared%"
					SPRINT res $ext_spell_data("%id%")
					REPLACE_TEXTUALLY "%res%\([ %TAB%]+\)%id%" "%res%\1%res%_OLD"
				LAF extended_add_spell INT_VAR force_extended replace STR_VAR id file path RET resref END
			END ELSE BEGIN
				PRINT "Not adding %path%/%file% as spell %id% since id already exists (returning resref of existing id)"
				OUTER_SPRINT resref $ext_spell_data("%id%")
			END		
		END
	END
	ACTION_IF proceed BEGIN
		// for safety, we'll load in the same list of vanilla spells used by the setup code
		LAF load_vanilla_high_spells RET_ARRAY vanilla_high_spells END
		ACTION_IF "%location%%locbase%" STR_CMP "" BEGIN
			LAF sfo_path STR_VAR location locbase file path RET file_path END
		END ELSE BEGIN
			ACTION_IF "%path%" STR_EQ "" BEGIN
				OUTER_SPRINT path "%file%"
			END ELSE BEGIN
				OUTER_SPRINT file_path "%path%/%file%"
			END
		END
		// get data from the spell
		COPY - "%file_path%" nowhere
			READ_LONG 0x34 level
			READ_SHORT 0x1c type_num
		BUT_ONLY
		// find a slot and add to spell.ids/dw_ext_spell.ids
		LAF extended_add_spell_helper INT_VAR force_extended level type_num STR_VAR id RET resref END
		// actually install the spell, doing lua/clab processing in the process
		COPY "%file_path%" "override/%resref%.spl"
			LPF make_extended_spell_line INT_VAR add_to_clab=1 STR_VAR resref RET line lua_array END
			APPEND "m_dw_sxd.lua" "%lua_array%[%level%].%resref%=%line%%WNL%" KEEP_CRLF
		
	END
END

DEFINE_ACTION_FUNCTION extended_add_spell_helper
	INT_VAR force_extended=0
			level=0
			type_num=0
	STR_VAR type=""
			id=""
RET resref
BEGIN
	ACTION_MATCH "%type_num%" WITH
	1 BEGIN
		OUTER_SPRINT file_prefix SPWI
		OUTER_SET ids_start=2
	END
	2 BEGIN
		OUTER_SPRINT file_prefix SPPR
		OUTER_SET ids_start=1	
	END
	DEFAULT
		FAIL "extended_add_spell only works with type=1 (wizard) or type=2 (cleric); current type is %type_num%"
	END
	ACTION_IF !force_extended BEGIN
		OUTER_SPRINT resref ""
		OUTER_FOR (n=10;n<100;++n) BEGIN 
			ACTION_IF (!FILE_EXISTS_IN_GAME "%file_prefix%%level%%n%.spl" && !RESOURCE_CONTAINS "spell.ids" "%ids_start%%level%%n%[ %TAB%]" && !VARIABLE_IS_SET $vanilla_high_spells("%file_prefix%%level%%n%") ) BEGIN
				OUTER_SPRINT resref "%file_prefix%%level%%n%"
				APPEND "spell.ids" "%ids_start%%level%%n%%TAB%%id%"
				OUTER_SET n=100
			END
		END
		ACTION_IF "%resref%" STR_EQ "" BEGIN
			LAF extended_add_spell_helper INT_VAR force_extended=1 type_num STR_VAR id RET resref END
		END 
	END ELSE BEGIN
		OUTER_SET done=0
		ACTION_FOR_EACH digit2 IN A B C D E F G H I J K L M N O P Q R S T U V W X Y Z BEGIN
			ACTION_FOR_EACH digit3 IN 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z BEGIN
				ACTION_IF !done BEGIN
					OUTER_SPRINT resref "%file_prefix%%level%%digit2%%digit3%"
					OUTER_SET done=!FILE_EXISTS_IN_GAME "%resref%.spl" 
				END
			END			
		END		
		APPEND_OUTER "%data_loc_shared%/dw_ext_spell.ids" "%resref%%TAB%%id%"
	END


END




/*
document{load_vanilla_high_spells}
{
This just loads a hardcoded list of hidden spells in the 50-99 namespace.
}

*/

DEFINE_ACTION_FUNCTION load_vanilla_high_spells 
	RET_ARRAY vanilla_high_spells 
BEGIN
	ACTION_CLEAR_ARRAY vanilla_high_spells
	
	// these are common to all games
	ACTION_FOR_EACH spell IN 
		SPPR150
		SPPR250
		SPPR350
		SPPR450
		SPPR550
		SPPR599
		SPPR650
		SPPR698
		SPPR699
		SPPR750
		SPPR751
		SPWI298
		SPWI299
		SPWI399
		SPWI853
		SPWI888
		SPWI897
		SPWI898
		SPWI899
		SPWI975
		SPWI985
		SPWI995
	BEGIN
		OUTER_SET $vanilla_high_spells("%spell%")=1
	END
	// all the polymorph/enchanted-weapon stuff in SPW4xx
	OUTER_FOR (n=480;n<=499;++n) BEGIN
		ACTION_IF !(n=492) BEGIN // odd gap
			OUTER_SET $vanilla_high_spells("SPWI%n%")=1
		END
	END
	// SI
	OUTER_FOR (n=590;n<=597;++n) BEGIN
		OUTER_SET $vanilla_high_spells("SPWI%n%")=1
	END
	// IWD-only
	ACTION_IF GAME_IS IWDEE BEGIN
		OUTER_SET $vanilla_high_spells("SPPR199")=1
	
	END 
	ACTION_IF GAME_IS "BGEE EET BG2EE" BEGIN
		// on BG2, most of the SPWI9xx space is full
		OUTER_FOR (n=950;n<=965;++n) BEGIN
			OUTER_SET $vanilla_high_spells("SPWI%n%")=1
		END
		OUTER_FOR (n=979;n<=999;++n) BEGIN
			OUTER_SET $vanilla_high_spells("SPWI%n%")=1
		END
	END
	ACTION_IF GAME_IS "BGEE" BEGIN
		OUTER_SET $vanilla_high_spells("SPWI975")=1
	END
	ACTION_IF GAME_IS "EET" BEGIN
		OUTER_SET $vanilla_high_spells("SPWI966")=1
	END		
END

/*
document{install_extended_spell_functions}
{
Add the LUA functions and menu edits to enable extended spells. (We're going to chance doing this just by REPLACE_TEXTUALLY.)
}

*/

DEFINE_ACTION_FUNCTION install_extended_spell_functions
BEGIN
	COPY ".../stratagems-inline/m_dw_sxf.lua" override
	
	COPY_EXISTING "ui.menu" "override"
		LPF UI_alter_object STR_VAR object=CHARGEN_CHOOSE_SPELLS object_type=menu patch=ext_choose_spells_edit END
		LPF UI_alter_function STR_VAR function=refreshPriestBook patch=ext_priest_book_edit END
END

DEFINE_PATCH_FUNCTION ext_choose_spells_edit//internal
BEGIN
	PATCH_IF INDEX_BUFFER ("dwLearnSpecialistSpells")>=0 BEGIN
		REPLACE_TEXTUALLY "dwLearnSpecialistSpells" "dwUpdateChooseSpells()%WNL%dwLearnSpecialistSpells"
	END ELSE BEGIN
		REPLACE_TEXTUALLY "\([ %TAB%]*\)table\.sort(chargen\.choose_spell, sortBySpellName)" "\1dwUpdateChooseSpells()%WNL%\1table.sort(chargen.choose_spell, sortBySpellName)"
	END
END

DEFINE_PATCH_FUNCTION ext_priest_book_edit//internal
BEGIN
	REPLACE_TEXTUALLY EXACT_MATCH ~if characters[id].hasClericBook~ ~if (characters[id].hasClericBook and characters[id].priestDetails[currentSpellLevel].maxMemorized>0)~
END

/*
document{extended_spell_test}
{
This just copies 10 spells of each level into the 51-55 and extended namespaces, for testing. 
It also makes the Sunscorch copy (SPPR1A5) good-only
}

*/

DEFINE_ACTION_FUNCTION extended_spell_test
BEGIN
	ACTION_DEFINE_ASSOCIATIVE_ARRAY maxlevel_array BEGIN
		SPPR=>7
		SPWI=>9
	END
	ACTION_PHP_EACH maxlevel_array AS prefix=>max BEGIN
		OUTER_FOR (level=1;level<=max;++level) BEGIN
			OUTER_FOR (n=1;n<=5;++n) BEGIN
				ACTION_IF FILE_EXISTS_IN_GAME "%prefix%%level%0%n%.spl" BEGIN
					COPY_EXISTING "%prefix%%level%0%n%.spl" "override/%prefix%%level%5%n%.spl"
						LPF extended_spell_test_helper END
				END
				ACTION_IF FILE_EXISTS_IN_GAME "%prefix%%level%1%n%.spl" BEGIN
					COPY_EXISTING "%prefix%%level%1%n%.spl" "override/%prefix%%level%A%n%.spl"
						LPF extended_spell_test_helper END			
				END
			END
	
		END
	END
	COPY_EXISTING "SPPR1A5.spl" override
		WRITE_BYTE 0x1e 0b00000010
END

DEFINE_PATCH_FUNCTION extended_spell_test_helper//internal 
BEGIN
	READ_STRREF 0x8 name
	SPRINT name "%name% (Copy)"
	SAY 0x8 "%name%"
END



<<<<<<<<.../stratagems-inline/blank
>>>>>>>>


// inlined LUA functions

<<<<<<<< .../stratagems-inline/m_dw_sxf.lua

function dwUpdateChooseSpells()
	-- get parameters
	class,kit=dwFindClassKit()
	alignment=dwFindAlignment()
	-- get the table of new spells
	if (class==21) then
		tbl=dwExtraPriestSpells[chargen.currentSpellLevelChoice]
		list='priestSpells'
	else
		tbl=dwExtraMageSpells[chargen.currentSpellLevelChoice]
		list='mageSpells'
	end
	-- inject the spells, checking for already known spells
	for k,v in pairs(tbl) do
		if not (spellBook[chargen.currentSpellLevelChoice][k] or v.restrict_class[class] or v.restrict_kit[kit] or v.restrict_alignment[alignment]) then -- first check makes sure we only add these once
			known=false
			if not (dwIsChargen) then
				for k2,v2 in pairs(characters[currentID][list][chargen.currentSpellLevelChoice]) do
					if (v2.resref==k) then
						known=true
					end
				end
			end
			table.insert(chargen.choose_spell,{enabled=false,known=known,key=k})
			spellBook[chargen.currentSpellLevelChoice][k]={name=v.name,desc=v.desc,icon=v.icon,groundicon=v.groundicon,autopick=false,known=known,hidden=false,specialist=(v.spec==kit),resref=k}
		end
	end
end

>>>>>>>>

/// local copies of functions

DEFINE_PATCH_FUNCTION spl_basic_ability_localcopy
BEGIN
	PATCH_IF !(BUFFER_LENGTH=0x72) BEGIN
		PATCH_FAIL "spl_basic_ability only works on a blank, freshly-created v1 spell"
	END
	INNER_PATCH_SAVE ab_data "" BEGIN
		INSERT_BYTES 0x0 0x28
		WRITE_SHORT 0x0 1
		WRITE_SHORT 0x2 4
		WRITE_BYTE 0xc 1
		WRITE_SHORT 0x22 1
		WRITE_SHORT 0x24 1
		WRITE_SHORT 0x26 1
	END
	WRITE_SHORT 0x68 1
	WRITE_SHORT 0x6a 0x9a
	INSERT_BYTES 0x72 0x28
	WRITE_ASCII 0x72 "%ab_data%"
END


