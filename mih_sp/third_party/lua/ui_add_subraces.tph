//////////////////////////////////////////////////////////////////////////////////////////////////
/*   
document{add_to_subrace_tables}
{
Take a mod's subrace, race, pseudorace tables and add them to the main tables
}
*/
//////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////
// Main function
//////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION add_to_subrace_tables 
	STR_VAR subrace_table=""
			race_table=""
			pseudorace_table=""
			disabled=""
			table_path=""
BEGIN

	ACTION_IF !FILE_EXISTS "override/racetext.2da" BEGIN
		COPY_EXISTING "racetext.2da" override
	END
	ACTION_IF "%race_table%" STR_CMP "" BEGIN
		LAF add_to_subrace_tables_helper
			INT_VAR warn_of_repeats=0
			STR_VAR to_read="%table_path%/%race_table%.2da"
					to_add_to="override/racetext.2da"
		END
	END


	<<<<<<<< .../stratagems-inline/dw_pseudorace_data.2da
	2DA V1.0
	*
			NAME		DESC			REAL_RACE		NULL
	>>>>>>>>


	ACTION_IF !FILE_EXISTS "%data_loc_shared%/dw_pseudorace_data.2da" BEGIN
		COPY ".../stratagems-inline/dw_pseudorace_data.2da" "%data_loc_shared%"
	END

	ACTION_IF "%pseudorace_table%" STRING_COMPARE "" BEGIN
		LAF add_to_subrace_tables_helper
			STR_VAR to_read="%table_path%/%pseudorace_table%.2da"
					to_add_to="%data_loc_shared%/dw_pseudorace_data.2da"
		END
	END

	<<<<<<<< .../stratagems-inline/dw_subrace_data.2da
	2DA V1.0
	*
					NAME		DESC			PARENT			FINAL_RACE	ICON	ICON_STRREF	COLOR_SKIN	COLOR_HAIR	COLOR_MAJOR	COLOR_MINOR	STR	DEX	CON	INT	WIS	CHA	EXTRA_PROF	BIO_OLD		BIO_NEW	PP 	OL 	FT  MS  HS  DI  ST		SPL_INIT	SPL_RECUR
	>>>>>>>>

	ACTION_IF !FILE_EXISTS "%data_loc_shared%/dw_subrace_data.2da" BEGIN
		COPY ".../stratagems-inline/dw_subrace_data.2da" "%data_loc_shared%"
	END

	ACTION_IF "%subrace_table%" STRING_COMPARE "" BEGIN
	  LAF add_to_subrace_tables_helper
			STR_VAR to_read="%table_path%/%subrace_table%.2da"
					to_add_to="%data_loc_shared%/dw_subrace_data.2da"
	  END
	END

	<<<<<<<< .../stratagems-inline/dw_subrace_disabled.2da
	>>>>>>>>

	ACTION_IF !FILE_EXISTS "%data_loc_shared%/dw_subrace_disabled.2da" BEGIN
		COPY ".../stratagems-inline/dw_subrace_disabled.2da" "%data_loc_shared%"
	END

	OUTER_WHILE "%disabled%" STRING_COMPARE "" BEGIN
		LAF return_first_entry STR_VAR list="%disabled%" RET entry disabled=list END
		APPEND_OUTER "%data_loc_shared%/dw_subrace_disabled.2da" "%entry%" KEEP_CRLF
	END



END


////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper functions for the main function
////////////////////////////////////////////////////////////////////////////////////////////////////
DEFINE_ACTION_FUNCTION add_to_subrace_tables_helper//internal
	INT_VAR warn_of_repeats=1
	STR_VAR to_read=""
			to_add_to=""
BEGIN
	// get data to add
	COPY - "%to_read%" nowhere
		LPF 2da_read STR_VAR case=lower RET_ARRAY new_rows=rows new_data=array END
		PHP_EACH new_data AS k=>v BEGIN
			PATCH_IF INDEX ("@" "%v%")>=0 BEGIN
				INNER_PATCH_SAVE tra_entry "%v%" BEGIN
					REPLACE_TEXTUALLY "@" ""
				END
				SET $new_data("%k_0%" "%k_1%")=RESOLVE_STR_REF ((AT tra_entry))
			END
		END
	BUT_ONLY

	// get main table data
	COPY - "%to_add_to%" nowhere
		LPF 2da_read STR_VAR case=lower RET_ARRAY old_rows=rows old_data=array END
	BUT_ONLY


	// check for repeats
	ACTION_PHP_EACH new_rows AS key=>discard BEGIN
		LAF array_contains STR_VAR array=old_rows key RET value END
		ACTION_IF value BEGIN
			LAF warning STR_VAR warning="Entry %key% in table %to_read% already exists in table %to_add_to%; will be skipped." END
		END
	END
	// combine
	LAF array_join STR_VAR array1=new_data array2=old_data RET_ARRAY all_data=array END
	COPY "%to_add_to%" "%to_add_to%"
		LPF 2da_write STR_VAR array=all_data default="-1" END
	BUT_ONLY
END


/////////////////////////////////////////////////////////////////////////////////////////////////////
/*
document{build_subraces}
{
operate on the subrace tables toactually construct the subraces
}
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Main function
/////////////////////////////////////////////////////////////////////////////////////////////////////



DEFINE_ACTION_FUNCTION build_subraces 
	INT_VAR tlk_signal_start=900000
	STR_VAR locbase=""
BEGIN

	// set names for some internally-used spells
	
	OUTER_SPRINT spl_set_str_ex_to_100	dwex100
	OUTER_SPRINT spl_subrace_master	dwsubrc

	// get stats
	
	LAF check_ini INT_VAR silent=1 STR_VAR ini=discard_stat RET discard_stat=value END
	OUTER_SET discard_stat=discard_stat=0?125:discard_stat
	LAF check_ini INT_VAR silent=1 STR_VAR ini=subrace_stat RET subrace_stat=value END
	OUTER_SET subrace_stat=subrace_stat=0?134:subrace_stat

	// get some required data from the engine strings
	ACTION_FOR_EACH abil IN strength dexterity constitution intelligence wisdom charisma pick_pockets open_locks hide_in_shadows move_silently detect_illusion set_traps find_remove_traps proficiencies BEGIN
		OUTER_SPRINT lua_lookup "STRREF_GUI_MIXED_%abil%"
		ACTION_TO_UPPER lua_lookup
		COPY_EXISTING "enginest.2da" "%workspace%"
			REPLACE_EVALUATE "%lua_lookup%[%TAB ]+\([0-9]+\)" BEGIN
				SET $enginest("%abil%")="%MATCH1%"
			END
			""
		BUT_ONLY
	END
	
	// these aren't in the engine strings (they're directly in the description text) and need to be inferred

	ACTION_GET_STRREF 9582 str_desc
	OUTER_INNER_PATCH "%str_desc%" BEGIN
		REPLACE_EVALUATE "^\(.*\)<MINIMUM>" BEGIN
			SET $enginest("minimum")=RESOLVE_STR_REF ("%MATCH1%")
		END
		""
		REPLACE_EVALUATE "^\(.*\)<MAXIMUM>" BEGIN
			SET $enginest("maximum")=RESOLVE_STR_REF ("%MATCH1%")
		END
		""
	END
	
	// load disabled data into memory

	LAF array_read STR_VAR path="%data_loc_shared%" file="dw_subrace_disabled.2da" case=lower RET_ARRAY subrace_disabled=array END

	// load pseudorace data into memory, resolve statdesc entries as we go
	
	OUTER_SET id=8
	COPY_EXISTING "%data_loc_shared%/dw_pseudorace_data.2da" "%workspace%"
		LPF 2da_read STR_VAR case=lower RET_ARRAY pseudorace_rows=rows pseudorace_data=array END
		PHP_EACH pseudorace_rows AS row=>discard BEGIN
			SPRINT real_race $pseudorace_data("%row%" "real_race")
			SET $pseudorace_data("%row%" real_id)=IDS_OF_SYMBOL(race "%real_race%")
			SET $pseudorace_data("%row%" "id")=id
			++id
		END
	BUT_ONLY
	// load subrace data into memory, resolve statdesc entries as we go
	LAF load_subrace_2da_table 
		INT_VAR tlk_signal_start
		STR_VAR subrace_2da="%data_loc_shared%/dw_subrace_data.2da"
		RET max_count 
		RET_ARRAY subrace_data subrace_rows real_races_used default_subrace
	END

	// dump the final-race and subrace allocations
	
	<<<<<<<< .../stratagems-inline/dw_subrace_ids.2da
IDS V1.0
*
	RACE_ID		SUBRACE_ID	
	>>>>>>>>
	COPY ".../stratagems-inline/dw_subrace_ids.2da" "%data_loc_shared%"
		CLEAR_ARRAY output_array
		PHP_EACH subrace_rows AS ident=>discard BEGIN
			SPRINT $output_array("%ident%" race_id) $subrace_data("%ident%" final_id)
			SPRINT $output_array("%ident%" subrace_id) $subrace_data("%ident%" id)
		END
		LPF 2da_write STR_VAR array=output_array END


	// general setup of ui.menu and installation of new LUA objects and functions

	LAF add_subraces_lua_setup END

	// modifications to game proficiencies (etc) 2das - has to occur after loading data as we need to know max_count
	
	LAF add_subraces_2da_prof_setup END

	// modify description text
	
	LAF add_subraces_desc_modifiers END


	// adjust for Strength (to allow for exceptional Strength)
	
	LAF add_subraces_handle_strength RET_ARRAY subrace_data END



	// write the data into LUA tables
	
	LAF add_subraces_write_lua_tables END
	// build the various spells and patch them into CLAB entries
	
	LAF add_subraces_build_spells END
	
	
END


/////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION load_subrace_2da_table
	INT_VAR tlk_signal_start=0
	STR_VAR subrace_2da="" icon_path=""
	RET max_count
	RET_ARRAY subrace_data subrace_rows default_subrace real_races_used
BEGIN
	COPY - "%subrace_2da%" nowhere	
		max_count=0
		max_extra_prof=0
		LPF 2da_read STR_VAR case=lower RET_ARRAY subrace_rows=rows subrace_data=array END
		ind=1

		PHP_EACH subrace_rows AS row=>discard BEGIN
			// icon replacement
			SPRINT icon_strref $subrace_data("%row%" "icon_strref")
			PATCH_IF INDEX ("R_" "%icon_strref%")>=0 BEGIN
				INNER_PATCH_SAVE icon_to_replace "%icon_strref%" BEGIN
					REPLACE_TEXTUALLY "R_" ""
				END
				SET $subrace_data("%row%" "icon_to_block")=icon_to_replace
				INNER_ACTION BEGIN
					COPY_EXISTING - "statdesc.2da" nowhere
						made_replacement=0
						REPLACE_EVALUATE "^%icon_to_replace%[%TAB% ]+\([0-9]+\)[%TAB% ]" BEGIN
							SET $subrace_data("%row%" "icon_strref")="%MATCH1%"
							made_replacement=1
						END
						""
						PATCH_IF !made_replacement BEGIN
							PATCH_FAIL "ui_add_subraces error: failed to match entry '%icon_to_replace%' in statdesc.2da"
						END
				END
			END
			// IDS number of parent
			SPRINT working_parent $subrace_data("%row%" parent) 
			TO_LOWER working_parent
			PATCH_IF VARIABLE_IS_SET $pseudorace_data("%working_parent%" real_id) BEGIN
				SET $subrace_data("%row%" "parent_id")=$pseudorace_data("%working_parent%" id)
				SET $subrace_data("%row%" "parent_real_id")=$pseudorace_data("%working_parent%" real_id)
			END ELSE BEGIN
				SET $subrace_data("%row%" "parent_id")=IDS_OF_SYMBOL (race "%working_parent%")
				PATCH_IF $subrace_data("%row%" "parent_id")<0 BEGIN
					PATCH_FAIL "Unidentified parent race %working_parent%"
				END
				SET $subrace_data("%row%" "parent_real_id")=$subrace_data("%row%" "parent_id")
			END	
			SET parent_real_id=$subrace_data("%row%" "parent_real_id")
			SPRINT $real_races_used("%parent_real_id%") ""
			// - IDS number of final
			SPRINT working_final_race $subrace_data("%row%" "final_race") 
			PATCH_IF "%working_final_race%" STRING_COMPARE_CASE "*" BEGIN
					SET $subrace_data("%row%" "final_id")=IDS_OF_SYMBOL (race "%working_final_race%")
			END ELSE BEGIN
					SET $subrace_data("%row%" "final_id")= $subrace_data("%row%" "parent_real_id")
			END	
			// evaluate the ID (relative to real parent race) for this entry, and update the max_count variable (tracks the max number of subraces across all races)
			PATCH_IF !VARIABLE_IS_SET $highest_id("%parent_real_id%") BEGIN
				SET $highest_id("%parent_real_id%")=0
			END ELSE BEGIN
				SET $highest_id("%parent_real_id%") +=1
			END
			SET $subrace_data("%row%" "id")=$highest_id("%parent_real_id%")
			working_id=$subrace_data("%row%" "id")
			max_count = working_id>max_count ? working_id : max_count		
			// update the max_extra_prof variable (tracks the maximum number of extra proficiencies across all races)
			working_extra_prof=$subrace_data("%row%" extra_prof)
			max_extra_prof = working_extra_prof>max_extra_prof? working_extra_prof: max_extra_prof
			
			// resolve any needed icon
			PATCH_IF $subrace_data("%row%" icon_strref)<0 BEGIN // if there is no icon strref provided...

				working_final_id=$subrace_data("%row%" "final_id")
				PATCH_IF !VARIABLE_IS_SET $default_subrace("%working_final_id%" id) && working_final_id>=0 BEGIN // if that's the first time it happens, set this as the default subrace (identified by absence of icon)
					SET $default_subrace("%working_final_id%" id)="%working_id%"
					SET $default_subrace("%working_final_id%" strref)=$subrace_data("%row%" "name")
					SET $default_subrace("%working_final_id%" race)=$subrace_data("%row%" "parent_id")
					add_icon=0
				END ELSE BEGIN
					add_icon=1 // otherwise, add it invisibly and suck up the aesthetic hit
				END
			END ELSE BEGIN
				add_icon=1
			END
			
			PATCH_IF add_icon BEGIN
				INNER_ACTION BEGIN
					OUTER_SPRINT bam_name $subrace_data("%row%" "icon")
					LAF resolve_statdesc INT_VAR strref=ind+tlk_signal_start STR_VAR bam_name bam="****" RET stat_num END
					OUTER_SET $subrace_data("%row%" "icon_id")=stat_num
					ACTION_IF "%bam_name%" STRING_COMPARE_CASE null && !FILE_EXISTS_IN_GAME "%bam_name%.bam" BEGIN
						WARN "Cannot find icon %bam_name%.bam (currently managing %row%; data: %working_final_id% )"
					END
				END 
			END ELSE BEGIN
				SET $subrace_data("%row%" "icon_id")="-1"
			END	
			++ind
		END
	BUT_ONLY
	// add extra profs to max count
	OUTER_SET max_count += max_extra_prof
		

END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION add_subraces_lua_setup BEGIN

	ACTION_IF !VARIABLE_IS_SET lua_loc BEGIN
		OUTER_SPRINT lua_loc lua
	END
	LAF shared_color_changes END
	
	LAF UI_install_function STR_VAR new_function_path="%MOD_FOLDER%/%lua_loc%/code/adjust_abilities.lua" lua_file="m_dw_shr" search_string=dwGetAbilityValue END

	// install relevant functions and the the 'subrace' objects
	
	COPY ".../stratagems-inline/subrace_functions.lua" "override/m_dw_sbf.lua" EVALUATE_BUFFER
	COPY ".../stratagems-inline/subrace_objects.lua" "override/m_dw_sbd.lua"

	// build discard and signalling stat (the ui_externalize_proficiencies library contains various resources which we need)
	LAF check_label STR_VAR label=dw-set-up-discard-stat RET value END
	ACTION_IF !value BEGIN
		LAF make_label STR_VAR label=dw-set-up-discard-stat END
		LAF check_ini INT_VAR silent=1 STR_VAR ini=discard_stat RET stat=value END
		OUTER_SET stat=(stat=0)?125:stat
		LAF set_signalling_stat INT_VAR stat END
	END
	LAF check_ini INT_VAR silent=1 STR_VAR ini=subrace_stat RET stat=value END
	OUTER_SET stat=stat=0?134:stat
	
	LAF set_signalling_stat INT_VAR stat END

	ACTION_IF !FILE_EXISTS "%marker_loc%/dw#subrace_menu_edits.mrk" BEGIN // only do it once
	
		COPY ".../stratagems-inline/blank" "%marker_loc%/dw#subrace_menu_edits.mrk"
		
		// create the new menu and append it to ui.menu
		
		LAF build_subrace_menu END 
		
		// various edits of ui.menu

		// move enforcement of lower-level proficiency pip requirements into the UI
		
		LAF externalize_profsmax END	
		LAF detect_chargen_status END


		
		COPY_EXISTING ui.menu override	
		// redirect clicks of the 'race' button in existing race menu; get that menu to reset the currentChargenSubrace variable
			LPF UI_alter_object STR_VAR object=CHARGEN_RACE object_type=menu patch=edit_race_menu END 
		// fix the CHARGEN_RACE menu to display pseudoraces correctly 
			LPF UI_alter_object STR_VAR object=CHARGEN_RACE object_type=menu patch=ui_pseudoraces END 
		// fix the raceOrGeneralHelp() function to display pseudoraces correctly and to skip through to the subrace description if only one is available
			LPF UI_replace_function INT_VAR inline=1 STR_VAR function=raceOrGeneralHelp new_function_path="race_or_general_help.lua" END
		// transmit data to the new character, and hide proficiency entries used to transmit data
			LPF UI_alter_object STR_VAR object=CHARGEN_PROFICIENCIES object_type=menu patch=pass_subrace_data END
			LPF UI_alter_object STR_VAR object=LEVELUP_PROFICIENCIES object_type=menu patch=pass_subrace_data END
		// add the subrace ability modifiers in the ability-roller menu	
			LPF UI_alter_object STR_VAR object=CHARGEN_ABILITIES object_type=menu patch=ui_ability_roller END 
			LPF UI_replace_function INT_VAR inline=1 STR_VAR function=abilityOrGeneralHelp new_function_path="ability_or_general_help.lua" END
			REPLACE_TEXTUALLY // BG
			"createCharScreen:OnAbilityPlusMinusButtonClick(\([^,]+\), *false)"
			"if (dwAdjustShownAbilityValue(\1,dwSubraceAbilityModifier(\1))>3) then
				createCharScreen:OnAbilityPlusMinusButtonClick(\1, false)
			end"
			REPLACE_TEXTUALLY // IWD
			"createCharScreen:OnAbilityPlusMinusButtonClick(\([^,]+\), *plus)"
			"if (plus==true or dwAdjustShownAbilityValue(\1,dwSubraceAbilityModifier(\1))>3) then
				createCharScreen:OnAbilityPlusMinusButtonClick(\1,plus)
			end"

		// edit the UI to hide race-transmission icons and to show the race itself
			REPLACE_TEXTUALLY "chargen.information" "dwChargenInformation()"
			REPLACE_TEXTUALLY ~addCharacterDetail(v\.bam,v\.current,Infinity_FetchString(v\.strRef))~ ~dwAddCharacterIcon(v.bam,v.current,v.strRef)~ // IWDEE
			REPLACE_TEXTUALLY ~Infinity_FetchString(statusEffects\[rowNumber\]\.strRef)~ ~Infinity_FetchString(dwAddCharacterIcon2(statusEffects[rowNumber].strRef))~
			REPLACE_TEXTUALLY ~Infinity_FetchString(char\.race)~ ~dwDisplayRace(char)~
		// edit the UI to show 'correct' skill values
			LPF UI_alter_object STR_VAR object=CHARGEN_SKILLS object_type=menu patch=ui_skill_adjusts END
		// on BG, edit the UI to hot-swap the biography to reflect <CHARNAME>'s mother's heritage
			PATCH_IF GAME_IS ~eet bgee~ BEGIN
				LPF ui_edit_biography END
			END
		// record the race to display on the character screen once it's determined
		// (why? Mostly to hide momentary race changes when we dual-class)
			LPF UI_alter_object STR_VAR object=CHARACTER object_type=menu patch=ui_record_race END

	END

END

/////////////////////////////////////////////// Build the new subrace menu ///////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION build_subrace_menu BEGIN

	// extract the CHARGEN_RACE menu from the existing ui.menu

	COPY_EXISTING "ui.menu" override
		LPF UI_return_object STR_VAR object=CHARGEN_RACE object_type=menu RET object_data END
	BUT_ONLY


	// make the various substitutions
	
	OUTER_INNER_PATCH_SAVE subrace_menu "%object_data%" BEGIN
		REPLACE_TEXTUALLY "CHARGEN_RACE" "CHARGEN_SUBRACE"
		REPLACE_TEXTUALLY "CurrentChargenRace" "currentChargenSubrace"
		REPLACE_TEXTUALLY "raceButtonSequences" "subraceButtonSequences"
		REPLACE_TEXTUALLY "getRaceHighlightFrame" "getSubraceHighlightFrame"
		REPLACE_TEXTUALLY "raceOrGeneralHelp" "subraceOrGeneralHelp"
		REPLACE_TEXTUALLY "chargen\.races" "subraceList(dwRaces[currentChargenRace].id)"	
		REPLACE_TEXTUALLY "createCharScreen:OnCancelButtonClick()" "currentChargenRace=nil; currentChargenSubrace=nil"
		REPLACE_TEXTUALLY "createCharScreen:OnRaceSelectButtonClick.*" ""
		REPLACE_TEXTUALLY "createCharScreen:IsDoneButtonClickable()" "subraceDoneButtonClickable()"
	
	END
	
	// glue it back on
	
	APPEND ui.menu "menu%WNL%{%WNL%%subrace_menu%%WNL%}" KEEP_CRLF 

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///	 Edit the existing race menu 
///
///  This operates on the CHARGEN_RACE menu, extracted from the main UI
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION edit_race_menu BEGIN
	
	// reset the Subrace variable as well as the Race one when we get here dw
	
	REPLACE_TEXTUALLY "currentChargenRace = nil" "currentChargenRace = nil%WNL%currentChargenSubrace=nil"
	
	// redirect the click-race button

	REPLACE_TEXTUALLY ~createCharScreen:OnRaceSelectButtonClick(chargen.races\[currentChargenRace\]\.id)~ ~dwOnRaceSelectButtonClick(chargen.races[currentChargenRace].id)~

	// redirect the done button
	
	REPLACE_TEXTUALLY ~createCharScreen:OnRaceSelectButtonClick(chargen.races\[currentChargenRace\]\.id)~ ~dwOnRaceSelectButtonClick(chargen.races[currentChargenRace].id)~
	REPLACE_TEXTUALLY ~Infinity_PopMenu(); createCharScreen:OnDoneButtonClick()~ ~dwOnRaceDoneButtonClick(chargen.races[currentChargenRace].id)~


END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///	Change the info display to replace 'race' with 'subrace
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DEFINE_ACTION_FUNCTION chargen_display_subrace BEGIN
COPY_EXISTING "ui.menu" override
	
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///	 insert our default proficiency edits
///	Working assumption we want to add to/insert enable()
/// entries in each Column entry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION pass_subrace_data BEGIN
	REPLACE_TEXTUALLY ~\(onopen[%TAB%%WNL%%LNL%%MNL% ]*\)"~  ~\1"dwPassSubraceData()%WNL%~
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///	Plug pseudoraces into UI (patch function operating on CHARGEN_RACES)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ui_pseudoraces BEGIN

	REPLACE_TEXTUALLY "chargen.races" "dwRaces"
	REPLACE_TEXTUALLY ~\(onOpen\([^"]*\)"\)~ ~\1%WNL%dwRaces={}%WNL%dwRaces=dwMakeRaceList(chargen.races)%WNL%~

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///	Plug ability adjustments into ability-roller (patch function acting on CHARGEN_ABILITIES)
/// Also enforce legal minima
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ui_ability_roller BEGIN

	REPLACE_TEXTUALLY "chargen\.ability\[\([^]]+\)\]\.roll" "dwShowAdjustedAbilityValue(\1,dwSubraceAbilityModifier(\1))"
	REPLACE_TEXTUALLY ~OnOpen\([^"]\)*"~ ~OnOpen%WNL%\1"%WNL%\1dwImposeLegalAbilityMinimums()%WNL%~
	REPLACE_TEXTUALLY ~createCharScreen:OnAbilityReRollButtonClick()~ ~createCharScreen:OnAbilityReRollButtonClick()dwImposeLegalAbilityMinimums()~


END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///	Plug skill adjustments into skill screen (patch function acting on CHARGEN_SKILLS)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ui_skill_adjusts BEGIN

	REPLACE_TEXTUALLY "chargen\.thief_skill\[rowNumber\]\.value" "dwSubraceSkillAdjust(chargen.thief_skill[rowNumber])"

END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///	Plug in biography-editor 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ui_edit_biography BEGIN

	PATCH_IF !is_eet BEGIN
		LPF UI_alter_object STR_VAR object=CHARGEN_BIO object_type=menu patch=ui_edit_biography_helper END
		LPF UI_alter_object STR_VAR object=CHARGEN object_type=menu patch=ui_edit_biography_helper_2 END
	END

END

DEFINE_PATCH_FUNCTION ui_edit_biography_helper BEGIN // applies to CHARGEN_BIO


	SPRINT payload "createBioEdit=dwSubraceBioSwap(createBioEdit)
		dwUpdatedBio=true
		if dwAutoBioSet then
			createCharScreen:OnDoneButtonClick()
			createCharScreen:AcceptCharacter(-1)
		end"
	
	PATCH_IF INDEX_BUFFER ("onOpen")>=0 BEGIN
		REPLACE_TEXTUALLY ~^\([%TAB% ]+\)onOpen.*[%WNL%%MNL%%LNL%]\([%TAB% ]+\)"~ ~\1onOpen%WNL%\2"%WNL%%payload%~	
	END ELSE BEGIN
		REPLACE_TEXTUALLY ~^\([%TAB% ]+\)ignoreesc~ ~\1ignoreesc%WNL%\1onOpen%WNL%\1"%WNL%%payload%%WNL%\1"~
	END


END

DEFINE_PATCH_FUNCTION ui_edit_biography_helper_2 BEGIN  // applies to CHARGEN


//	READ_ASCII 0x0 data (BUFFER_LENGTH)
	//PATCH_PRINT "%data%"
	REPLACE_TEXTUALLY 	~createCharScreen:AcceptCharacter(-1)~ 
						~%WNL%
		if dwUpdatedBio then 
			createCharScreen:AcceptCharacter(-1)
		 else
			dwAutoBioSet=true
			createCharScreen:OnBiographyButtonClick()
		end%WNL%~
	

END


DEFINE_PATCH_FUNCTION ui_record_race BEGIN

	REPLACE_TEXTUALLY ~onopen\([^"]*"\)~ ~onopen\1%WNL%%TAB%%TAB%dwRecordedRace[currentID]=dwFindSubraceData(characters[currentID])~

END


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////	setup the 2das used by the subrace code
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION add_subraces_2da_prof_setup
BEGIN


	// edit weapprof to add the new info-pass 'proficiencies'

	COPY_EXISTING weapprof.2da override
		COUNT_2DA_COLS colcount
		COUNT_2DA_ROWS colcount rowcount
		FOR (row=0;row<rowcount;row+=1) BEGIN
			READ_2DA_ENTRY row 1 colcount prof_number
			PATCH_IF prof_number=subrace_stat BEGIN
				SET_2DA_ENTRY row 2 colcount RESOLVE_STR_REF("Subrace stat - should not be visible")
				SET_2DA_ENTRY row 3 colcount "-1"
			END
			PATCH_IF prof_number=discard_stat BEGIN
				SET_2DA_ENTRY row 2 colcount RESOLVE_STR_REF("Discard stat - should not be visible")
				SET_2DA_ENTRY row 3 colcount "-1"		
			END
			PATCH_IF prof_number=discard_stat || prof_number=subrace_stat BEGIN
				FOR (col=4;col<colcount;col+=1) BEGIN
					SET_2DA_ENTRY row col colcount 99
				END
			END
		END
		PRETTY_PRINT_2DA
		
	// extend proficiency slots to give headroom to add new slots
	
	ACTION_IF FILE_EXISTS "%data_loc_shared%/subrace_base_profs.2da" BEGIN
		COPY "%data_loc_shared%/profs.2da" "override/profs.2da"
	END ELSE BEGIN
		COPY_EXISTING "profs.2da" "%data_loc_shared%/profs.2da" 
	END
	
	COPY_EXISTING profs.2da override
		COUNT_2DA_ROWS 3 rowcount
		FOR (row=0;row<rowcount;++row) BEGIN
			READ_2DA_ENTRY row 1 3 first_level
			PATCH_IF IS_AN_INT first_level BEGIN
				SET_2DA_ENTRY row 1 3 (first_level + max_count)
			END
		END
	BUT_ONLY
	
	// zero the ability and skill modifiers
	
	COPY_EXISTING 
	"abracead.2da" override
		COUNT_2DA_COLS colcount
		READ_2DA_ENTRIES_NOW abracead_contents colcount
		FOR (row=0;row<abracead_contents;++row) BEGIN
			READ_2DA_ENTRY_FORMER abracead_contents row 0 race_name
			SET race_id=IDS_OF_SYMBOL (race "%race_name%")
			PATCH_IF VARIABLE_IS_SET $real_races_used("%race_id%") BEGIN
				FOR (col=1;col<colcount;++col) BEGIN
					SET_2DA_ENTRY row col colcount 0
				END
			END
		END
		PRETTY_PRINT_2DA
	BUT_ONLY
	
	COPY_EXISTING 
	"skillrac.2da" override
		PHP_EACH real_races_used AS id=>discard BEGIN
			LOOKUP_IDS_SYMBOL_OF_INT this_race race id
			REPLACE_TEXTUALLY "%this_race%.*$" "%this_race% 15 10 5 10 5 0 0"
		END
		PRETTY_PRINT_2DA
	BUT_ONLY




END

////////////////////////////////////////////////////////////////////////////////////////////////////
DEFINE_ACTION_FUNCTION add_subraces_desc_modifiers
BEGIN
	ACTION_DEFINE_ASSOCIATIVE_ARRAY desc_abil_map
	BEGIN
		str=>strength
		dex=>dexterity
		con=>constitution
		int=>intelligence
		wis=>wisdom
		cha=>charisma
	END
	ACTION_DEFINE_ASSOCIATIVE_ARRAY desc_skill_map
	BEGIN
		ol=>open_locks
		ft=>find_remove_traps
		pp=>pick_pockets
		ms=>move_silently
		hs=>hide_in_shadows
		di=>detect_illusion
		st=>set_traps
	END

	ACTION_PHP_EACH subrace_rows AS ind=>discard BEGIN
		OUTER_SPRINT desc $subrace_data("%ind%" desc)
		OUTER_SPRINT desc_abil ""
		ACTION_PHP_EACH desc_abil_map AS short=>long BEGIN

			ACTION_IF !("subrace_data_%ind%_%short%"=0) BEGIN
			
				OUTER_SET mod="subrace_data_%ind%_%short%"
				ACTION_IF mod>0 BEGIN
					OUTER_SPRINT mod "+%mod%"
				END
				OUTER_SPRINT start_strref $enginest("%long%")
				ACTION_GET_STRREF start_strref start
				ACTION_IF "%desc_abil%" STRING_EQUAL "" BEGIN
					OUTER_SPRINT desc_abil "- %start% %mod%"
				END ELSE BEGIN
					OUTER_SPRINT desc_abil "%desc_abil%, %start% %mod%"
				END
			END
		END
		OUTER_SPRINT desc_skill ""

		ACTION_PHP_EACH desc_skill_map AS short=>long BEGIN
			ACTION_IF !("subrace_data_%ind%_%short%"=0) BEGIN
				OUTER_SET mod="subrace_data_%ind%_%short%"
				ACTION_IF mod>0 BEGIN
					OUTER_SPRINT mod "+%mod%"
				END
				OUTER_SPRINT start_strref $enginest("%long%")
				ACTION_GET_STRREF start_strref start
				ACTION_IF "%desc_skill%" STRING_EQUAL "" BEGIN
					OUTER_SPRINT desc_skill "- %start% %mod%"
				END ELSE BEGIN
					OUTER_SPRINT desc_skill "%desc_skill%, %start% %mod%"
				END
			END
		END
		
		OUTER_SPRINT desc_prof ""
		ACTION_IF $subrace_data("%ind%" extra_prof) STRING_COMPARE "0" BEGIN
			OUTER_SET mod="subrace_data_%ind%_extra_prof"
			ACTION_IF mod>0 BEGIN
				OUTER_SPRINT mod "+%mod%"
			END
			ACTION_GET_STRREF $enginest("proficiencies") start
			OUTER_SPRINT desc_prof "- %start%: %mod%"	
		END
		

		ACTION_IF desc>=0 BEGIN
			ACTION_GET_STRREF desc desc_string
			
			ACTION_IF "%desc_abil%" STRING_COMPARE "" BEGIN
				OUTER_SPRINT desc_string "%desc_string%%WNL%%desc_abil%"
			END
			ACTION_IF "%desc_skill%" STRING_COMPARE "" BEGIN
				OUTER_SPRINT desc_string "%desc_string%%WNL%%desc_skill%"
			END
			ACTION_IF "%desc_prof%" STRING_COMPARE "" BEGIN
				OUTER_SPRINT desc_string "%desc_string%%WNL%%desc_prof%"
			END
			STRING_SET_EVALUATE desc "%desc_string%"
		END

	END


END


// we can't display exceptional strength via UI edits (if true STR is 17, and the subrace has STR+1,
// we can't infer the right percentage to display.)
//
// Our workaround is just to use 00 for creatures with a positive STR bonus. (After all, most fighters who can
// reach STR=19, will). But if every subrace of a given race has a STR bonus, we may as well use the main abracead
// system.

DEFINE_ACTION_FUNCTION add_subraces_handle_strength
	RET_ARRAY subrace_data
BEGIN
	// first pass through to work out the lowesr value
	ACTION_PHP_EACH subrace_rows AS ind=>discard BEGIN
		OUTER_SPRINT real_parent $subrace_data("%ind%" "parent_real_id")
		ACTION_IF !VARIABLE_IS_SET $str_min("%real_parent%") BEGIN
			OUTER_SET $str_min("%real_parent%")=99
			OUTER_SET min=99
		END	ELSE BEGIN
			OUTER_SET min=$str_min("%real_parent%")
		END		
		OUTER_SET mod=$subrace_data("%ind%" str)
		OUTER_SET min = mod>min?min:mod
		OUTER_SET $str_min("%real_parent%")=min
	END
	// second pass through to make adjustments
	ACTION_PHP_EACH subrace_rows AS ind=>discard BEGIN
		OUTER_SPRINT real_parent $subrace_data("%ind%" "parent_real_id")
		OUTER_SET min=$str_min("%real_parent%")
		OUTER_SET mod=$subrace_data("%ind%" str)
		ACTION_IF (mod>0 && mod<min) BEGIN
			WARN "There are multiple subraces with the same real parent race which assign different, positive, strength scores. For technical reasons this cannot be handled. All positive modifiers for the subrace have been set to the maximum value. In-game description text during character creation will be inaccurate."
			OUTER_SET mod=max
		END
		OUTER_SET $subrace_data("%ind%" str)=mod - min
	END
	
	// now edit abracead.2da
	
	COPY_EXISTING "abracead.2da" override
		PHP_EACH str_min AS race_id=>mod BEGIN
		  PATCH_IF !mod=0 BEGIN
			LOOKUP_IDS_SYMBOL_OF_INT race_name race race_id
			REPLACE_TEXTUALLY "^ *%race_name%[%TAB% ]+[^%TAB% ]+[%TAB% ]" "%race_name% %mod%"
		  END
		END
		PRETTY_PRINT_2DA
	BUT_ONLY



END



DEFINE_ACTION_FUNCTION add_subraces_write_lua_tables BEGIN

	// the pseudorace table
	
	OUTER_SET lua_count=1 
	ACTION_PHP_EACH pseudorace_rows AS ind=>discard BEGIN
	  ACTION_IF "%ind%" STRING_COMPARE "null" BEGIN
		ACTION_FOR_EACH label IN name desc id real_id BEGIN
			OUTER_SPRINT "%label%" $pseudorace_data("%ind%" "%label%")
		END
		APPEND "m_dw_sbd.lua" "dwPseudoRaces[%lua_count%]= {name=%name%, desc=%desc%, id=%id%, realId=%real_id%}" KEEP_CRLF	
		OUTER_SET ++lua_count
	  END
	END
	APPEND "m_dw_sbd.lua" "%WNL%%WNL%" KEEP_CRLF
	
	// the main subrace table
	
	ACTION_DEFINE_ASSOCIATIVE_ARRAY thief_skills BEGIN // these are the in-game LUA ids used by the UI
		0=>pp
		1=>ol
		2=>ft
		3=>ms
		4=>hs
		5=>di
		6=>st
	END

	OUTER_SET number=1
	ACTION_PHP_EACH subrace_rows AS ind=>discard BEGIN
		ACTION_FOR_EACH label IN name desc parent_id id str dex con int wis cha color_skin color_hair color_major color_minor extra_prof bio_old bio_new BEGIN
			OUTER_SPRINT "%label%" $subrace_data("%ind%" "%label%")
		END
		ACTION_IF bio_old>=0 && GAME_IS "bgee eet" BEGIN
			OUTER_SPRINT bio_data ~old=%bio_old%,new=%bio_new%~
		END ELSE BEGIN
			OUTER_SPRINT bio_data ""
		END
		OUTER_SPRINT thief_contents ""
		ACTION_PHP_EACH thief_skills AS thief_id=>skill BEGIN
			OUTER_SET val = $subrace_data("%ind%" "%skill%")
			ACTION_IF "%thief_contents%" STRING_EQUAL "" BEGIN
				OUTER_SPRINT thief_contents "%val%"
			END ELSE BEGIN
				OUTER_SPRINT thief_contents "%thief_contents%,%val%"
			END
		END
		ACTION_IF VARIABLE_IS_SET $subrace_disabled("%ind%") BEGIN
			OUTER_SPRINT disabled "true"
		END ELSE BEGIN
			OUTER_SPRINT disabled "false"
		END
		
		APPEND "m_dw_sbd.lua" "subraces[%number%]={name=%name%, desc=%desc%, id=%id%, parent=%parent_id%, str=%str%, dex=%dex%, con=%con%, int=%int%, wis=%wis%, cha=%cha%, extraprof=%extra_prof%, bio_data={%bio_data%}, color={skin=%color_skin%, hair=%color_hair%, major=%color_major%, minor=%color_minor%}, skills={%thief_contents%}, disabled=%disabled%}" KEEP_CRLF	
		OUTER_SET $number_map("%ind%")=number
		OUTER_SET ++number
	END
	APPEND "m_dw_sbd.lua" "%WNL%%WNL%" KEEP_CRLF
	
	// the icon table
	ACTION_PHP_EACH subrace_rows AS ind=>discard BEGIN
		ACTION_FOR_EACH label IN name icon_id icon_strref id final_id parent_id BEGIN
			OUTER_SPRINT "%label%" $subrace_data("%ind%" "%label%")
		END
		ACTION_IF icon_id>=0 BEGIN
			OUTER_SET number=$number_map("%ind%")
			APPEND "m_dw_sbd.lua" "subraceIcons[%number%]={race=%parent_id%,finalrace=%final_id%,subrace=%id%, subraceStrRef=%name%, iconStrRef=%icon_strref%}" KEEP_CRLF		
		END	
	END
	APPEND "m_dw_sbd.lua" "%WNL%%WNL%" KEEP_CRLF
	
	// the default subrace table
	

	COPY_EXISTING "racetext.2da" "%workspace%" 
		COUNT_2DA_COLS colcount
		COUNT_2DA_ROWS colcount rowcount
		FOR (row=0;row<rowcount;++row) BEGIN
			READ_2DA_ENTRY row 1 colcount race_id
			READ_2DA_ENTRY row 4 colcount race_name
			PATCH_IF VARIABLE_IS_SET $default_subrace("%race_id%" "id") BEGIN
				PATCH_FOR_EACH label IN strref id race BEGIN
					SPRINT "%label%" $default_subrace("%race_id%" "%label%")				
				END
				INNER_ACTION BEGIN
					APPEND "m_dw_sbd.lua" "defaultSubrace[%race_name%]={strref=%strref%,id=%id%, race=%race%,finalrace=%race_id%}" KEEP_CRLF
				END
			END
		END
	BUT_ONLY
	APPEND "m_dw_sbd.lua" "%WNL%%WNL%" KEEP_CRLF
	
	// the value of the dwMaxCount variable
	
	APPEND "m_dw_sbd.lua" "dwMaxCount=%max_count%" KEEP_CRLF

END


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// build spells and plug into CLAB
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION add_subraces_build_spells
BEGIN

	// get needed splprot entries
	LAF resolve_splprot_entry INT_VAR stat=0x10c value="-1" STR_VAR relation="equal" RET splprot_race=value END
	LAF resolve_splprot_entry INT_VAR stat=subrace_stat value="-1" STR_VAR relation="equal" RET splprot_subrace=value END

	// get needed splstate
	
	LAF ds_resolve_stat STR_VAR id="DW_JOINABLE_NPC" RET stat_ind END

	// get ability-to-opcode and skill-to-opcode mappings
	
	LAF ability_opcode_map RET_ARRAY ability_opcode_map END
	LAF skill_opcode_map RET_ARRAY skill_opcode_map END

	// build the initial set of spells
	LAF build_str_ex_spell END
	CREATE spl "%spl_subrace_master%"
		LPF add_basic_spell_ability END
		FOR (race=1;race<=7;++race) BEGIN
			SPRINT resource "dwsubrc%race%"
			// the 1-second duration is because sometimes in chargen (specifically in HoW) the CLAB powers seem to get applied before the proficiences
			LPF ADD_SPELL_EFFECT INT_VAR opcode=326 target=2 parameter1=race parameter2=splprot_race timing=4 duration=1 STR_VAR resource END
			LPF build_subrace_secondary_spell INT_VAR race STR_VAR spell="%resource%" END
		END
		LPF ADD_SPELL_EFFECT INT_VAR opcode=318 target=2 timing=4 duration=1 STR_VAR resource="%spl_subrace_master%" END
	
	// see if we need the final set
	OUTER_SET recur=0
	ACTION_PHP_EACH subrace_rows AS ind=>discard BEGIN
		OUTER_SPRINT spell $subrace_data("%ind%" "spl_recur")
		OUTER_SET recur = ("%spell%" STR_CMP "-1" )
	END
	ACTION_IF recur BEGIN // the outer spell is just to avoid dual-classing issues
		OUTER_FOR (race=1;race<=7;++race) BEGIN
					OUTER_SPRINT resource "dwsubrr%race%"
					LAF build_subrace_secondary_recurring_spell INT_VAR race STR_VAR spell="%resource%" RET needed END
					ACTION_IF needed BEGIN
						OUTER_SET $needed("%resource%")=1
					END ELSE BEGIN
							DELETE "override/%resource%.spl"					
					END
		END
		
		
		
		
		OUTER_FOR (level=2;level<=40;++level) BEGIN
			OUTER_SPRINT outer_spell "dwsbr%level%"
			OUTER_SPRINT primary_spell "dwsbr%level%a"
			CREATE spl "%outer_spell%"
				LPF add_basic_spell_ability END
				LPF ADD_SPELL_EFFECT INT_VAR opcode=326 target=2 timing=4 duration=1 STR_VAR resource="%primary_spell%" END
			CREATE spl "%primary_spell%"
				LPF add_basic_spell_ability END
				FOR (race=1;race<=7;++race) BEGIN
					SPRINT resource "dwsubrr%race%"
					PATCH_IF VARIABLE_IS_SET $needed("%resource%") BEGIN
						LPF ADD_SPELL_EFFECT INT_VAR opcode=326 target=2 parameter1=race parameter2=splprot_race STR_VAR resource END
					END 
				END
				LPF ADD_SPELL_EFFECT INT_VAR opcode=318 target=2 timing=4 duration=1 STR_VAR resource="%outer_spell%" END
			
		END
	END
	
	// patch the master spell into kitlist
	LAF subrace_clab_patch STR_VAR initial="AP_%spl_subrace_master%" recur="AP_DWSBR" END
	
	// label joinable NPCs so that they don't double-count the stat bonuses
	
	LAF subrace_label_joinable_npcs END

END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION build_subrace_secondary_spell // applies subrace-stat-dependent tertiary spell
	INT_VAR race=0
	STR_VAR spell=""
BEGIN
	INNER_ACTION BEGIN
		CREATE spl "%spell%"
			LPF add_basic_spell_ability END
			PHP_EACH subrace_rows AS ind=>discard BEGIN
				parent=$subrace_data("%ind%" "parent_real_id")
				PATCH_IF parent=race BEGIN
					id=$subrace_data("%ind%" id)
					SPRINT resource "dwsub%race%%id%"
					LPF ADD_SPELL_EFFECT INT_VAR opcode=326 target=2 parameter1=id parameter2=splprot_subrace STR_VAR resource END
					LPF build_subrace_tertiary_spell INT_VAR race id STR_VAR ind spell="%resource%" END
				END
			END
			LPF ADD_SPELL_EFFECT INT_VAR opcode=318 target=2 timing=9 STR_VAR resource="%spl_subrace_master%" END // immunity to the master spell - do it here so it's not removed by dual-classing
	END
END


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION build_subrace_secondary_recurring_spell // applies subrace-stat-dependent payload
	INT_VAR race=0
	STR_VAR spell=""
	RET needed
BEGIN
		OUTER_SET needed=0
		CREATE spl "%spell%"
			LPF add_basic_spell_ability END
			PHP_EACH subrace_rows AS ind=>discard BEGIN
				parent=$subrace_data("%ind%" "parent_real_id")
				PATCH_IF parent=race BEGIN
					id=$subrace_id("%ind%")
					SPRINT resource $subrace_spl_recur("%ind%")
					PATCH_IF "%resource%" STRING_COMPARE "-1" BEGIN
						LPF ADD_SPELL_EFFECT INT_VAR opcode=326 target=2 parameter1=id parameter2=splprot_subrace STR_VAR resource END
						LPF ADD_SPELL_EFFECT INT_VAR opcode=326 target=2 parameter1=9*id parameter2=splprot_subrace STR_VAR resource END // this catches dual-classed characters
						needed=1
					END
				END
			END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION build_subrace_tertiary_spell
	INT_VAR id=0 race=0
	STR_VAR spell="" ind=""
BEGIN
	INNER_ACTION BEGIN
	
		LAF resolve_splprot_entry INT_VAR stat=0x112 value="-1" STR_VAR relation=equal RET splprot_num=value END
		CREATE spl "%spell%"
			LPF add_basic_spell_ability END
			// if appropriate, set the identifying icon
			icon_id=$subrace_data("%ind%" icon_id)
			PATCH_IF icon_id>=0 BEGIN
				LPF ADD_SPELL_EFFECT INT_VAR opcode=142 target=2 parameter2=icon_id timing=9 END
				PATCH_IF VARIABLE_IS_SET $subrace_icon_to_block("%ind%") BEGIN
					LPF CLONE_EFFECT INT_VAR match_opcode=142 opcode=169 parameter2=$subrace_icon_to_block("%ind%") END
					LPF CLONE_EFFECT INT_VAR match_opcode=142 opcode=240 parameter2=$subrace_icon_to_block("%ind%") END
				END
			END
			// add a payload spell if needed
			SPRINT resource $subrace_data("%ind%" spl_init)
			PATCH_IF "%resource%" STR_CMP "-1" BEGIN
				LPF ADD_SPELL_EFFECT INT_VAR opcode=326 target=2 timing=4 duration=1 STR_VAR resource END
			END
			// block further content for joinable NPCs
			LPF ADD_SPELL_EFFECT INT_VAR opcode=318 target=2 timing=0 duration=1 parameter1=stat_ind parameter2=splprot_num STR_VAR resource="%spell%" END

			// apply any ability modifiers
			PHP_EACH ability_opcode_map AS abil=>opcode BEGIN
				SET mod="subrace_data_%ind%_%abil%"
				PATCH_IF !(mod=0) BEGIN
					LPF ADD_SPELL_EFFECT INT_VAR opcode target=2 parameter1=mod timing=4 duration=1 END // timing=4 seems necessary for these not to get overriden at the start of play
				END				
			END
			// set STR to 18/00 if appropriate
			PATCH_IF "subrace_data_%ind%_str">0 BEGIN
				PATCH_FOR_EACH class IN 2 6 7 8 9 10 12 16 17 18 20 BEGIN
					LPF ADD_SPELL_EFFECT INT_VAR opcode=326 target=2 parameter1=class parameter2=105 timing=4 duration=1 STR_VAR resource="%spl_set_str_ex_to_100%" END
				END
			END
			// apply any skill modifiers
			PHP_EACH skill_opcode_map AS skill=>opcode BEGIN
				SET mod="subrace_data_%ind%_%skill%"
				PATCH_IF !(mod=0) BEGIN
					LPF ADD_SPELL_EFFECT INT_VAR opcode target=2 parameter1=mod timing=4 duration=1 END // timing=4 seems necessary for these not to get overriden at the start of play
				END								
			END
			// change race if appropriate
			final_id="subrace_data_%ind%_final_id"
			PATCH_IF !(final_id=race) BEGIN
				LPF ADD_SPELL_EFFECT INT_VAR opcode=72 target=2 parameter1=final_id parameter2=2 timing=4 duration=1 END
			END

	END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DEFINE_ACTION_FUNCTION ability_opcode_map 
	RET_ARRAY ability_opcode_map
BEGIN
	ACTION_CLEAR_ARRAY ability_opcode_map
	ACTION_DEFINE_ASSOCIATIVE_ARRAY ability_opcode_map BEGIN
		str=>44
		dex=>15
		con=>10
		int=>19
		wis=>49
		cha=>6
	END
END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DEFINE_ACTION_FUNCTION skill_opcode_map 
	RET_ARRAY skill_opcode_map
BEGIN
	ACTION_CLEAR_ARRAY skill_opcode_map
	ACTION_DEFINE_ASSOCIATIVE_ARRAY skill_opcode_map BEGIN
		ol=>90
		pp=>92
		ft=>91
		ms=>59
		hs=>275
		di=>276
		st=>277
	END
END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_ACTION_FUNCTION subrace_clab_patch 
	STR_VAR initial="****"
			recur=""
BEGIN

	LAF all_clabs RET_ARRAY clab_array END
	ACTION_PHP_EACH clab_array AS clab=>discard BEGIN
		ACTION_IF !FILE_EXISTS_IN_GAME "%clab%.2da" BEGIN // make sure all the trueclass ones are present
			COPY_EXISTING "clabfi01.2da" "override/%clab%.2da"
				REPLACE_TEXTUALLY "\(AP_\|GA_\)[^%TAB% ]+[%TAB% ]" "**** "
		END
		// main edit
			COPY_EXISTING "%clab%.2da" override
						COUNT_2DA_COLS colcount_clab
						ab_max=0
						REPLACE_EVALUATE "ABILITY\([0-9]+\)\([%TAB% ]\)" BEGIN
							SET ab_here="%MATCH1%"
							SET ab_max = (ab_here>ab_max)? ab_here : ab_max
						END
						"ABILITY%MATCH1%%MATCH2%"
						++ab_max
						SPRINT working "ABILITY%ab_max% %initial%"
						FOR (i=2;i<colcount_clab;++i) BEGIN
							PATCH_IF "%recur%" STRING_EQUAL "" BEGIN
								SPRINT working "%working% %recur%"	
							END ELSE BEGIN
								SPRINT working "%working% %recur%%i%"
							END							
						END
			BUT_ONLY
			APPEND "%clab%.2da" "%working%" KEEP_CRLF
			COPY_EXISTING "%clab%.2da" override 
						PRETTY_PRINT_2DA
	
	
	END
END

DEFINE_ACTION_FUNCTION all_clabs
	RET_ARRAY clab_array
BEGIN
	// start with the trueclass ones
	
	ACTION_CLEAR_ARRAY clab_array
	ACTION_DEFINE_ASSOCIATIVE_ARRAY clab_array BEGIN
		CLABFI01=>null
		CLABMA01=>null
		CLABTH01=>null
		CLABMO01=>null
		CLABPR01=>null
		CLABDR01=>null
		CLABPA01=>null
		CLABRN01=>null
		CLABBA01=>null
		CLABSH01=>null
		
	END
	
	COPY_EXISTING "kitlist.2da" "%workspace%"
		COUNT_2DA_COLS colcount
		COUNT_2DA_ROWS colcount rowcount
		FOR (row=0;row<rowcount;++row) BEGIN
			READ_2DA_ENTRY row 5 colcount clab
			PATCH_IF FILE_EXISTS_IN_GAME "%clab%.2da" BEGIN
				SPRINT $clab_array("%clab%") ""
			END
		END
	BUT_ONLY
		

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION subrace_label_joinable_npcs BEGIN

	COPY_EXISTING "pdialog.2da" "%workspace%"
		COUNT_2DA_ROWS 3 rowcount
		FOR (row=0;row<rowcount;++row) BEGIN
			READ_2DA_ENTRY row 0 3 dv
			TO_LOWER dv
			SPRINT $npc_dv("%dv%") ""
		END
	BUT_ONLY
	
  ACTION_IF FILE_EXISTS_IN_GAME campaign.2da BEGIN
     COPY_EXISTING campaign.2da "%workspace%"
          COUNT_2DA_COLS colcount
          COUNT_2DA_ROWS colcount rowcount
          COUNT_2DA_ROWS (colcount - 1) check
		  PATCH_IF rowcount>check BEGIN
			FOR (col=1;col<colcount;++col) BEGIN
				READ_2DA_ENTRY 0 (col - 1) (colcount - 1) col_header
				PATCH_IF "%col_header%" STRING_EQUAL_CASE pdialog BEGIN
					SET pdialog_col=col
				END	
			END
			FOR (row=0;row<rowcount;++row) BEGIN
				READ_2DA_ENTRY row pdialog_col rowcount pdialog_file
				INNER_ACTION BEGIN
				  COPY_EXISTING "%pdialog_file%.2da" "%workspace%"
					COUNT_2DA_ROWS 3 rowcount
					FOR (row=0;row<rowcount;++row) BEGIN
						READ_2DA_ENTRY row 0 3 dv
						TO_LOWER dv
						SPRINT $npc_dv("%dv%") ""
					END
                  BUT_ONLY
				END
			END
      END
     BUT_ONLY
  END

COPY_EXISTING_REGEXP ".*\.cre" "override"
	READ_ASCII 0x280 dv
	TO_LOWER dv
	PATCH_IF VARIABLE_IS_SET $npc_dv("%dv%") BEGIN
		LPF ADD_CRE_EFFECT INT_VAR opcode=328 target=2 timing=9 parameter2=stat_ind special=1 END
	END

BUT_ONLY


END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_ACTION_FUNCTION build_str_ex_spell BEGIN

		OUTER_SPRINT spell "%spl_set_str_ex_to_100%"
		OUTER_SPRINT effect "%eff_set_str_ex_to_100%"
		CREATE spl "%spell%"
			LPF add_basic_spell_ability END
			LPF ADD_SPELL_EFFECT INT_VAR opcode=97 target=2 timing=1 parameter1=100 parameter2=1 END
		
		
END






////// inlined LUA





<<<<<<<<.../stratagems-inline/subrace_functions.lua

function dwOnRaceSelectButtonClick(index)

	
	dwRecordedRace={} -- addresses edge-case bug where if you start a game and then go to chargen, your old races get cosmetically superimposed
	createCharScreen:OnRaceSelectButtonClick(dwRaces[currentChargenRace].realId)	
	return nil

end

function dwOnRaceDoneButtonClick(index)

	if subraceList(index) then
		if #subraceList(index)==1 then
			currentChargenSubrace=1 -- if there's only one subrace, just record it and go on
			Infinity_PopMenu(); createCharScreen:OnDoneButtonClick()
		else
			Infinity_PushMenu('CHARGEN_SUBRACE') -- go on to the subrace menu	
		end	
	else
		Infinity_PopMenu(); createCharScreen:OnDoneButtonClick()
	end
end

function subraceOrGeneralHelp()

	subracelist = subraceList(dwRaces[currentChargenRace].id)[currentChargenSubrace]
	if subracelist then
		return Infinity_FetchString(subracelist.desc)
	else
		race=dwRaces[currentChargenRace]
		if race then
			return Infinity_FetchString(race.desc)
		else
			return Infinity_FetchString(17237)
		end
	end

end

function getSubraceHighlightFrame(index)
	local ret = 0

	if index == currentChargenSubrace then
		ret = 2
	elseif index == currentChargenSubrace then --need a button down test
		ret = 1
	end

	return ret
end

function subraceDoneButtonClickable()
	if currentChargenSubrace then
		return true
	else
		return false
	end

end

function dwChargenInformation()
	text=chargen.information
	if currentChargenSubrace then
		-- swap race name for subrace name
		subrace=subraceList(dwRaces[currentChargenRace].id)[currentChargenSubrace]
		subraceName=Infinity_FetchString(subrace.name)
		raceName=Infinity_FetchString(dwRaces[currentChargenRace].realName)
		text= string.gsub(text,nocase(raceName),subraceName)
		-- fix the ability score values
		text=dwAddToAbilInString(text,%enginest_strength%,dwSubraceAbilityModifier(1),true)
		text=dwAddToAbilInString(text,%enginest_dexterity%,dwSubraceAbilityModifier(2),true)
		text=dwAddToAbilInString(text,%enginest_constitution%,dwSubraceAbilityModifier(3),true)
		text=dwAddToAbilInString(text,%enginest_intelligence%,dwSubraceAbilityModifier(4),true)
		text=dwAddToAbilInString(text,%enginest_wisdom%,dwSubraceAbilityModifier(5),true)
		text=dwAddToAbilInString(text,%enginest_charisma%,dwSubraceAbilityModifier(6),true)

		text=dwAddToAbilInString(text,%enginest_pick_pockets%,subrace.skills[1],true)
		text=dwAddToAbilInString(text,%enginest_open_locks%,subrace.skills[2],true)
		text=dwAddToAbilInString(text,%enginest_find_remove_traps%,subrace.skills[3],true)
		text=dwAddToAbilInString(text,%enginest_move_silently%,subrace.skills[4],true)
		text=dwAddToAbilInString(text,%enginest_hide_in_shadows%,subrace.skills[5],true)
		text=dwAddToAbilInString(text,%enginest_detect_illusion%,subrace.skills[6],true)
		text=dwAddToAbilInString(text,%enginest_set_traps%,subrace.skills[7],true)


	end
	return text
end

function dwAddToAbilInString(text,abil_strref,add,colon,minimum)
	abil_string=Infinity_FetchString(abil_strref)
	if colon then
		abil_string = abil_string .. ": "
	end
	_,_,num_old=string.find(text,abil_string.."%s*(%d+)")
	if num_old then
		num_new=num_old+add
		if minimum then
			if num_new<minimum then
				num_new=minimum
			end
		end
		text=string.gsub(text,abil_string.."%s*%d+",abil_string..num_new)
	end
	return text
end

function dwAddToDisplayedText(string,add,initial)

	_,_,output=string.find(string,initial..": ".."(%d+)")
	output_new=tonumber(output)+add
	return string.gsub(string,initial..": ".."(%d+)",initial..": "..output_new)

end

function dwChargenTestAdd(string)

	if tonumber(string) then
		return tonumber(string)+20
	else
		return "?"..string.."?"
	end

end

function nocase (s)
      s = string.gsub(s, "%a", function (c)
            return string.format("[%s%s]", string.lower(c),
                                           string.upper(c))
          end)
      return s
end

function dwPassSubraceData()

	if dwIsChargen or dwIsDualClassing or characters[currentID].level.xp==0 then

		signal=0
		extraprof=0
		subrace_number=#chargen.proficiency
		discard_number=subrace_number - 1
		if currentChargenRace then -- character creation
			race=dwRaces[currentChargenRace]
			subrace=subraceList(race.id)[currentChargenSubrace]
			if subrace then
				signal=subrace.id
				extraprof=subrace.extraprof
			end
		else -- dual-classing
			signal=dwFindSubraceData(characters[currentID]).subrace
		end
	

	--	if chargen.proficiency[discard_number].value==0 and chargen.proficiency[subrace_number].value==0 then


			total=dwMaxCount - extraprof


			for count=0,(total - 1) do
				if count<signal then
					createCharScreen:OnProficiencyPlusMinusButtonClick(chargen.proficiency[subrace_number].id, true)
				else
					createCharScreen:OnProficiencyPlusMinusButtonClick(chargen.proficiency[discard_number].id, true)		
				end
			end
	--	end
	end
end

subraceButtonSequences = {}

function dwAddCharacterIcon(bam,current,strRefNominal)

	if strRefNominal>=%tlk_signal_start% then
		id=strRefNominal - %tlk_signal_start%
		if subraceIcons[id] then
			strRef = subraceIcons[id].iconStrRef
		end
	else
		strRef = strRefNominal
	end
	
	if strRef then
		addCharacterDetail(bam,current,Infinity_FetchString(strRef))
	end
end

function dwAddCharacterIcon2(strRefNominal)
	if strRefNominal>=%tlk_signal_start% then
		id=strRefNominal - %tlk_signal_start%
		if subraceIcons[id] then
			strRef = subraceIcons[id].iconStrRef
		end
	else
		strRef = strRefNominal
	end
	return strRef

end

dwRecordedRace={}

function dwDisplayRace(char)
	race = dwFindSubraceData(char)
	return Infinity_FetchString(race.strref)
end


function dwFindSubraceData(char)
	subrace=false
	if next(char.statusEffects) ~= nil then
		for k, v in pairs(char.statusEffects) do
			 if v.strRef>%tlk_signal_start% then
				subrace=true
				id= v.strRef - %tlk_signal_start%
			 end
		end
	end
	if subrace then
		return {race=subraceIcons[id].race,subrace=subraceIcons[id].subrace,strref=subraceIcons[id].subraceStrRef,finalrace=subraceIcons[id].finalrace}
	else
		fallback=char.race
		if defaultSubrace[fallback] then
			return {race=defaultSubrace[fallback].race,subrace=defaultSubrace[fallback].id,strref=defaultSubrace[fallback].strref,finalrace=defaultSubrace[fallback].finalrace}
		else
		    return {race=1,subrace=0,strref=fallback,finalrace=1}
		end
	    
	end
end



function dwSubraceAbilityModifier(abil)
	adjust=0
	if currentChargenSubrace then
		subrace=subraceList(dwRaces[currentChargenRace].id)[currentChargenSubrace]
		if abil==1 then 
			adjust=subrace.str
		elseif abil==2 then
			adjust=subrace.dex
		elseif abil==3 then
			adjust=subrace.con
		elseif abil==4 then
			adjust=subrace.int
		elseif abil==5 then
			adjust=subrace.wis
		else
			adjust=subrace.cha
		end
	
	else
		adjust=0
	end
	return adjust
end

function dwSubraceAbilityAdjust(abil)

	_,v=dwAdjustShownAbilityValue(abil,dwSubraceAbilityModifier(abil))
	return v


end

function dwSubraceAbilityMinMaxSub(text,abil)
	text=dwAddToAbilInString(text,%enginest_minimum%,dwSubraceAbilityModifier(abil),false,3)
	text=dwAddToAbilInString(text,%enginest_maximum%,dwSubraceAbilityModifier(abil),false)
	return text
end



function dwSubraceBioSwap(string)
	
	if currentChargenSubrace and currentChargenRace then
	 	biodata=subraceList(dwRaces[currentChargenRace].id)[currentChargenSubrace].bio_data
		if biodata.old~=-1 then
			str_old=Infinity_FetchString(biodata.old)
			str_new=Infinity_FetchString(biodata.new)
			return string.gsub(string,str_old,str_new)
		else
			return string
		end
	else
		return string
	end

end


function dwSubraceSkillAdjust(skill)

	if currentChargenSubrace and currentChargenRace then
	 	skillmods=subraceList(dwRaces[currentChargenRace].id)[currentChargenSubrace].skills
		return skill.value + skillmods[skill.id+1] -- +1 because skills start at 0 whereas my table is a standard 1-starting LUA table
	else
		return skill.value
	end


end

	
function subraceList(id)
	out={}
	local count=0
	for i,s in pairs (subraces) do
		if s.parent==id and not s.disabled then
			count=count+1
			out[count]=s
			out[count].number=i
		end
	end
	if count>=1 then 
		return out
	else
		return nil
	end
end



function dwMakeRaceList(races)

	raceNames={}
	count=1
	for _,r in pairs (races) do
		dwRaces[count]= {id=r.id, name=r.name, realId=r.id, realName=r.name, desc=r.desc}
		raceNames[r.id]=r.name
		count=count+1
	end
	for _,pr in pairs (dwPseudoRaces) do
		dwRaces[count]={id=pr.id, realId=pr.realId, name=pr.name, desc=pr.desc, realName=raceNames[pr.realId]} 
		count=count+1
	end
	return dwRaces
end

function dwObtainAbilityPoint()

	succeeded=false
	ability=1
	while (not succeeded and ability<=6) do
		if (dwAdjustShownAbilityValue(ability,dwSubraceAbilityModifier(ability))>3) then
			createCharScreen:OnAbilityPlusMinusButtonClick(ability, false)
			succeeded=true
		else
			ability=ability+1
		end
	end
	return succeeded
end

function dwImposeLegalAbilityMinimums()
	for ability=1,6 do
		failed=false
		while (dwAdjustShownAbilityValue(ability,dwSubraceAbilityModifier(ability))<3 and failed~=false) do
			if dwObtainAbilityPoint()==true then
				createCharScreen:OnAbilityPlusMinusButtonClick(ability, true)				
			else
				failed=true
			end
		end
	end
end
>>>>>>>>

<<<<<<<<.../stratagems-inline/subrace_objects.lua
dwPseudoRaces={}
subraces = {}
subraceIcons ={}
defaultSubrace={}
>>>>>>>>


<<<<<<<<.../stratagems-inline/race_or_general_help.lua
function raceOrGeneralHelp()
	race = dwRaces[currentChargenRace]
	if race then
		subracelist=subraceList(dwRaces[currentChargenRace].id)
		if subracelist then
			if #subracelist==1 then
				return Infinity_FetchString(subracelist[1].desc)
			else 
				return Infinity_FetchString(race.desc)
			end
		else
			return Infinity_FetchString(race.desc)
		end
	else
		return Infinity_FetchString(17237)
	end
end
>>>>>>>>

<<<<<<<<.../stratagems-inline/ability_or_general_help.lua
function abilityOrGeneralHelp()
	ability = chargen.ability[currentChargenAbility]
	if ability and ability.desc ~= -1 then
		createCharScreen:SetAbilityHelpInfo(currentChargenAbility)
		return dwSubraceAbilityMinMaxSub(Infinity_FetchString(ability.desc),currentChargenAbility)
	else
		return Infinity_FetchString(17247)
	end
end
>>>>>>>>