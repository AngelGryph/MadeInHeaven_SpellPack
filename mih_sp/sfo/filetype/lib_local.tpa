// These are local additions, not part of standard SFO.

DEFINE_PATCH_FUNCTION CRE_make_legendary
  STR_VAR
  arguments	= ""
BEGIN
  INNER_ACTION
  BEGIN
    LAUNCH_ACTION_FUNCTION read_table_entry_external
      STR_VAR
      file	= "legendary.2da"
      locbase	= "lib/resource"
      row	= "%arguments%"
      column	= "HD"
      RET
      hd_bonus	= value
    END

    LAUNCH_ACTION_FUNCTION read_table_entry_external
      STR_VAR
      file	= "legendary.2da"
      locbase	= "lib/resource"
      row	= "%arguments%"
      column	= "AC"
      RET
      ac_bonus	= value
    END

    LAUNCH_ACTION_FUNCTION read_table_entry_external
      STR_VAR
      file	= "legendary.2da"
      locbase	= "lib/resource"
      row	= "%arguments%"
      column	= "THAC0"
      RET
      thac0_bonus	= value
    END
  END


  CLEAR_ARRAY make_legendary
  DEFINE_ASSOCIATIVE_ARRAY make_legendary
  BEGIN
    level_all=>"level1 + %hd_bonus%"
    ac=>"if (ac_effective - %ac_bonus% < -20) then -20 else (ac_effective - %ac_bonus%)"
    thac0=>"thac0 - %thac0_bonus%"
    enforce_hp=>at_worst
    enforce_saves=>at_worst
  END
  
  LAUNCH_PATCH_FUNCTION apply_patches
    STR_VAR
    file_ext	= "CRE"
    edits	= "make_legendary"
  END
END


DEFINE_PATCH_FUNCTION CRE_set_xp_by_hd
  STR_VAR
  arguments	= ""
BEGIN
  LAUNCH_PATCH_FUNCTION fail_unless_int
    STR_VAR
    value="%arguments%"
    expression=""
  END

  LAUNCH_PATCH_FUNCTION CRE_read_level1
    RET level1=value
  END

  SET hd = level1 + arguments

  SET hd = (hd < 0) ? 0 : hd
  SET hd = (hd > 50) ? 50 : hd

  INNER_ACTION
  BEGIN
    LAUNCH_ACTION_FUNCTION read_table_entry_external
      STR_VAR
      file	= "xp_table.2da"
      locbase	= "lib/resource"
      row	= "%hd%"
      column	= "XP"
      RET
      xp_value	= value
    END
  END

  LAUNCH_PATCH_FUNCTION CRE_xp_value
    STR_VAR
    arguments="%xp_value%"
  END
END


DEFINE_PATCH_FUNCTION ITM_cd_immunity
  STR_VAR
  arguments	= ""
BEGIN
  WHILE "%arguments%" STRING_COMPARE ""
  BEGIN
    LAUNCH_PATCH_FUNCTION return_first_entry
      STR_VAR
      list	= "%arguments%"
      RET
      arguments	= list
      entry
    END

    LAUNCH_PATCH_FUNCTION cd_apply_batch
      STR_VAR
      array_name	= "cd_immunity_%entry%_arrays"
    END
  END
END
OUTER_SPRINT $SFO_do_not_parse_arguments("ITM_cd_immunity") ""


DEFINE_PATCH_FUNCTION SPL_cd_immunity
  STR_VAR
  arguments	= ""
BEGIN
  WHILE "%arguments%" STRING_COMPARE ""
  BEGIN
    LAUNCH_PATCH_FUNCTION return_first_entry
      STR_VAR
      list	= "%arguments%"
      RET
      arguments	= list
      entry
    END

    LAUNCH_PATCH_FUNCTION cd_apply_batch
      STR_VAR
      array_name	= "cd_immunity_%entry%_arrays"
    END
  END
END
OUTER_SPRINT $SFO_do_not_parse_arguments("SPL_cd_immunity") ""


DEFINE_PATCH_FUNCTION STO_swap_items
  STR_VAR
  arguments=""
BEGIN
  PATCH_IF "%arguments%" STRING_COMPARE_CASE ""
  BEGIN
    LAUNCH_PATCH_FUNCTION return_first_pair
      STR_VAR
      list	= "%arguments%"
      RET
      old	= key
      new	= value
      arguments	= list
    END
    REPLACE_TEXTUALLY CASE_INSENSITIVE "%old%" "%new%" (8)
    LAUNCH_PATCH_FUNCTION STO_swap_items
      STR_VAR
      arguments	= "%arguments%"
    END
  END
END
OUTER_SPRINT $SFO_do_not_parse_arguments("STO_swap_items") ""


DEFINE_PATCH_FUNCTION SPL_substitute_name
   STR_VAR
   arguments=""
BEGIN
   LAUNCH_PATCH_FUNCTION patch_text_entry
     INT_VAR
     loc=0x08
     STR_VAR
     function=substitute_string
     arguments= "%arguments%"
   END
END
OUTER_SPRINT $SFO_do_not_parse_arguments("SPL_substitute_name") ""


DEFINE_PATCH_FUNCTION SPL_prepend_name
  STR_VAR
  arguments=""
BEGIN
  READ_STRREF NAME1 old_name
  SAY_EVALUATED NAME1 ~%arguments% %old_name%~
END
OUTER_SPRINT $SFO_do_not_parse_arguments("SPL_prepend_name") ""


DEFINE_ACTION_FUNCTION edit_itemexcl
  INT_VAR
  mask		= 0
  enable	= 1
  STR_VAR
  item		= ""
BEGIN
  LAUNCH_ACTION_FUNCTION check_ini
    STR_VAR
    ini			= "update_itemexcl_2da"
    RET
    update_itemexcl_2da	= value
  END

  ACTION_IF (update_itemexcl_2da & mask) > 0
  BEGIN
    LAUNCH_ACTION_FUNCTION write_table_entry
      STR_VAR
      file	= "itemexcl"
      row	= "%item%"
      column	= "VALUE"
      arguments	= "%enable%"
    END
  END
END


DEFINE_ACTION_FUNCTION edit_hidespl
  INT_VAR
  is_hidden	= "-1"
  is_final	= "-1"
  is_removed	= "-1"
  STR_VAR
  spell		= ""
BEGIN
  ACTION_IF enhanced_edition
  BEGIN
    ACTION_IF is_hidden >= 0
    BEGIN
      LAUNCH_ACTION_FUNCTION write_table_entry
        STR_VAR
        file		= "hidespl"
        row		= "%spell%"
        column		= "IS_HIDDEN"
        arguments	= "%is_hidden%"
      END
    END

    ACTION_IF is_final >= 0
    BEGIN
      LAUNCH_ACTION_FUNCTION write_table_entry
        STR_VAR
        file		= "hidespl"
        row		= "%spell%"
        column		= "IS_FINAL"
        arguments	= "%is_final%"
      END
    END

    ACTION_IF is_final >= 0
    BEGIN
      LAUNCH_ACTION_FUNCTION write_table_entry
        STR_VAR
        file		= "hidespl"
        row		= "%spell%"
        column		= "IS_REMOVED"
        arguments	= "%is_removed%"
      END
    END
  END
END


